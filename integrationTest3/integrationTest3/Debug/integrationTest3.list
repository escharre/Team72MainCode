
integrationTest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a08  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08005ac8  08005ac8  00015ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d74  08005d74  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d7c  08005d7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d7c  08005d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  08005df4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08005df4  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbb3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e14  00000000  00000000  0002bc4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  0002da60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  0002e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011420  00000000  00000000  0002f068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de0f  00000000  00000000  00040488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ba91  00000000  00000000  0004e297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b9d28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003200  00000000  00000000  000b9d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ab0 	.word	0x08005ab0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005ab0 	.word	0x08005ab0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cfrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	1c08      	adds	r0, r1, #0
 8000248:	4661      	mov	r1, ip
 800024a:	e7ff      	b.n	800024c <__aeabi_cfcmpeq>

0800024c <__aeabi_cfcmpeq>:
 800024c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800024e:	f000 f9bb 	bl	80005c8 <__lesf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	d401      	bmi.n	800025a <__aeabi_cfcmpeq+0xe>
 8000256:	2100      	movs	r1, #0
 8000258:	42c8      	cmn	r0, r1
 800025a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800025c <__aeabi_fcmpeq>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 f93f 	bl	80004e0 <__eqsf2>
 8000262:	4240      	negs	r0, r0
 8000264:	3001      	adds	r0, #1
 8000266:	bd10      	pop	{r4, pc}

08000268 <__aeabi_fcmplt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 f9ad 	bl	80005c8 <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	db01      	blt.n	8000276 <__aeabi_fcmplt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmple>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f9a3 	bl	80005c8 <__lesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dd01      	ble.n	800028a <__aeabi_fcmple+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpgt>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 f94d 	bl	8000530 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	dc01      	bgt.n	800029e <__aeabi_fcmpgt+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_fcmpge>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	f000 f943 	bl	8000530 <__gesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	da01      	bge.n	80002b2 <__aeabi_fcmpge+0xe>
 80002ae:	2000      	movs	r0, #0
 80002b0:	bd10      	pop	{r4, pc}
 80002b2:	2001      	movs	r0, #1
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)

080002b8 <__aeabi_uldivmod>:
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d111      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002bc:	2a00      	cmp	r2, #0
 80002be:	d10f      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d100      	bne.n	80002c6 <__aeabi_uldivmod+0xe>
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d002      	beq.n	80002ce <__aeabi_uldivmod+0x16>
 80002c8:	2100      	movs	r1, #0
 80002ca:	43c9      	mvns	r1, r1
 80002cc:	1c08      	adds	r0, r1, #0
 80002ce:	b407      	push	{r0, r1, r2}
 80002d0:	4802      	ldr	r0, [pc, #8]	; (80002dc <__aeabi_uldivmod+0x24>)
 80002d2:	a102      	add	r1, pc, #8	; (adr r1, 80002dc <__aeabi_uldivmod+0x24>)
 80002d4:	1840      	adds	r0, r0, r1
 80002d6:	9002      	str	r0, [sp, #8]
 80002d8:	bd03      	pop	{r0, r1, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	ffffff65 	.word	0xffffff65
 80002e0:	b403      	push	{r0, r1}
 80002e2:	4668      	mov	r0, sp
 80002e4:	b501      	push	{r0, lr}
 80002e6:	9802      	ldr	r0, [sp, #8]
 80002e8:	f000 f82e 	bl	8000348 <__udivmoddi4>
 80002ec:	9b01      	ldr	r3, [sp, #4]
 80002ee:	469e      	mov	lr, r3
 80002f0:	b002      	add	sp, #8
 80002f2:	bc0c      	pop	{r2, r3}
 80002f4:	4770      	bx	lr
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__aeabi_lmul>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	0415      	lsls	r5, r2, #16
 80002fc:	0c2d      	lsrs	r5, r5, #16
 80002fe:	000f      	movs	r7, r1
 8000300:	0001      	movs	r1, r0
 8000302:	002e      	movs	r6, r5
 8000304:	46c6      	mov	lr, r8
 8000306:	4684      	mov	ip, r0
 8000308:	0400      	lsls	r0, r0, #16
 800030a:	0c14      	lsrs	r4, r2, #16
 800030c:	0c00      	lsrs	r0, r0, #16
 800030e:	0c09      	lsrs	r1, r1, #16
 8000310:	4346      	muls	r6, r0
 8000312:	434d      	muls	r5, r1
 8000314:	4360      	muls	r0, r4
 8000316:	4361      	muls	r1, r4
 8000318:	1940      	adds	r0, r0, r5
 800031a:	0c34      	lsrs	r4, r6, #16
 800031c:	1824      	adds	r4, r4, r0
 800031e:	b500      	push	{lr}
 8000320:	42a5      	cmp	r5, r4
 8000322:	d903      	bls.n	800032c <__aeabi_lmul+0x34>
 8000324:	2080      	movs	r0, #128	; 0x80
 8000326:	0240      	lsls	r0, r0, #9
 8000328:	4680      	mov	r8, r0
 800032a:	4441      	add	r1, r8
 800032c:	0c25      	lsrs	r5, r4, #16
 800032e:	186d      	adds	r5, r5, r1
 8000330:	4661      	mov	r1, ip
 8000332:	4359      	muls	r1, r3
 8000334:	437a      	muls	r2, r7
 8000336:	0430      	lsls	r0, r6, #16
 8000338:	1949      	adds	r1, r1, r5
 800033a:	0424      	lsls	r4, r4, #16
 800033c:	0c00      	lsrs	r0, r0, #16
 800033e:	1820      	adds	r0, r4, r0
 8000340:	1889      	adds	r1, r1, r2
 8000342:	bc80      	pop	{r7}
 8000344:	46b8      	mov	r8, r7
 8000346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000348 <__udivmoddi4>:
 8000348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800034a:	4657      	mov	r7, sl
 800034c:	464e      	mov	r6, r9
 800034e:	4645      	mov	r5, r8
 8000350:	46de      	mov	lr, fp
 8000352:	b5e0      	push	{r5, r6, r7, lr}
 8000354:	0004      	movs	r4, r0
 8000356:	000d      	movs	r5, r1
 8000358:	4692      	mov	sl, r2
 800035a:	4699      	mov	r9, r3
 800035c:	b083      	sub	sp, #12
 800035e:	428b      	cmp	r3, r1
 8000360:	d830      	bhi.n	80003c4 <__udivmoddi4+0x7c>
 8000362:	d02d      	beq.n	80003c0 <__udivmoddi4+0x78>
 8000364:	4649      	mov	r1, r9
 8000366:	4650      	mov	r0, sl
 8000368:	f000 faec 	bl	8000944 <__clzdi2>
 800036c:	0029      	movs	r1, r5
 800036e:	0006      	movs	r6, r0
 8000370:	0020      	movs	r0, r4
 8000372:	f000 fae7 	bl	8000944 <__clzdi2>
 8000376:	1a33      	subs	r3, r6, r0
 8000378:	4698      	mov	r8, r3
 800037a:	3b20      	subs	r3, #32
 800037c:	469b      	mov	fp, r3
 800037e:	d433      	bmi.n	80003e8 <__udivmoddi4+0xa0>
 8000380:	465a      	mov	r2, fp
 8000382:	4653      	mov	r3, sl
 8000384:	4093      	lsls	r3, r2
 8000386:	4642      	mov	r2, r8
 8000388:	001f      	movs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d83a      	bhi.n	800040a <__udivmoddi4+0xc2>
 8000394:	42af      	cmp	r7, r5
 8000396:	d100      	bne.n	800039a <__udivmoddi4+0x52>
 8000398:	e078      	b.n	800048c <__udivmoddi4+0x144>
 800039a:	465b      	mov	r3, fp
 800039c:	1ba4      	subs	r4, r4, r6
 800039e:	41bd      	sbcs	r5, r7
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	da00      	bge.n	80003a6 <__udivmoddi4+0x5e>
 80003a4:	e075      	b.n	8000492 <__udivmoddi4+0x14a>
 80003a6:	2200      	movs	r2, #0
 80003a8:	2300      	movs	r3, #0
 80003aa:	9200      	str	r2, [sp, #0]
 80003ac:	9301      	str	r3, [sp, #4]
 80003ae:	2301      	movs	r3, #1
 80003b0:	465a      	mov	r2, fp
 80003b2:	4093      	lsls	r3, r2
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	2301      	movs	r3, #1
 80003b8:	4642      	mov	r2, r8
 80003ba:	4093      	lsls	r3, r2
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	e028      	b.n	8000412 <__udivmoddi4+0xca>
 80003c0:	4282      	cmp	r2, r0
 80003c2:	d9cf      	bls.n	8000364 <__udivmoddi4+0x1c>
 80003c4:	2200      	movs	r2, #0
 80003c6:	2300      	movs	r3, #0
 80003c8:	9200      	str	r2, [sp, #0]
 80003ca:	9301      	str	r3, [sp, #4]
 80003cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <__udivmoddi4+0x8e>
 80003d2:	601c      	str	r4, [r3, #0]
 80003d4:	605d      	str	r5, [r3, #4]
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	b003      	add	sp, #12
 80003dc:	bcf0      	pop	{r4, r5, r6, r7}
 80003de:	46bb      	mov	fp, r7
 80003e0:	46b2      	mov	sl, r6
 80003e2:	46a9      	mov	r9, r5
 80003e4:	46a0      	mov	r8, r4
 80003e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003e8:	4642      	mov	r2, r8
 80003ea:	2320      	movs	r3, #32
 80003ec:	1a9b      	subs	r3, r3, r2
 80003ee:	4652      	mov	r2, sl
 80003f0:	40da      	lsrs	r2, r3
 80003f2:	4641      	mov	r1, r8
 80003f4:	0013      	movs	r3, r2
 80003f6:	464a      	mov	r2, r9
 80003f8:	408a      	lsls	r2, r1
 80003fa:	0017      	movs	r7, r2
 80003fc:	4642      	mov	r2, r8
 80003fe:	431f      	orrs	r7, r3
 8000400:	4653      	mov	r3, sl
 8000402:	4093      	lsls	r3, r2
 8000404:	001e      	movs	r6, r3
 8000406:	42af      	cmp	r7, r5
 8000408:	d9c4      	bls.n	8000394 <__udivmoddi4+0x4c>
 800040a:	2200      	movs	r2, #0
 800040c:	2300      	movs	r3, #0
 800040e:	9200      	str	r2, [sp, #0]
 8000410:	9301      	str	r3, [sp, #4]
 8000412:	4643      	mov	r3, r8
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0d9      	beq.n	80003cc <__udivmoddi4+0x84>
 8000418:	07fb      	lsls	r3, r7, #31
 800041a:	0872      	lsrs	r2, r6, #1
 800041c:	431a      	orrs	r2, r3
 800041e:	4646      	mov	r6, r8
 8000420:	087b      	lsrs	r3, r7, #1
 8000422:	e00e      	b.n	8000442 <__udivmoddi4+0xfa>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d101      	bne.n	800042c <__udivmoddi4+0xe4>
 8000428:	42a2      	cmp	r2, r4
 800042a:	d80c      	bhi.n	8000446 <__udivmoddi4+0xfe>
 800042c:	1aa4      	subs	r4, r4, r2
 800042e:	419d      	sbcs	r5, r3
 8000430:	2001      	movs	r0, #1
 8000432:	1924      	adds	r4, r4, r4
 8000434:	416d      	adcs	r5, r5
 8000436:	2100      	movs	r1, #0
 8000438:	3e01      	subs	r6, #1
 800043a:	1824      	adds	r4, r4, r0
 800043c:	414d      	adcs	r5, r1
 800043e:	2e00      	cmp	r6, #0
 8000440:	d006      	beq.n	8000450 <__udivmoddi4+0x108>
 8000442:	42ab      	cmp	r3, r5
 8000444:	d9ee      	bls.n	8000424 <__udivmoddi4+0xdc>
 8000446:	3e01      	subs	r6, #1
 8000448:	1924      	adds	r4, r4, r4
 800044a:	416d      	adcs	r5, r5
 800044c:	2e00      	cmp	r6, #0
 800044e:	d1f8      	bne.n	8000442 <__udivmoddi4+0xfa>
 8000450:	9800      	ldr	r0, [sp, #0]
 8000452:	9901      	ldr	r1, [sp, #4]
 8000454:	465b      	mov	r3, fp
 8000456:	1900      	adds	r0, r0, r4
 8000458:	4169      	adcs	r1, r5
 800045a:	2b00      	cmp	r3, #0
 800045c:	db24      	blt.n	80004a8 <__udivmoddi4+0x160>
 800045e:	002b      	movs	r3, r5
 8000460:	465a      	mov	r2, fp
 8000462:	4644      	mov	r4, r8
 8000464:	40d3      	lsrs	r3, r2
 8000466:	002a      	movs	r2, r5
 8000468:	40e2      	lsrs	r2, r4
 800046a:	001c      	movs	r4, r3
 800046c:	465b      	mov	r3, fp
 800046e:	0015      	movs	r5, r2
 8000470:	2b00      	cmp	r3, #0
 8000472:	db2a      	blt.n	80004ca <__udivmoddi4+0x182>
 8000474:	0026      	movs	r6, r4
 8000476:	409e      	lsls	r6, r3
 8000478:	0033      	movs	r3, r6
 800047a:	0026      	movs	r6, r4
 800047c:	4647      	mov	r7, r8
 800047e:	40be      	lsls	r6, r7
 8000480:	0032      	movs	r2, r6
 8000482:	1a80      	subs	r0, r0, r2
 8000484:	4199      	sbcs	r1, r3
 8000486:	9000      	str	r0, [sp, #0]
 8000488:	9101      	str	r1, [sp, #4]
 800048a:	e79f      	b.n	80003cc <__udivmoddi4+0x84>
 800048c:	42a3      	cmp	r3, r4
 800048e:	d8bc      	bhi.n	800040a <__udivmoddi4+0xc2>
 8000490:	e783      	b.n	800039a <__udivmoddi4+0x52>
 8000492:	4642      	mov	r2, r8
 8000494:	2320      	movs	r3, #32
 8000496:	2100      	movs	r1, #0
 8000498:	1a9b      	subs	r3, r3, r2
 800049a:	2200      	movs	r2, #0
 800049c:	9100      	str	r1, [sp, #0]
 800049e:	9201      	str	r2, [sp, #4]
 80004a0:	2201      	movs	r2, #1
 80004a2:	40da      	lsrs	r2, r3
 80004a4:	9201      	str	r2, [sp, #4]
 80004a6:	e786      	b.n	80003b6 <__udivmoddi4+0x6e>
 80004a8:	4642      	mov	r2, r8
 80004aa:	2320      	movs	r3, #32
 80004ac:	1a9b      	subs	r3, r3, r2
 80004ae:	002a      	movs	r2, r5
 80004b0:	4646      	mov	r6, r8
 80004b2:	409a      	lsls	r2, r3
 80004b4:	0023      	movs	r3, r4
 80004b6:	40f3      	lsrs	r3, r6
 80004b8:	4644      	mov	r4, r8
 80004ba:	4313      	orrs	r3, r2
 80004bc:	002a      	movs	r2, r5
 80004be:	40e2      	lsrs	r2, r4
 80004c0:	001c      	movs	r4, r3
 80004c2:	465b      	mov	r3, fp
 80004c4:	0015      	movs	r5, r2
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dad4      	bge.n	8000474 <__udivmoddi4+0x12c>
 80004ca:	4642      	mov	r2, r8
 80004cc:	002f      	movs	r7, r5
 80004ce:	2320      	movs	r3, #32
 80004d0:	0026      	movs	r6, r4
 80004d2:	4097      	lsls	r7, r2
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	40de      	lsrs	r6, r3
 80004d8:	003b      	movs	r3, r7
 80004da:	4333      	orrs	r3, r6
 80004dc:	e7cd      	b.n	800047a <__udivmoddi4+0x132>
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__eqsf2>:
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	0042      	lsls	r2, r0, #1
 80004e4:	024e      	lsls	r6, r1, #9
 80004e6:	004c      	lsls	r4, r1, #1
 80004e8:	0245      	lsls	r5, r0, #9
 80004ea:	0a6d      	lsrs	r5, r5, #9
 80004ec:	0e12      	lsrs	r2, r2, #24
 80004ee:	0fc3      	lsrs	r3, r0, #31
 80004f0:	0a76      	lsrs	r6, r6, #9
 80004f2:	0e24      	lsrs	r4, r4, #24
 80004f4:	0fc9      	lsrs	r1, r1, #31
 80004f6:	2aff      	cmp	r2, #255	; 0xff
 80004f8:	d00f      	beq.n	800051a <__eqsf2+0x3a>
 80004fa:	2cff      	cmp	r4, #255	; 0xff
 80004fc:	d011      	beq.n	8000522 <__eqsf2+0x42>
 80004fe:	2001      	movs	r0, #1
 8000500:	42a2      	cmp	r2, r4
 8000502:	d000      	beq.n	8000506 <__eqsf2+0x26>
 8000504:	bd70      	pop	{r4, r5, r6, pc}
 8000506:	42b5      	cmp	r5, r6
 8000508:	d1fc      	bne.n	8000504 <__eqsf2+0x24>
 800050a:	428b      	cmp	r3, r1
 800050c:	d00d      	beq.n	800052a <__eqsf2+0x4a>
 800050e:	2a00      	cmp	r2, #0
 8000510:	d1f8      	bne.n	8000504 <__eqsf2+0x24>
 8000512:	0028      	movs	r0, r5
 8000514:	1e45      	subs	r5, r0, #1
 8000516:	41a8      	sbcs	r0, r5
 8000518:	e7f4      	b.n	8000504 <__eqsf2+0x24>
 800051a:	2001      	movs	r0, #1
 800051c:	2d00      	cmp	r5, #0
 800051e:	d1f1      	bne.n	8000504 <__eqsf2+0x24>
 8000520:	e7eb      	b.n	80004fa <__eqsf2+0x1a>
 8000522:	2001      	movs	r0, #1
 8000524:	2e00      	cmp	r6, #0
 8000526:	d1ed      	bne.n	8000504 <__eqsf2+0x24>
 8000528:	e7e9      	b.n	80004fe <__eqsf2+0x1e>
 800052a:	2000      	movs	r0, #0
 800052c:	e7ea      	b.n	8000504 <__eqsf2+0x24>
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__gesf2>:
 8000530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000532:	0042      	lsls	r2, r0, #1
 8000534:	0246      	lsls	r6, r0, #9
 8000536:	024d      	lsls	r5, r1, #9
 8000538:	004c      	lsls	r4, r1, #1
 800053a:	0fc3      	lsrs	r3, r0, #31
 800053c:	0a76      	lsrs	r6, r6, #9
 800053e:	0e12      	lsrs	r2, r2, #24
 8000540:	0a6d      	lsrs	r5, r5, #9
 8000542:	0e24      	lsrs	r4, r4, #24
 8000544:	0fc8      	lsrs	r0, r1, #31
 8000546:	2aff      	cmp	r2, #255	; 0xff
 8000548:	d01f      	beq.n	800058a <__gesf2+0x5a>
 800054a:	2cff      	cmp	r4, #255	; 0xff
 800054c:	d010      	beq.n	8000570 <__gesf2+0x40>
 800054e:	2a00      	cmp	r2, #0
 8000550:	d11f      	bne.n	8000592 <__gesf2+0x62>
 8000552:	4271      	negs	r1, r6
 8000554:	4171      	adcs	r1, r6
 8000556:	2c00      	cmp	r4, #0
 8000558:	d101      	bne.n	800055e <__gesf2+0x2e>
 800055a:	2d00      	cmp	r5, #0
 800055c:	d01e      	beq.n	800059c <__gesf2+0x6c>
 800055e:	2900      	cmp	r1, #0
 8000560:	d10e      	bne.n	8000580 <__gesf2+0x50>
 8000562:	4283      	cmp	r3, r0
 8000564:	d01e      	beq.n	80005a4 <__gesf2+0x74>
 8000566:	2102      	movs	r1, #2
 8000568:	1e58      	subs	r0, r3, #1
 800056a:	4008      	ands	r0, r1
 800056c:	3801      	subs	r0, #1
 800056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000570:	2d00      	cmp	r5, #0
 8000572:	d126      	bne.n	80005c2 <__gesf2+0x92>
 8000574:	2a00      	cmp	r2, #0
 8000576:	d1f4      	bne.n	8000562 <__gesf2+0x32>
 8000578:	4271      	negs	r1, r6
 800057a:	4171      	adcs	r1, r6
 800057c:	2900      	cmp	r1, #0
 800057e:	d0f0      	beq.n	8000562 <__gesf2+0x32>
 8000580:	2800      	cmp	r0, #0
 8000582:	d1f4      	bne.n	800056e <__gesf2+0x3e>
 8000584:	2001      	movs	r0, #1
 8000586:	4240      	negs	r0, r0
 8000588:	e7f1      	b.n	800056e <__gesf2+0x3e>
 800058a:	2e00      	cmp	r6, #0
 800058c:	d119      	bne.n	80005c2 <__gesf2+0x92>
 800058e:	2cff      	cmp	r4, #255	; 0xff
 8000590:	d0ee      	beq.n	8000570 <__gesf2+0x40>
 8000592:	2c00      	cmp	r4, #0
 8000594:	d1e5      	bne.n	8000562 <__gesf2+0x32>
 8000596:	2d00      	cmp	r5, #0
 8000598:	d1e3      	bne.n	8000562 <__gesf2+0x32>
 800059a:	e7e4      	b.n	8000566 <__gesf2+0x36>
 800059c:	2000      	movs	r0, #0
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d0e5      	beq.n	800056e <__gesf2+0x3e>
 80005a2:	e7e0      	b.n	8000566 <__gesf2+0x36>
 80005a4:	42a2      	cmp	r2, r4
 80005a6:	dc05      	bgt.n	80005b4 <__gesf2+0x84>
 80005a8:	dbea      	blt.n	8000580 <__gesf2+0x50>
 80005aa:	42ae      	cmp	r6, r5
 80005ac:	d802      	bhi.n	80005b4 <__gesf2+0x84>
 80005ae:	d3e7      	bcc.n	8000580 <__gesf2+0x50>
 80005b0:	2000      	movs	r0, #0
 80005b2:	e7dc      	b.n	800056e <__gesf2+0x3e>
 80005b4:	4241      	negs	r1, r0
 80005b6:	4141      	adcs	r1, r0
 80005b8:	4248      	negs	r0, r1
 80005ba:	2102      	movs	r1, #2
 80005bc:	4008      	ands	r0, r1
 80005be:	3801      	subs	r0, #1
 80005c0:	e7d5      	b.n	800056e <__gesf2+0x3e>
 80005c2:	2002      	movs	r0, #2
 80005c4:	4240      	negs	r0, r0
 80005c6:	e7d2      	b.n	800056e <__gesf2+0x3e>

080005c8 <__lesf2>:
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	0042      	lsls	r2, r0, #1
 80005cc:	0246      	lsls	r6, r0, #9
 80005ce:	024d      	lsls	r5, r1, #9
 80005d0:	004c      	lsls	r4, r1, #1
 80005d2:	0fc3      	lsrs	r3, r0, #31
 80005d4:	0a76      	lsrs	r6, r6, #9
 80005d6:	0e12      	lsrs	r2, r2, #24
 80005d8:	0a6d      	lsrs	r5, r5, #9
 80005da:	0e24      	lsrs	r4, r4, #24
 80005dc:	0fc8      	lsrs	r0, r1, #31
 80005de:	2aff      	cmp	r2, #255	; 0xff
 80005e0:	d00d      	beq.n	80005fe <__lesf2+0x36>
 80005e2:	2cff      	cmp	r4, #255	; 0xff
 80005e4:	d00f      	beq.n	8000606 <__lesf2+0x3e>
 80005e6:	2a00      	cmp	r2, #0
 80005e8:	d123      	bne.n	8000632 <__lesf2+0x6a>
 80005ea:	4271      	negs	r1, r6
 80005ec:	4171      	adcs	r1, r6
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	d10f      	bne.n	8000612 <__lesf2+0x4a>
 80005f2:	2d00      	cmp	r5, #0
 80005f4:	d10d      	bne.n	8000612 <__lesf2+0x4a>
 80005f6:	2000      	movs	r0, #0
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d014      	beq.n	8000626 <__lesf2+0x5e>
 80005fc:	e00d      	b.n	800061a <__lesf2+0x52>
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d110      	bne.n	8000624 <__lesf2+0x5c>
 8000602:	2cff      	cmp	r4, #255	; 0xff
 8000604:	d115      	bne.n	8000632 <__lesf2+0x6a>
 8000606:	2d00      	cmp	r5, #0
 8000608:	d10c      	bne.n	8000624 <__lesf2+0x5c>
 800060a:	2a00      	cmp	r2, #0
 800060c:	d103      	bne.n	8000616 <__lesf2+0x4e>
 800060e:	4271      	negs	r1, r6
 8000610:	4171      	adcs	r1, r6
 8000612:	2900      	cmp	r1, #0
 8000614:	d108      	bne.n	8000628 <__lesf2+0x60>
 8000616:	4283      	cmp	r3, r0
 8000618:	d010      	beq.n	800063c <__lesf2+0x74>
 800061a:	2102      	movs	r1, #2
 800061c:	1e58      	subs	r0, r3, #1
 800061e:	4008      	ands	r0, r1
 8000620:	3801      	subs	r0, #1
 8000622:	e000      	b.n	8000626 <__lesf2+0x5e>
 8000624:	2002      	movs	r0, #2
 8000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000628:	2800      	cmp	r0, #0
 800062a:	d1fc      	bne.n	8000626 <__lesf2+0x5e>
 800062c:	2001      	movs	r0, #1
 800062e:	4240      	negs	r0, r0
 8000630:	e7f9      	b.n	8000626 <__lesf2+0x5e>
 8000632:	2c00      	cmp	r4, #0
 8000634:	d1ef      	bne.n	8000616 <__lesf2+0x4e>
 8000636:	2d00      	cmp	r5, #0
 8000638:	d1ed      	bne.n	8000616 <__lesf2+0x4e>
 800063a:	e7ee      	b.n	800061a <__lesf2+0x52>
 800063c:	42a2      	cmp	r2, r4
 800063e:	dc05      	bgt.n	800064c <__lesf2+0x84>
 8000640:	dbf2      	blt.n	8000628 <__lesf2+0x60>
 8000642:	42ae      	cmp	r6, r5
 8000644:	d802      	bhi.n	800064c <__lesf2+0x84>
 8000646:	d3ef      	bcc.n	8000628 <__lesf2+0x60>
 8000648:	2000      	movs	r0, #0
 800064a:	e7ec      	b.n	8000626 <__lesf2+0x5e>
 800064c:	4241      	negs	r1, r0
 800064e:	4141      	adcs	r1, r0
 8000650:	4248      	negs	r0, r1
 8000652:	2102      	movs	r1, #2
 8000654:	4008      	ands	r0, r1
 8000656:	3801      	subs	r0, #1
 8000658:	e7e5      	b.n	8000626 <__lesf2+0x5e>
 800065a:	46c0      	nop			; (mov r8, r8)

0800065c <__aeabi_fmul>:
 800065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065e:	4657      	mov	r7, sl
 8000660:	464e      	mov	r6, r9
 8000662:	4645      	mov	r5, r8
 8000664:	46de      	mov	lr, fp
 8000666:	0244      	lsls	r4, r0, #9
 8000668:	b5e0      	push	{r5, r6, r7, lr}
 800066a:	0045      	lsls	r5, r0, #1
 800066c:	1c0f      	adds	r7, r1, #0
 800066e:	0a64      	lsrs	r4, r4, #9
 8000670:	0e2d      	lsrs	r5, r5, #24
 8000672:	0fc6      	lsrs	r6, r0, #31
 8000674:	2d00      	cmp	r5, #0
 8000676:	d047      	beq.n	8000708 <__aeabi_fmul+0xac>
 8000678:	2dff      	cmp	r5, #255	; 0xff
 800067a:	d04d      	beq.n	8000718 <__aeabi_fmul+0xbc>
 800067c:	2300      	movs	r3, #0
 800067e:	2080      	movs	r0, #128	; 0x80
 8000680:	469a      	mov	sl, r3
 8000682:	469b      	mov	fp, r3
 8000684:	00e4      	lsls	r4, r4, #3
 8000686:	04c0      	lsls	r0, r0, #19
 8000688:	4304      	orrs	r4, r0
 800068a:	3d7f      	subs	r5, #127	; 0x7f
 800068c:	0278      	lsls	r0, r7, #9
 800068e:	0a43      	lsrs	r3, r0, #9
 8000690:	4699      	mov	r9, r3
 8000692:	007a      	lsls	r2, r7, #1
 8000694:	0ffb      	lsrs	r3, r7, #31
 8000696:	4698      	mov	r8, r3
 8000698:	0e12      	lsrs	r2, r2, #24
 800069a:	464b      	mov	r3, r9
 800069c:	d044      	beq.n	8000728 <__aeabi_fmul+0xcc>
 800069e:	2aff      	cmp	r2, #255	; 0xff
 80006a0:	d011      	beq.n	80006c6 <__aeabi_fmul+0x6a>
 80006a2:	00d8      	lsls	r0, r3, #3
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	04db      	lsls	r3, r3, #19
 80006a8:	4303      	orrs	r3, r0
 80006aa:	4699      	mov	r9, r3
 80006ac:	2000      	movs	r0, #0
 80006ae:	3a7f      	subs	r2, #127	; 0x7f
 80006b0:	18ad      	adds	r5, r5, r2
 80006b2:	4647      	mov	r7, r8
 80006b4:	4653      	mov	r3, sl
 80006b6:	4077      	eors	r7, r6
 80006b8:	1c69      	adds	r1, r5, #1
 80006ba:	2b0f      	cmp	r3, #15
 80006bc:	d83f      	bhi.n	800073e <__aeabi_fmul+0xe2>
 80006be:	4a72      	ldr	r2, [pc, #456]	; (8000888 <__aeabi_fmul+0x22c>)
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	58d3      	ldr	r3, [r2, r3]
 80006c4:	469f      	mov	pc, r3
 80006c6:	35ff      	adds	r5, #255	; 0xff
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d000      	beq.n	80006ce <__aeabi_fmul+0x72>
 80006cc:	e079      	b.n	80007c2 <__aeabi_fmul+0x166>
 80006ce:	4652      	mov	r2, sl
 80006d0:	2302      	movs	r3, #2
 80006d2:	431a      	orrs	r2, r3
 80006d4:	4692      	mov	sl, r2
 80006d6:	2002      	movs	r0, #2
 80006d8:	e7eb      	b.n	80006b2 <__aeabi_fmul+0x56>
 80006da:	4647      	mov	r7, r8
 80006dc:	464c      	mov	r4, r9
 80006de:	4683      	mov	fp, r0
 80006e0:	465b      	mov	r3, fp
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d028      	beq.n	8000738 <__aeabi_fmul+0xdc>
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d100      	bne.n	80006ec <__aeabi_fmul+0x90>
 80006ea:	e0c6      	b.n	800087a <__aeabi_fmul+0x21e>
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d14f      	bne.n	8000790 <__aeabi_fmul+0x134>
 80006f0:	2000      	movs	r0, #0
 80006f2:	2400      	movs	r4, #0
 80006f4:	05c0      	lsls	r0, r0, #23
 80006f6:	07ff      	lsls	r7, r7, #31
 80006f8:	4320      	orrs	r0, r4
 80006fa:	4338      	orrs	r0, r7
 80006fc:	bcf0      	pop	{r4, r5, r6, r7}
 80006fe:	46bb      	mov	fp, r7
 8000700:	46b2      	mov	sl, r6
 8000702:	46a9      	mov	r9, r5
 8000704:	46a0      	mov	r8, r4
 8000706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000708:	2c00      	cmp	r4, #0
 800070a:	d171      	bne.n	80007f0 <__aeabi_fmul+0x194>
 800070c:	2304      	movs	r3, #4
 800070e:	469a      	mov	sl, r3
 8000710:	3b03      	subs	r3, #3
 8000712:	2500      	movs	r5, #0
 8000714:	469b      	mov	fp, r3
 8000716:	e7b9      	b.n	800068c <__aeabi_fmul+0x30>
 8000718:	2c00      	cmp	r4, #0
 800071a:	d163      	bne.n	80007e4 <__aeabi_fmul+0x188>
 800071c:	2308      	movs	r3, #8
 800071e:	469a      	mov	sl, r3
 8000720:	3b06      	subs	r3, #6
 8000722:	25ff      	movs	r5, #255	; 0xff
 8000724:	469b      	mov	fp, r3
 8000726:	e7b1      	b.n	800068c <__aeabi_fmul+0x30>
 8000728:	2b00      	cmp	r3, #0
 800072a:	d150      	bne.n	80007ce <__aeabi_fmul+0x172>
 800072c:	4652      	mov	r2, sl
 800072e:	3301      	adds	r3, #1
 8000730:	431a      	orrs	r2, r3
 8000732:	4692      	mov	sl, r2
 8000734:	2001      	movs	r0, #1
 8000736:	e7bc      	b.n	80006b2 <__aeabi_fmul+0x56>
 8000738:	20ff      	movs	r0, #255	; 0xff
 800073a:	2400      	movs	r4, #0
 800073c:	e7da      	b.n	80006f4 <__aeabi_fmul+0x98>
 800073e:	4648      	mov	r0, r9
 8000740:	0c26      	lsrs	r6, r4, #16
 8000742:	0424      	lsls	r4, r4, #16
 8000744:	0c22      	lsrs	r2, r4, #16
 8000746:	0404      	lsls	r4, r0, #16
 8000748:	0c24      	lsrs	r4, r4, #16
 800074a:	464b      	mov	r3, r9
 800074c:	0020      	movs	r0, r4
 800074e:	0c1b      	lsrs	r3, r3, #16
 8000750:	4350      	muls	r0, r2
 8000752:	4374      	muls	r4, r6
 8000754:	435a      	muls	r2, r3
 8000756:	435e      	muls	r6, r3
 8000758:	1912      	adds	r2, r2, r4
 800075a:	0c03      	lsrs	r3, r0, #16
 800075c:	189b      	adds	r3, r3, r2
 800075e:	429c      	cmp	r4, r3
 8000760:	d903      	bls.n	800076a <__aeabi_fmul+0x10e>
 8000762:	2280      	movs	r2, #128	; 0x80
 8000764:	0252      	lsls	r2, r2, #9
 8000766:	4694      	mov	ip, r2
 8000768:	4466      	add	r6, ip
 800076a:	0400      	lsls	r0, r0, #16
 800076c:	041a      	lsls	r2, r3, #16
 800076e:	0c00      	lsrs	r0, r0, #16
 8000770:	1812      	adds	r2, r2, r0
 8000772:	0194      	lsls	r4, r2, #6
 8000774:	1e60      	subs	r0, r4, #1
 8000776:	4184      	sbcs	r4, r0
 8000778:	0c1b      	lsrs	r3, r3, #16
 800077a:	0e92      	lsrs	r2, r2, #26
 800077c:	199b      	adds	r3, r3, r6
 800077e:	4314      	orrs	r4, r2
 8000780:	019b      	lsls	r3, r3, #6
 8000782:	431c      	orrs	r4, r3
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	d572      	bpl.n	800086e <__aeabi_fmul+0x212>
 8000788:	2001      	movs	r0, #1
 800078a:	0863      	lsrs	r3, r4, #1
 800078c:	4004      	ands	r4, r0
 800078e:	431c      	orrs	r4, r3
 8000790:	0008      	movs	r0, r1
 8000792:	307f      	adds	r0, #127	; 0x7f
 8000794:	2800      	cmp	r0, #0
 8000796:	dd3c      	ble.n	8000812 <__aeabi_fmul+0x1b6>
 8000798:	0763      	lsls	r3, r4, #29
 800079a:	d004      	beq.n	80007a6 <__aeabi_fmul+0x14a>
 800079c:	230f      	movs	r3, #15
 800079e:	4023      	ands	r3, r4
 80007a0:	2b04      	cmp	r3, #4
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fmul+0x14a>
 80007a4:	3404      	adds	r4, #4
 80007a6:	0123      	lsls	r3, r4, #4
 80007a8:	d503      	bpl.n	80007b2 <__aeabi_fmul+0x156>
 80007aa:	3180      	adds	r1, #128	; 0x80
 80007ac:	0008      	movs	r0, r1
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <__aeabi_fmul+0x230>)
 80007b0:	401c      	ands	r4, r3
 80007b2:	28fe      	cmp	r0, #254	; 0xfe
 80007b4:	dcc0      	bgt.n	8000738 <__aeabi_fmul+0xdc>
 80007b6:	01a4      	lsls	r4, r4, #6
 80007b8:	0a64      	lsrs	r4, r4, #9
 80007ba:	b2c0      	uxtb	r0, r0
 80007bc:	e79a      	b.n	80006f4 <__aeabi_fmul+0x98>
 80007be:	0037      	movs	r7, r6
 80007c0:	e78e      	b.n	80006e0 <__aeabi_fmul+0x84>
 80007c2:	4652      	mov	r2, sl
 80007c4:	2303      	movs	r3, #3
 80007c6:	431a      	orrs	r2, r3
 80007c8:	4692      	mov	sl, r2
 80007ca:	2003      	movs	r0, #3
 80007cc:	e771      	b.n	80006b2 <__aeabi_fmul+0x56>
 80007ce:	4648      	mov	r0, r9
 80007d0:	f000 f89a 	bl	8000908 <__clzsi2>
 80007d4:	464a      	mov	r2, r9
 80007d6:	1f43      	subs	r3, r0, #5
 80007d8:	409a      	lsls	r2, r3
 80007da:	1a2d      	subs	r5, r5, r0
 80007dc:	4691      	mov	r9, r2
 80007de:	2000      	movs	r0, #0
 80007e0:	3d76      	subs	r5, #118	; 0x76
 80007e2:	e766      	b.n	80006b2 <__aeabi_fmul+0x56>
 80007e4:	230c      	movs	r3, #12
 80007e6:	469a      	mov	sl, r3
 80007e8:	3b09      	subs	r3, #9
 80007ea:	25ff      	movs	r5, #255	; 0xff
 80007ec:	469b      	mov	fp, r3
 80007ee:	e74d      	b.n	800068c <__aeabi_fmul+0x30>
 80007f0:	0020      	movs	r0, r4
 80007f2:	f000 f889 	bl	8000908 <__clzsi2>
 80007f6:	2576      	movs	r5, #118	; 0x76
 80007f8:	1f43      	subs	r3, r0, #5
 80007fa:	409c      	lsls	r4, r3
 80007fc:	2300      	movs	r3, #0
 80007fe:	426d      	negs	r5, r5
 8000800:	469a      	mov	sl, r3
 8000802:	469b      	mov	fp, r3
 8000804:	1a2d      	subs	r5, r5, r0
 8000806:	e741      	b.n	800068c <__aeabi_fmul+0x30>
 8000808:	2480      	movs	r4, #128	; 0x80
 800080a:	2700      	movs	r7, #0
 800080c:	20ff      	movs	r0, #255	; 0xff
 800080e:	03e4      	lsls	r4, r4, #15
 8000810:	e770      	b.n	80006f4 <__aeabi_fmul+0x98>
 8000812:	2301      	movs	r3, #1
 8000814:	1a1b      	subs	r3, r3, r0
 8000816:	2b1b      	cmp	r3, #27
 8000818:	dd00      	ble.n	800081c <__aeabi_fmul+0x1c0>
 800081a:	e769      	b.n	80006f0 <__aeabi_fmul+0x94>
 800081c:	319e      	adds	r1, #158	; 0x9e
 800081e:	0020      	movs	r0, r4
 8000820:	408c      	lsls	r4, r1
 8000822:	40d8      	lsrs	r0, r3
 8000824:	1e63      	subs	r3, r4, #1
 8000826:	419c      	sbcs	r4, r3
 8000828:	4304      	orrs	r4, r0
 800082a:	0763      	lsls	r3, r4, #29
 800082c:	d004      	beq.n	8000838 <__aeabi_fmul+0x1dc>
 800082e:	230f      	movs	r3, #15
 8000830:	4023      	ands	r3, r4
 8000832:	2b04      	cmp	r3, #4
 8000834:	d000      	beq.n	8000838 <__aeabi_fmul+0x1dc>
 8000836:	3404      	adds	r4, #4
 8000838:	0163      	lsls	r3, r4, #5
 800083a:	d51a      	bpl.n	8000872 <__aeabi_fmul+0x216>
 800083c:	2001      	movs	r0, #1
 800083e:	2400      	movs	r4, #0
 8000840:	e758      	b.n	80006f4 <__aeabi_fmul+0x98>
 8000842:	2080      	movs	r0, #128	; 0x80
 8000844:	03c0      	lsls	r0, r0, #15
 8000846:	4204      	tst	r4, r0
 8000848:	d009      	beq.n	800085e <__aeabi_fmul+0x202>
 800084a:	464b      	mov	r3, r9
 800084c:	4203      	tst	r3, r0
 800084e:	d106      	bne.n	800085e <__aeabi_fmul+0x202>
 8000850:	464c      	mov	r4, r9
 8000852:	4304      	orrs	r4, r0
 8000854:	0264      	lsls	r4, r4, #9
 8000856:	4647      	mov	r7, r8
 8000858:	20ff      	movs	r0, #255	; 0xff
 800085a:	0a64      	lsrs	r4, r4, #9
 800085c:	e74a      	b.n	80006f4 <__aeabi_fmul+0x98>
 800085e:	2080      	movs	r0, #128	; 0x80
 8000860:	03c0      	lsls	r0, r0, #15
 8000862:	4304      	orrs	r4, r0
 8000864:	0264      	lsls	r4, r4, #9
 8000866:	0037      	movs	r7, r6
 8000868:	20ff      	movs	r0, #255	; 0xff
 800086a:	0a64      	lsrs	r4, r4, #9
 800086c:	e742      	b.n	80006f4 <__aeabi_fmul+0x98>
 800086e:	0029      	movs	r1, r5
 8000870:	e78e      	b.n	8000790 <__aeabi_fmul+0x134>
 8000872:	01a4      	lsls	r4, r4, #6
 8000874:	2000      	movs	r0, #0
 8000876:	0a64      	lsrs	r4, r4, #9
 8000878:	e73c      	b.n	80006f4 <__aeabi_fmul+0x98>
 800087a:	2080      	movs	r0, #128	; 0x80
 800087c:	03c0      	lsls	r0, r0, #15
 800087e:	4304      	orrs	r4, r0
 8000880:	0264      	lsls	r4, r4, #9
 8000882:	20ff      	movs	r0, #255	; 0xff
 8000884:	0a64      	lsrs	r4, r4, #9
 8000886:	e735      	b.n	80006f4 <__aeabi_fmul+0x98>
 8000888:	08005b18 	.word	0x08005b18
 800088c:	f7ffffff 	.word	0xf7ffffff

08000890 <__aeabi_ui2f>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	1e05      	subs	r5, r0, #0
 8000894:	d00e      	beq.n	80008b4 <__aeabi_ui2f+0x24>
 8000896:	f000 f837 	bl	8000908 <__clzsi2>
 800089a:	239e      	movs	r3, #158	; 0x9e
 800089c:	0004      	movs	r4, r0
 800089e:	1a1b      	subs	r3, r3, r0
 80008a0:	2b96      	cmp	r3, #150	; 0x96
 80008a2:	dc0c      	bgt.n	80008be <__aeabi_ui2f+0x2e>
 80008a4:	2808      	cmp	r0, #8
 80008a6:	dd01      	ble.n	80008ac <__aeabi_ui2f+0x1c>
 80008a8:	3c08      	subs	r4, #8
 80008aa:	40a5      	lsls	r5, r4
 80008ac:	026d      	lsls	r5, r5, #9
 80008ae:	0a6d      	lsrs	r5, r5, #9
 80008b0:	b2d8      	uxtb	r0, r3
 80008b2:	e001      	b.n	80008b8 <__aeabi_ui2f+0x28>
 80008b4:	2000      	movs	r0, #0
 80008b6:	2500      	movs	r5, #0
 80008b8:	05c0      	lsls	r0, r0, #23
 80008ba:	4328      	orrs	r0, r5
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	2b99      	cmp	r3, #153	; 0x99
 80008c0:	dd09      	ble.n	80008d6 <__aeabi_ui2f+0x46>
 80008c2:	0002      	movs	r2, r0
 80008c4:	0029      	movs	r1, r5
 80008c6:	321b      	adds	r2, #27
 80008c8:	4091      	lsls	r1, r2
 80008ca:	1e4a      	subs	r2, r1, #1
 80008cc:	4191      	sbcs	r1, r2
 80008ce:	2205      	movs	r2, #5
 80008d0:	1a12      	subs	r2, r2, r0
 80008d2:	40d5      	lsrs	r5, r2
 80008d4:	430d      	orrs	r5, r1
 80008d6:	2c05      	cmp	r4, #5
 80008d8:	dd01      	ble.n	80008de <__aeabi_ui2f+0x4e>
 80008da:	1f62      	subs	r2, r4, #5
 80008dc:	4095      	lsls	r5, r2
 80008de:	0029      	movs	r1, r5
 80008e0:	4e08      	ldr	r6, [pc, #32]	; (8000904 <__aeabi_ui2f+0x74>)
 80008e2:	4031      	ands	r1, r6
 80008e4:	076a      	lsls	r2, r5, #29
 80008e6:	d009      	beq.n	80008fc <__aeabi_ui2f+0x6c>
 80008e8:	200f      	movs	r0, #15
 80008ea:	4028      	ands	r0, r5
 80008ec:	2804      	cmp	r0, #4
 80008ee:	d005      	beq.n	80008fc <__aeabi_ui2f+0x6c>
 80008f0:	3104      	adds	r1, #4
 80008f2:	014a      	lsls	r2, r1, #5
 80008f4:	d502      	bpl.n	80008fc <__aeabi_ui2f+0x6c>
 80008f6:	239f      	movs	r3, #159	; 0x9f
 80008f8:	4031      	ands	r1, r6
 80008fa:	1b1b      	subs	r3, r3, r4
 80008fc:	0189      	lsls	r1, r1, #6
 80008fe:	0a4d      	lsrs	r5, r1, #9
 8000900:	b2d8      	uxtb	r0, r3
 8000902:	e7d9      	b.n	80008b8 <__aeabi_ui2f+0x28>
 8000904:	fbffffff 	.word	0xfbffffff

08000908 <__clzsi2>:
 8000908:	211c      	movs	r1, #28
 800090a:	2301      	movs	r3, #1
 800090c:	041b      	lsls	r3, r3, #16
 800090e:	4298      	cmp	r0, r3
 8000910:	d301      	bcc.n	8000916 <__clzsi2+0xe>
 8000912:	0c00      	lsrs	r0, r0, #16
 8000914:	3910      	subs	r1, #16
 8000916:	0a1b      	lsrs	r3, r3, #8
 8000918:	4298      	cmp	r0, r3
 800091a:	d301      	bcc.n	8000920 <__clzsi2+0x18>
 800091c:	0a00      	lsrs	r0, r0, #8
 800091e:	3908      	subs	r1, #8
 8000920:	091b      	lsrs	r3, r3, #4
 8000922:	4298      	cmp	r0, r3
 8000924:	d301      	bcc.n	800092a <__clzsi2+0x22>
 8000926:	0900      	lsrs	r0, r0, #4
 8000928:	3904      	subs	r1, #4
 800092a:	a202      	add	r2, pc, #8	; (adr r2, 8000934 <__clzsi2+0x2c>)
 800092c:	5c10      	ldrb	r0, [r2, r0]
 800092e:	1840      	adds	r0, r0, r1
 8000930:	4770      	bx	lr
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	02020304 	.word	0x02020304
 8000938:	01010101 	.word	0x01010101
	...

08000944 <__clzdi2>:
 8000944:	b510      	push	{r4, lr}
 8000946:	2900      	cmp	r1, #0
 8000948:	d103      	bne.n	8000952 <__clzdi2+0xe>
 800094a:	f7ff ffdd 	bl	8000908 <__clzsi2>
 800094e:	3020      	adds	r0, #32
 8000950:	e002      	b.n	8000958 <__clzdi2+0x14>
 8000952:	1c08      	adds	r0, r1, #0
 8000954:	f7ff ffd8 	bl	8000908 <__clzsi2>
 8000958:	bd10      	pop	{r4, pc}
 800095a:	46c0      	nop			; (mov r8, r8)

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b5b0      	push	{r4, r5, r7, lr}
 800095e:	b0a6      	sub	sp, #152	; 0x98
 8000960:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000962:	f000 fdbd 	bl	80014e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000966:	f000 f93b 	bl	8000be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096a:	f000 fa4f 	bl	8000e0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800096e:	f000 fa1d 	bl	8000dac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000972:	f000 f9b1 	bl	8000cd8 <MX_I2C1_Init>
  MX_RTC_Init();
 8000976:	f000 f9ef 	bl	8000d58 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //Local Variables
    int mois;
    int basil = 1;
 800097a:	2301      	movs	r3, #1
 800097c:	228c      	movs	r2, #140	; 0x8c
 800097e:	18ba      	adds	r2, r7, r2
 8000980:	6013      	str	r3, [r2, #0]
    int rosemary = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	2288      	movs	r2, #136	; 0x88
 8000986:	18ba      	adds	r2, r7, r2
 8000988:	6013      	str	r3, [r2, #0]
    int thyme = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	2284      	movs	r2, #132	; 0x84
 800098e:	18ba      	adds	r2, r7, r2
 8000990:	6013      	str	r3, [r2, #0]
    int days;
    int days2;
    int timeCon;
    int hours, mins, secs;
    int hourtosmecs, mintosmecs, secstosmecs;
    set_time();
 8000992:	f000 fbed 	bl	8001170 <set_time>
    get_time(&time, &date);
 8000996:	2310      	movs	r3, #16
 8000998:	18fa      	adds	r2, r7, r3
 800099a:	2338      	movs	r3, #56	; 0x38
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fc25 	bl	80011f0 <get_time>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //Get Time from RTC
	         get_time(&time, &date);
 80009a6:	2310      	movs	r3, #16
 80009a8:	18fa      	adds	r2, r7, r3
 80009aa:	2538      	movs	r5, #56	; 0x38
 80009ac:	197b      	adds	r3, r7, r5
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 fc1d 	bl	80011f0 <get_time>
	         sscanf(time, "%d:%d:%d", &hours, &mins, &secs);
 80009b6:	2308      	movs	r3, #8
 80009b8:	18fc      	adds	r4, r7, r3
 80009ba:	230c      	movs	r3, #12
 80009bc:	18fa      	adds	r2, r7, r3
 80009be:	4985      	ldr	r1, [pc, #532]	; (8000bd4 <main+0x278>)
 80009c0:	1978      	adds	r0, r7, r5
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	0023      	movs	r3, r4
 80009c8:	f003 ff70 	bl	80048ac <siscanf>

	         //time conversion
	         hourtosmecs = hours * 3600000000;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	0019      	movs	r1, r3
 80009d0:	000a      	movs	r2, r1
 80009d2:	0152      	lsls	r2, r2, #5
 80009d4:	1a52      	subs	r2, r2, r1
 80009d6:	0193      	lsls	r3, r2, #6
 80009d8:	1a9b      	subs	r3, r3, r2
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	185b      	adds	r3, r3, r1
 80009de:	011a      	lsls	r2, r3, #4
 80009e0:	1ad2      	subs	r2, r2, r3
 80009e2:	0113      	lsls	r3, r2, #4
 80009e4:	1a9b      	subs	r3, r3, r2
 80009e6:	029b      	lsls	r3, r3, #10
 80009e8:	2080      	movs	r0, #128	; 0x80
 80009ea:	183a      	adds	r2, r7, r0
 80009ec:	6013      	str	r3, [r2, #0]
	         mintosmecs = mins * 60000000;
 80009ee:	68b9      	ldr	r1, [r7, #8]
 80009f0:	000a      	movs	r2, r1
 80009f2:	0152      	lsls	r2, r2, #5
 80009f4:	1a52      	subs	r2, r2, r1
 80009f6:	0193      	lsls	r3, r2, #6
 80009f8:	1a9b      	subs	r3, r3, r2
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	185b      	adds	r3, r3, r1
 80009fe:	011a      	lsls	r2, r3, #4
 8000a00:	1ad2      	subs	r2, r2, r3
 8000a02:	0213      	lsls	r3, r2, #8
 8000a04:	001a      	movs	r2, r3
 8000a06:	67fa      	str	r2, [r7, #124]	; 0x7c
	         secstosmecs = secs * 1000000;
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	000a      	movs	r2, r1
 8000a0c:	0152      	lsls	r2, r2, #5
 8000a0e:	1a52      	subs	r2, r2, r1
 8000a10:	0193      	lsls	r3, r2, #6
 8000a12:	1a9b      	subs	r3, r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	185b      	adds	r3, r3, r1
 8000a18:	019b      	lsls	r3, r3, #6
 8000a1a:	67bb      	str	r3, [r7, #120]	; 0x78
	         timeCon = hourtosmecs + mintosmecs + secstosmecs;
 8000a1c:	183b      	adds	r3, r7, r0
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a22:	18d3      	adds	r3, r2, r3
 8000a24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000a26:	18d3      	adds	r3, r2, r3
 8000a28:	677b      	str	r3, [r7, #116]	; 0x74
	         //Day counter for thyme
	         if (timeCon == 86400000000 && days <= 10){
	             	days = days + 1;
	             }
	             else {
	             	days = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	673b      	str	r3, [r7, #112]	; 0x70
	         //Day counter for rosemary
	             if (timeCon == 86400000000 && days2 <= 14){
	                 	days2 = days2 + 1;
	                 }
	                 else {
	                 	days2 = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	66fb      	str	r3, [r7, #108]	; 0x6c
	                 }

	         //Sensor Function Calls
	         light = lightSensor();	//Light Sensor Function Call
 8000a32:	f000 fa57 	bl	8000ee4 <lightSensor>
 8000a36:	1c03      	adds	r3, r0, #0
 8000a38:	66bb      	str	r3, [r7, #104]	; 0x68
	         mois = moistureSensor(); //Moisture Sensor Function Call
 8000a3a:	f000 fad5 	bl	8000fe8 <moistureSensor>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	667b      	str	r3, [r7, #100]	; 0x64

	         //Sensor Decisions
	         //Sensor Decision Basil
	         if (basil == 1 && thyme == 0 && rosemary == 0){
 8000a42:	238c      	movs	r3, #140	; 0x8c
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d137      	bne.n	8000abc <main+0x160>
 8000a4c:	2384      	movs	r3, #132	; 0x84
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d132      	bne.n	8000abc <main+0x160>
 8000a56:	2388      	movs	r3, #136	; 0x88
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d12d      	bne.n	8000abc <main+0x160>
	           	if (light <3000 && timeCon < 28800000000){
 8000a60:	495d      	ldr	r1, [pc, #372]	; (8000bd8 <main+0x27c>)
 8000a62:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000a64:	f7ff fc00 	bl	8000268 <__aeabi_fcmplt>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d005      	beq.n	8000a78 <main+0x11c>
	            		dec = 1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	663b      	str	r3, [r7, #96]	; 0x60
	            		LightOutput(dec); //Light Output Function Call- ON
 8000a70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 fb12 	bl	800109c <LightOutput>
	            	}
	            	if (light >=3000 && timeCon < 28800000000){
 8000a78:	4957      	ldr	r1, [pc, #348]	; (8000bd8 <main+0x27c>)
 8000a7a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000a7c:	f7ff fc12 	bl	80002a4 <__aeabi_fcmpge>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d005      	beq.n	8000a90 <main+0x134>
	            	    dec = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	663b      	str	r3, [r7, #96]	; 0x60
	            	    LightOutput(dec); //Light Output Function Call- OFF
 8000a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fb06 	bl	800109c <LightOutput>
	            	}
	            	if (mois <350){
 8000a90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a92:	23af      	movs	r3, #175	; 0xaf
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	429a      	cmp	r2, r3
 8000a98:	da05      	bge.n	8000aa6 <main+0x14a>
	            	    dec = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	663b      	str	r3, [r7, #96]	; 0x60
	            	    WaterOutput(dec); //Water Output Function Call- ON
 8000a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 fb19 	bl	80010d8 <WaterOutput>
	            	}
	            	if (mois >=350){
 8000aa6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000aa8:	23af      	movs	r3, #175	; 0xaf
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	429a      	cmp	r2, r3
 8000aae:	db05      	blt.n	8000abc <main+0x160>
	            	    dec = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	663b      	str	r3, [r7, #96]	; 0x60
	            	    WaterOutput(dec); //Water Output Function Call- OFF
 8000ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 fb0e 	bl	80010d8 <WaterOutput>
	            	}
	         }

	         //Sensor Decision Thyme
	         if (basil == 0 && thyme == 1 && rosemary == 0){
 8000abc:	238c      	movs	r3, #140	; 0x8c
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d13d      	bne.n	8000b42 <main+0x1e6>
 8000ac6:	2384      	movs	r3, #132	; 0x84
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d138      	bne.n	8000b42 <main+0x1e6>
 8000ad0:	2388      	movs	r3, #136	; 0x88
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d133      	bne.n	8000b42 <main+0x1e6>
	            	if (light <9000 && timeCon < 28800000000){
 8000ada:	4940      	ldr	r1, [pc, #256]	; (8000bdc <main+0x280>)
 8000adc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000ade:	f7ff fbc3 	bl	8000268 <__aeabi_fcmplt>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d005      	beq.n	8000af2 <main+0x196>
	            	    dec = 1;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	663b      	str	r3, [r7, #96]	; 0x60
	            	    LightOutput(dec); //Light Output Function Call- ON
 8000aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 fad5 	bl	800109c <LightOutput>
	            	}
	            	if (light >=9000 && timeCon < 28800000000){
 8000af2:	493a      	ldr	r1, [pc, #232]	; (8000bdc <main+0x280>)
 8000af4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000af6:	f7ff fbd5 	bl	80002a4 <__aeabi_fcmpge>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d005      	beq.n	8000b0a <main+0x1ae>
	            	    dec = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	663b      	str	r3, [r7, #96]	; 0x60
	            	    LightOutput(dec); //Light Output Function Call- OFF
 8000b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 fac9 	bl	800109c <LightOutput>
	            	}

	            	if (mois <350 && days >= 10){
 8000b0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b0c:	23af      	movs	r3, #175	; 0xaf
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	429a      	cmp	r2, r3
 8000b12:	da08      	bge.n	8000b26 <main+0x1ca>
 8000b14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b16:	2b09      	cmp	r3, #9
 8000b18:	dd05      	ble.n	8000b26 <main+0x1ca>
	                 dec = 1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	663b      	str	r3, [r7, #96]	; 0x60
	                 WaterOutput(dec); //Water Output Function Call- ON
 8000b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 fad9 	bl	80010d8 <WaterOutput>
	             }
	             if (mois >=350 && days <= 10){
 8000b26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b28:	23af      	movs	r3, #175	; 0xaf
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	db08      	blt.n	8000b42 <main+0x1e6>
 8000b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b32:	2b0a      	cmp	r3, #10
 8000b34:	dc05      	bgt.n	8000b42 <main+0x1e6>
	                 dec = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	663b      	str	r3, [r7, #96]	; 0x60
	                 WaterOutput(dec); //Water Output Function Call- OFF
 8000b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f000 facb 	bl	80010d8 <WaterOutput>
	             }
	         }

	         //Sensor Decision Rosemary
	         if (basil == 0 && thyme == 0 && rosemary == 1){
 8000b42:	238c      	movs	r3, #140	; 0x8c
 8000b44:	18fb      	adds	r3, r7, r3
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d000      	beq.n	8000b4e <main+0x1f2>
 8000b4c:	e72b      	b.n	80009a6 <main+0x4a>
 8000b4e:	2384      	movs	r3, #132	; 0x84
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d000      	beq.n	8000b5a <main+0x1fe>
 8000b58:	e725      	b.n	80009a6 <main+0x4a>
 8000b5a:	2388      	movs	r3, #136	; 0x88
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d000      	beq.n	8000b66 <main+0x20a>
 8000b64:	e71f      	b.n	80009a6 <main+0x4a>
	             if (light <9000 && timeCon < 28800000000){
 8000b66:	491d      	ldr	r1, [pc, #116]	; (8000bdc <main+0x280>)
 8000b68:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000b6a:	f7ff fb7d 	bl	8000268 <__aeabi_fcmplt>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d005      	beq.n	8000b7e <main+0x222>
	             	dec = 1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	663b      	str	r3, [r7, #96]	; 0x60
	                 LightOutput(dec); //Light Output Function Call- ON
 8000b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 fa8f 	bl	800109c <LightOutput>
	             }
	             if (light >=9000 && timeCon < 28800000000){
 8000b7e:	4917      	ldr	r1, [pc, #92]	; (8000bdc <main+0x280>)
 8000b80:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000b82:	f7ff fb8f 	bl	80002a4 <__aeabi_fcmpge>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d005      	beq.n	8000b96 <main+0x23a>
	                	dec = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	663b      	str	r3, [r7, #96]	; 0x60
	                 LightOutput(dec); //Light Output Function Call- OFF
 8000b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 fa83 	bl	800109c <LightOutput>
	             }

	             if (mois <350 && days2 <= 183){
 8000b96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b98:	23af      	movs	r3, #175	; 0xaf
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	da08      	bge.n	8000bb2 <main+0x256>
 8000ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ba2:	2bb7      	cmp	r3, #183	; 0xb7
 8000ba4:	dc05      	bgt.n	8000bb2 <main+0x256>
	                	dec = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	663b      	str	r3, [r7, #96]	; 0x60
	                 WaterOutput(dec); //Water Output Function Call- ON
 8000baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fa93 	bl	80010d8 <WaterOutput>
	             }
	             if (mois >=350 && days2 >= 14){
 8000bb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000bb4:	23af      	movs	r3, #175	; 0xaf
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	da00      	bge.n	8000bbe <main+0x262>
 8000bbc:	e6f3      	b.n	80009a6 <main+0x4a>
 8000bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bc0:	2b0d      	cmp	r3, #13
 8000bc2:	dc00      	bgt.n	8000bc6 <main+0x26a>
 8000bc4:	e6ef      	b.n	80009a6 <main+0x4a>
	                	dec = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	663b      	str	r3, [r7, #96]	; 0x60
	                	WaterOutput(dec); //Water Output Function Call- OFF
 8000bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 fa83 	bl	80010d8 <WaterOutput>
  {
 8000bd2:	e6e8      	b.n	80009a6 <main+0x4a>
 8000bd4:	08005ac8 	.word	0x08005ac8
 8000bd8:	453b8000 	.word	0x453b8000
 8000bdc:	460ca000 	.word	0x460ca000

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b099      	sub	sp, #100	; 0x64
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	242c      	movs	r4, #44	; 0x2c
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	0018      	movs	r0, r3
 8000bec:	2334      	movs	r3, #52	; 0x34
 8000bee:	001a      	movs	r2, r3
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	f003 fe33 	bl	800485c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf6:	2318      	movs	r3, #24
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	2314      	movs	r3, #20
 8000bfe:	001a      	movs	r2, r3
 8000c00:	2100      	movs	r1, #0
 8000c02:	f003 fe2b 	bl	800485c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c06:	003b      	movs	r3, r7
 8000c08:	0018      	movs	r0, r3
 8000c0a:	2318      	movs	r3, #24
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f003 fe24 	bl	800485c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c14:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <SystemClock_Config+0xf0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <SystemClock_Config+0xf4>)
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <SystemClock_Config+0xf0>)
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	0109      	lsls	r1, r1, #4
 8000c22:	430a      	orrs	r2, r1
 8000c24:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c26:	0021      	movs	r1, r4
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2201      	movs	r2, #1
 8000c32:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2210      	movs	r2, #16
 8000c38:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2202      	movs	r2, #2
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2280      	movs	r2, #128	; 0x80
 8000c50:	02d2      	lsls	r2, r2, #11
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	03d2      	lsls	r2, r2, #15
 8000c5a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f001 ff76 	bl	8002b50 <HAL_RCC_OscConfig>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c68:	f000 fb00 	bl	800126c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	2118      	movs	r1, #24
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	220f      	movs	r2, #15
 8000c72:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2203      	movs	r2, #3
 8000c78:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2101      	movs	r1, #1
 8000c90:	0018      	movs	r0, r3
 8000c92:	f002 fad9 	bl	8003248 <HAL_RCC_ClockConfig>
 8000c96:	1e03      	subs	r3, r0, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000c9a:	f000 fae7 	bl	800126c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000c9e:	003b      	movs	r3, r7
 8000ca0:	222a      	movs	r2, #42	; 0x2a
 8000ca2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ca4:	003b      	movs	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000caa:	003b      	movs	r3, r7
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cb0:	003b      	movs	r3, r7
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	0292      	lsls	r2, r2, #10
 8000cb6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	003b      	movs	r3, r7
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f002 fce8 	bl	8003690 <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	1e03      	subs	r3, r0, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000cc4:	f000 fad2 	bl	800126c <Error_Handler>
  }
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b019      	add	sp, #100	; 0x64
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	40007000 	.word	0x40007000
 8000cd4:	ffffe7ff 	.word	0xffffe7ff

08000cd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cde:	4a1c      	ldr	r2, [pc, #112]	; (8000d50 <MX_I2C1_Init+0x78>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <MX_I2C1_Init+0x7c>)
 8000ce6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 fed1 	bl	8001abc <HAL_I2C_Init>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d1e:	f000 faa5 	bl	800126c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d24:	2100      	movs	r1, #0
 8000d26:	0018      	movs	r0, r3
 8000d28:	f001 fe7a 	bl	8002a20 <HAL_I2CEx_ConfigAnalogFilter>
 8000d2c:	1e03      	subs	r3, r0, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d30:	f000 fa9c 	bl	800126c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <MX_I2C1_Init+0x74>)
 8000d36:	2100      	movs	r1, #0
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 febd 	bl	8002ab8 <HAL_I2CEx_ConfigDigitalFilter>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d001      	beq.n	8000d46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d42:	f000 fa93 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000098 	.word	0x20000098
 8000d50:	40005400 	.word	0x40005400
 8000d54:	00707cbb 	.word	0x00707cbb

08000d58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_RTC_Init+0x4c>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <MX_RTC_Init+0x50>)
 8000d60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <MX_RTC_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_RTC_Init+0x4c>)
 8000d6a:	227f      	movs	r2, #127	; 0x7f
 8000d6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <MX_RTC_Init+0x4c>)
 8000d70:	22ff      	movs	r2, #255	; 0xff
 8000d72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MX_RTC_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <MX_RTC_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_RTC_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <MX_RTC_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <MX_RTC_Init+0x4c>)
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f002 fda4 	bl	80038dc <HAL_RTC_Init>
 8000d94:	1e03      	subs	r3, r0, #0
 8000d96:	d001      	beq.n	8000d9c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000d98:	f000 fa68 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	200000e4 	.word	0x200000e4
 8000da8:	40002800 	.word	0x40002800

08000dac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000db2:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <MX_USART2_UART_Init+0x5c>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000db8:	22e1      	movs	r2, #225	; 0xe1
 8000dba:	0252      	lsls	r2, r2, #9
 8000dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000df0:	0018      	movs	r0, r3
 8000df2:	f003 f8d9 	bl	8003fa8 <HAL_UART_Init>
 8000df6:	1e03      	subs	r3, r0, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dfa:	f000 fa37 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000108 	.word	0x20000108
 8000e08:	40004400 	.word	0x40004400

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	240c      	movs	r4, #12
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	0018      	movs	r0, r3
 8000e18:	2314      	movs	r3, #20
 8000e1a:	001a      	movs	r2, r3
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	f003 fd1d 	bl	800485c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <MX_GPIO_Init+0xd0>)
 8000e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e26:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <MX_GPIO_Init+0xd0>)
 8000e28:	2104      	movs	r1, #4
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e2e:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <MX_GPIO_Init+0xd0>)
 8000e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e32:	2204      	movs	r2, #4
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b28      	ldr	r3, [pc, #160]	; (8000edc <MX_GPIO_Init+0xd0>)
 8000e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e3e:	4b27      	ldr	r3, [pc, #156]	; (8000edc <MX_GPIO_Init+0xd0>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	430a      	orrs	r2, r1
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <MX_GPIO_Init+0xd0>)
 8000e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <MX_GPIO_Init+0xd0>)
 8000e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <MX_GPIO_Init+0xd0>)
 8000e58:	2102      	movs	r1, #2
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_GPIO_Init+0xd0>)
 8000e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e62:	2202      	movs	r2, #2
 8000e64:	4013      	ands	r3, r2
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	0159      	lsls	r1, r3, #5
 8000e6e:	23a0      	movs	r3, #160	; 0xa0
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	2200      	movs	r2, #0
 8000e74:	0018      	movs	r0, r3
 8000e76:	f000 fde9 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_GPIO_Init+0xd4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2108      	movs	r1, #8
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 fde3 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	0152      	lsls	r2, r2, #5
 8000e8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2201      	movs	r2, #1
 8000e92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	193a      	adds	r2, r7, r4
 8000ea2:	23a0      	movs	r3, #160	; 0xa0
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f000 fc61 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000eae:	0021      	movs	r1, r4
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2208      	movs	r2, #8
 8000eb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <MX_GPIO_Init+0xd4>)
 8000ecc:	0019      	movs	r1, r3
 8000ece:	0010      	movs	r0, r2
 8000ed0:	f000 fc4e 	bl	8001770 <HAL_GPIO_Init>

}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b009      	add	sp, #36	; 0x24
 8000eda:	bd90      	pop	{r4, r7, pc}
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	50000400 	.word	0x50000400

08000ee4 <lightSensor>:

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */
float lightSensor(void){
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b08c      	sub	sp, #48	; 0x30
 8000ee8:	af04      	add	r7, sp, #16
	 *Date Updated: 3/30/21
	 *Inputs: None
	 *Outputs: float ambient light value in lux*/

	 //local variables
	 const uint8_t sensorAddress = 0x10;
 8000eea:	241f      	movs	r4, #31
 8000eec:	193b      	adds	r3, r7, r4
 8000eee:	2210      	movs	r2, #16
 8000ef0:	701a      	strb	r2, [r3, #0]
	 const uint16_t CONFIG_VALUE = 0x0000;
 8000ef2:	250a      	movs	r5, #10
 8000ef4:	197b      	adds	r3, r7, r5
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	801a      	strh	r2, [r3, #0]
	 float out;
	 float gain = 1.8432; //Gain for 1/8 gain & 25ms IT (lower resolution but more range)
 8000efa:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <lightSensor+0xfc>)
 8000efc:	61bb      	str	r3, [r7, #24]
	 float WC;
	 uint8_t lightResolutionData[2];
	 uint8_t WhiteChannelData[2];

	 //Process
	 HAL_I2C_Mem_Write(&hi2c1, (sensorAddress<<1), 0x00, 1, &CONFIG_VALUE, 2, 50);
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	18db      	adds	r3, r3, r3
 8000f06:	b299      	uxth	r1, r3
 8000f08:	4836      	ldr	r0, [pc, #216]	; (8000fe4 <lightSensor+0x100>)
 8000f0a:	2332      	movs	r3, #50	; 0x32
 8000f0c:	9302      	str	r3, [sp, #8]
 8000f0e:	2302      	movs	r3, #2
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	197b      	adds	r3, r7, r5
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f001 f875 	bl	8002008 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&hi2c1, (sensorAddress<<1), 0x03, 1, &CONFIG_VALUE, 2, 50);
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	18db      	adds	r3, r3, r3
 8000f26:	b299      	uxth	r1, r3
 8000f28:	482e      	ldr	r0, [pc, #184]	; (8000fe4 <lightSensor+0x100>)
 8000f2a:	2332      	movs	r3, #50	; 0x32
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2302      	movs	r3, #2
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	197b      	adds	r3, r7, r5
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2301      	movs	r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	f001 f865 	bl	8002008 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Read(&hi2c1, (sensorAddress << 1) | 0x01, 0x04, 1, &lightResolutionData, 2, 50);
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	2201      	movs	r2, #1
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	b299      	uxth	r1, r3
 8000f4e:	4825      	ldr	r0, [pc, #148]	; (8000fe4 <lightSensor+0x100>)
 8000f50:	2332      	movs	r3, #50	; 0x32
 8000f52:	9302      	str	r3, [sp, #8]
 8000f54:	2302      	movs	r3, #2
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	2508      	movs	r5, #8
 8000f5a:	197b      	adds	r3, r7, r5
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	2204      	movs	r2, #4
 8000f62:	f001 f97f 	bl	8002264 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(&hi2c1, (sensorAddress << 1) | 0x01, 0x05, 1, &WhiteChannelData, 2, 50);
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4313      	orrs	r3, r2
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	b299      	uxth	r1, r3
 8000f76:	481b      	ldr	r0, [pc, #108]	; (8000fe4 <lightSensor+0x100>)
 8000f78:	2332      	movs	r3, #50	; 0x32
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	2205      	movs	r2, #5
 8000f88:	f001 f96c 	bl	8002264 <HAL_I2C_Mem_Read>
	 Resolution = (lightResolutionData[1]<<8) | lightResolutionData[0];
 8000f8c:	197b      	adds	r3, r7, r5
 8000f8e:	785b      	ldrb	r3, [r3, #1]
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	b21a      	sxth	r2, r3
 8000f94:	197b      	adds	r3, r7, r5
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	2316      	movs	r3, #22
 8000fa0:	18fb      	adds	r3, r7, r3
 8000fa2:	801a      	strh	r2, [r3, #0]
	 WhiteChannel = (WhiteChannelData[1]<<8) | WhiteChannelData[0];
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	2114      	movs	r1, #20
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	801a      	strh	r2, [r3, #0]

	 //Conversion
	 WC = WhiteChannel; //Int to float conversion
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff fc65 	bl	8000890 <__aeabi_ui2f>
 8000fc6:	1c03      	adds	r3, r0, #0
 8000fc8:	613b      	str	r3, [r7, #16]

	 out = gain * WC; //Ambient light calculation
 8000fca:	6939      	ldr	r1, [r7, #16]
 8000fcc:	69b8      	ldr	r0, [r7, #24]
 8000fce:	f7ff fb45 	bl	800065c <__aeabi_fmul>
 8000fd2:	1c03      	adds	r3, r0, #0
 8000fd4:	60fb      	str	r3, [r7, #12]

	 return out;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	1c18      	adds	r0, r3, #0
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b008      	add	sp, #32
 8000fde:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe0:	3febedfa 	.word	0x3febedfa
 8000fe4:	20000098 	.word	0x20000098

08000fe8 <moistureSensor>:

int moistureSensor(void){
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
	 *Outputs: float moisture value and int cap*/

	 //local variables
	 HAL_StatusTypeDef ret;
	 uint8_t buf[12];
	 uint16_t capac = 0;
 8000fee:	230e      	movs	r3, #14
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	801a      	strh	r2, [r3, #0]

	 //Process
	 buf[0] = 0x00;
 8000ff6:	003b      	movs	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
	 buf[1] = 0x04;
 8000ffc:	003b      	movs	r3, r7
 8000ffe:	2204      	movs	r2, #4
 8001000:	705a      	strb	r2, [r3, #1]
	 ret = HAL_I2C_Master_Transmit(&hi2c1,0x36<<1, buf, 2, HAL_MAX_DELAY);
 8001002:	250d      	movs	r5, #13
 8001004:	197c      	adds	r4, r7, r5
 8001006:	003a      	movs	r2, r7
 8001008:	4821      	ldr	r0, [pc, #132]	; (8001090 <moistureSensor+0xa8>)
 800100a:	2301      	movs	r3, #1
 800100c:	425b      	negs	r3, r3
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2302      	movs	r3, #2
 8001012:	216c      	movs	r1, #108	; 0x6c
 8001014:	f000 fde8 	bl	8001be8 <HAL_I2C_Master_Transmit>
 8001018:	0003      	movs	r3, r0
 800101a:	7023      	strb	r3, [r4, #0]
	 if ( ret != HAL_OK ) {
 800101c:	197b      	adds	r3, r7, r5
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d008      	beq.n	8001036 <moistureSensor+0x4e>
		 strcpy((char*)buf, "Error Tx\r\n");
 8001024:	003b      	movs	r3, r7
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <moistureSensor+0xac>)
 8001028:	ca03      	ldmia	r2!, {r0, r1}
 800102a:	c303      	stmia	r3!, {r0, r1}
 800102c:	8811      	ldrh	r1, [r2, #0]
 800102e:	8019      	strh	r1, [r3, #0]
 8001030:	7892      	ldrb	r2, [r2, #2]
 8001032:	709a      	strb	r2, [r3, #2]
 8001034:	e025      	b.n	8001082 <moistureSensor+0x9a>
	 	 } else {
	 		 ret = HAL_I2C_Master_Receive(&hi2c1, 0x36<<1, buf, 4, HAL_MAX_DELAY); //previously 2
 8001036:	250d      	movs	r5, #13
 8001038:	197c      	adds	r4, r7, r5
 800103a:	003a      	movs	r2, r7
 800103c:	4814      	ldr	r0, [pc, #80]	; (8001090 <moistureSensor+0xa8>)
 800103e:	2301      	movs	r3, #1
 8001040:	425b      	negs	r3, r3
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2304      	movs	r3, #4
 8001046:	216c      	movs	r1, #108	; 0x6c
 8001048:	f000 fed6 	bl	8001df8 <HAL_I2C_Master_Receive>
 800104c:	0003      	movs	r3, r0
 800104e:	7023      	strb	r3, [r4, #0]

	 		 if ( ret != HAL_OK ) {
 8001050:	197b      	adds	r3, r7, r5
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d008      	beq.n	800106a <moistureSensor+0x82>
	 			 strcpy((char*)buf, "Error Rx\r\n");
 8001058:	003b      	movs	r3, r7
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <moistureSensor+0xb0>)
 800105c:	ca03      	ldmia	r2!, {r0, r1}
 800105e:	c303      	stmia	r3!, {r0, r1}
 8001060:	8811      	ldrh	r1, [r2, #0]
 8001062:	8019      	strh	r1, [r3, #0]
 8001064:	7892      	ldrb	r2, [r2, #2]
 8001066:	709a      	strb	r2, [r3, #2]
 8001068:	e00b      	b.n	8001082 <moistureSensor+0x9a>
	 		 	 } else {

	 		 		 //Combine the bytes
	 		 		 capac = ((uint16_t)buf[0] <<8) | buf[1];
 800106a:	003b      	movs	r3, r7
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	003b      	movs	r3, r7
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	230e      	movs	r3, #14
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	801a      	strh	r2, [r3, #0]

	 		 	 }
	 	 }


	 return capac;
 8001082:	230e      	movs	r3, #14
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	881b      	ldrh	r3, [r3, #0]
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b004      	add	sp, #16
 800108e:	bdb0      	pop	{r4, r5, r7, pc}
 8001090:	20000098 	.word	0x20000098
 8001094:	08005ad4 	.word	0x08005ad4
 8001098:	08005ae0 	.word	0x08005ae0

0800109c <LightOutput>:

void LightOutput(int decision){
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	 //local variables


	 //Toggle Light On/Off

		if (decision == 1){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d107      	bne.n	80010ba <LightOutput+0x1e>
			HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_12); //Pin assigned to GPIO Output by IDE
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	015a      	lsls	r2, r3, #5
 80010ae:	23a0      	movs	r3, #160	; 0xa0
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 fce6 	bl	8001a86 <HAL_GPIO_TogglePin>
		}
		if (decision == 0){
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d104      	bne.n	80010ca <LightOutput+0x2e>
			HAL_Delay (1800000);   /*Insert delay 30 minutes*/
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <LightOutput+0x38>)
 80010c2:	0018      	movs	r0, r3
 80010c4:	f000 fa7c 	bl	80015c0 <HAL_Delay>
		}

		 return;
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46c0      	nop			; (mov r8, r8)
}
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	001b7740 	.word	0x001b7740

080010d8 <WaterOutput>:

void WaterOutput(int decision){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

	 //local variables

	 //Toggle water on/off

		if (decision == 1){
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d120      	bne.n	8001128 <WaterOutput+0x50>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);      //Turning the motor on (all 4 signal pins
 80010e6:	23a0      	movs	r3, #160	; 0xa0
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	2201      	movs	r2, #1
 80010ec:	2108      	movs	r1, #8
 80010ee:	0018      	movs	r0, r3
 80010f0:	f000 fcac 	bl	8001a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET); 	   //are turned on here)
 80010f4:	23a0      	movs	r3, #160	; 0xa0
 80010f6:	05db      	lsls	r3, r3, #23
 80010f8:	2201      	movs	r2, #1
 80010fa:	2110      	movs	r1, #16
 80010fc:	0018      	movs	r0, r3
 80010fe:	f000 fca5 	bl	8001a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8001102:	23a0      	movs	r3, #160	; 0xa0
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	2201      	movs	r2, #1
 8001108:	2120      	movs	r1, #32
 800110a:	0018      	movs	r0, r3
 800110c:	f000 fc9e 	bl	8001a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8001110:	23a0      	movs	r3, #160	; 0xa0
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	2201      	movs	r2, #1
 8001116:	2140      	movs	r1, #64	; 0x40
 8001118:	0018      	movs	r0, r3
 800111a:	f000 fc97 	bl	8001a4c <HAL_GPIO_WritePin>

			HAL_Delay(2000);
 800111e:	23fa      	movs	r3, #250	; 0xfa
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	0018      	movs	r0, r3
 8001124:	f000 fa4c 	bl	80015c0 <HAL_Delay>
		}
		if (decision == 0){
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d11c      	bne.n	8001168 <WaterOutput+0x90>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);   //Turning all 4 motor pins off
 800112e:	23a0      	movs	r3, #160	; 0xa0
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	2200      	movs	r2, #0
 8001134:	2108      	movs	r1, #8
 8001136:	0018      	movs	r0, r3
 8001138:	f000 fc88 	bl	8001a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);   //The motor will only be hooked up to two of them
 800113c:	23a0      	movs	r3, #160	; 0xa0
 800113e:	05db      	lsls	r3, r3, #23
 8001140:	2200      	movs	r2, #0
 8001142:	2110      	movs	r1, #16
 8001144:	0018      	movs	r0, r3
 8001146:	f000 fc81 	bl	8001a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 800114a:	23a0      	movs	r3, #160	; 0xa0
 800114c:	05db      	lsls	r3, r3, #23
 800114e:	2200      	movs	r2, #0
 8001150:	2120      	movs	r1, #32
 8001152:	0018      	movs	r0, r3
 8001154:	f000 fc7a 	bl	8001a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8001158:	23a0      	movs	r3, #160	; 0xa0
 800115a:	05db      	lsls	r3, r3, #23
 800115c:	2200      	movs	r2, #0
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	0018      	movs	r0, r3
 8001162:	f000 fc73 	bl	8001a4c <HAL_GPIO_WritePin>

		}

	 return;
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46c0      	nop			; (mov r8, r8)
}
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}

08001170 <set_time>:

void set_time (void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;
  sTime.Hours = 0x10; // set hours
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2210      	movs	r2, #16
 800117a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x35; // set minutes
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2235      	movs	r2, #53	; 0x35
 8001180:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x26; // set seconds
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2226      	movs	r2, #38	; 0x26
 8001186:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001194:	1d39      	adds	r1, r7, #4
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <set_time+0x78>)
 8001198:	2201      	movs	r2, #1
 800119a:	0018      	movs	r0, r3
 800119c:	f002 fc3c 	bl	8003a18 <HAL_RTC_SetTime>
 80011a0:	1e03      	subs	r3, r0, #0
 80011a2:	d001      	beq.n	80011a8 <set_time+0x38>
  {
    Error_Handler();
 80011a4:	f000 f862 	bl	800126c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY; //day
 80011a8:	003b      	movs	r3, r7
 80011aa:	2204      	movs	r2, #4
 80011ac:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MARCH; //month
 80011ae:	003b      	movs	r3, r7
 80011b0:	2203      	movs	r2, #3
 80011b2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x01; // date
 80011b4:	003b      	movs	r3, r7
 80011b6:	2201      	movs	r2, #1
 80011b8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x21; // year
 80011ba:	003b      	movs	r3, r7
 80011bc:	2221      	movs	r2, #33	; 0x21
 80011be:	70da      	strb	r2, [r3, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011c0:	0039      	movs	r1, r7
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <set_time+0x78>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	0018      	movs	r0, r3
 80011c8:	f002 fd46 	bl	8003c58 <HAL_RTC_SetDate>
 80011cc:	1e03      	subs	r3, r0, #0
 80011ce:	d001      	beq.n	80011d4 <set_time+0x64>
  {
    Error_Handler();
 80011d0:	f000 f84c 	bl	800126c <Error_Handler>
  }
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80011d4:	4a05      	ldr	r2, [pc, #20]	; (80011ec <set_time+0x7c>)
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <set_time+0x78>)
 80011d8:	2101      	movs	r1, #1
 80011da:	0018      	movs	r0, r3
 80011dc:	f002 fece 	bl	8003f7c <HAL_RTCEx_BKUPWrite>
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b006      	add	sp, #24
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200000e4 	.word	0x200000e4
 80011ec:	000032f2 	.word	0x000032f2

080011f0 <get_time>:

void get_time(char* time, char* date)
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80011fa:	2408      	movs	r4, #8
 80011fc:	1939      	adds	r1, r7, r4
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <get_time+0x70>)
 8001200:	2200      	movs	r2, #0
 8001202:	0018      	movs	r0, r3
 8001204:	f002 fccc 	bl	8003ba0 <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001208:	251c      	movs	r5, #28
 800120a:	1979      	adds	r1, r7, r5
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <get_time+0x70>)
 800120e:	2200      	movs	r2, #0
 8001210:	0018      	movs	r0, r3
 8001212:	f002 fdcf 	bl	8003db4 <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 sprintf(&time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001216:	0021      	movs	r1, r4
 8001218:	187b      	adds	r3, r7, r1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	001a      	movs	r2, r3
 800121e:	187b      	adds	r3, r7, r1
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	001c      	movs	r4, r3
 8001224:	187b      	adds	r3, r7, r1
 8001226:	789b      	ldrb	r3, [r3, #2]
 8001228:	490e      	ldr	r1, [pc, #56]	; (8001264 <get_time+0x74>)
 800122a:	1d38      	adds	r0, r7, #4
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	0023      	movs	r3, r4
 8001230:	f003 fb1c 	bl	800486c <siprintf>
/* Display date Format: dd-mm-yy */
 sprintf(&date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8001234:	197b      	adds	r3, r7, r5
 8001236:	789b      	ldrb	r3, [r3, #2]
 8001238:	001a      	movs	r2, r3
 800123a:	197b      	adds	r3, r7, r5
 800123c:	785b      	ldrb	r3, [r3, #1]
 800123e:	001c      	movs	r4, r3
 8001240:	197b      	adds	r3, r7, r5
 8001242:	78db      	ldrb	r3, [r3, #3]
 8001244:	21fa      	movs	r1, #250	; 0xfa
 8001246:	00c9      	lsls	r1, r1, #3
 8001248:	468c      	mov	ip, r1
 800124a:	4463      	add	r3, ip
 800124c:	4906      	ldr	r1, [pc, #24]	; (8001268 <get_time+0x78>)
 800124e:	0038      	movs	r0, r7
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	0023      	movs	r3, r4
 8001254:	f003 fb0a 	bl	800486c <siprintf>
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b008      	add	sp, #32
 800125e:	bdb0      	pop	{r4, r5, r7, pc}
 8001260:	200000e4 	.word	0x200000e4
 8001264:	08005aec 	.word	0x08005aec
 8001268:	08005afc 	.word	0x08005afc

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	e7fe      	b.n	8001274 <Error_Handler+0x8>
	...

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_MspInit+0x24>)
 800127e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_MspInit+0x24>)
 8001282:	2101      	movs	r1, #1
 8001284:	430a      	orrs	r2, r1
 8001286:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <HAL_MspInit+0x24>)
 800128a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <HAL_MspInit+0x24>)
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	0549      	lsls	r1, r1, #21
 8001292:	430a      	orrs	r2, r1
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	240c      	movs	r4, #12
 80012aa:	193b      	adds	r3, r7, r4
 80012ac:	0018      	movs	r0, r3
 80012ae:	2314      	movs	r3, #20
 80012b0:	001a      	movs	r2, r3
 80012b2:	2100      	movs	r1, #0
 80012b4:	f003 fad2 	bl	800485c <memset>
  if(hi2c->Instance==I2C1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a18      	ldr	r2, [pc, #96]	; (8001320 <HAL_I2C_MspInit+0x80>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d12a      	bne.n	8001318 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_I2C_MspInit+0x84>)
 80012c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_I2C_MspInit+0x84>)
 80012c8:	2101      	movs	r1, #1
 80012ca:	430a      	orrs	r2, r1
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_I2C_MspInit+0x84>)
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	2201      	movs	r2, #1
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012da:	193b      	adds	r3, r7, r4
 80012dc:	22c0      	movs	r2, #192	; 0xc0
 80012de:	00d2      	lsls	r2, r2, #3
 80012e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e2:	0021      	movs	r1, r4
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	2212      	movs	r2, #18
 80012e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2201      	movs	r2, #1
 80012ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	2203      	movs	r2, #3
 80012f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80012f6:	187b      	adds	r3, r7, r1
 80012f8:	2201      	movs	r2, #1
 80012fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	187a      	adds	r2, r7, r1
 80012fe:	23a0      	movs	r3, #160	; 0xa0
 8001300:	05db      	lsls	r3, r3, #23
 8001302:	0011      	movs	r1, r2
 8001304:	0018      	movs	r0, r3
 8001306:	f000 fa33 	bl	8001770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_I2C_MspInit+0x84>)
 800130c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_I2C_MspInit+0x84>)
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	0389      	lsls	r1, r1, #14
 8001314:	430a      	orrs	r2, r1
 8001316:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b009      	add	sp, #36	; 0x24
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	40005400 	.word	0x40005400
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_RTC_MspInit+0x28>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d106      	bne.n	8001348 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_RTC_MspInit+0x2c>)
 800133c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_RTC_MspInit+0x2c>)
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	02c9      	lsls	r1, r1, #11
 8001344:	430a      	orrs	r2, r1
 8001346:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40002800 	.word	0x40002800
 8001354:	40021000 	.word	0x40021000

08001358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	240c      	movs	r4, #12
 8001362:	193b      	adds	r3, r7, r4
 8001364:	0018      	movs	r0, r3
 8001366:	2314      	movs	r3, #20
 8001368:	001a      	movs	r2, r3
 800136a:	2100      	movs	r1, #0
 800136c:	f003 fa76 	bl	800485c <memset>
  if(huart->Instance==USART2)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a18      	ldr	r2, [pc, #96]	; (80013d8 <HAL_UART_MspInit+0x80>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d129      	bne.n	80013ce <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_UART_MspInit+0x84>)
 800137c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_UART_MspInit+0x84>)
 8001380:	2180      	movs	r1, #128	; 0x80
 8001382:	0289      	lsls	r1, r1, #10
 8001384:	430a      	orrs	r2, r1
 8001386:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_UART_MspInit+0x84>)
 800138a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_UART_MspInit+0x84>)
 800138e:	2101      	movs	r1, #1
 8001390:	430a      	orrs	r2, r1
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_UART_MspInit+0x84>)
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	2201      	movs	r2, #1
 800139a:	4013      	ands	r3, r2
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80013a0:	0021      	movs	r1, r4
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <HAL_UART_MspInit+0x88>)
 80013a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	2202      	movs	r2, #2
 80013ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	2203      	movs	r2, #3
 80013b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80013ba:	187b      	adds	r3, r7, r1
 80013bc:	2204      	movs	r2, #4
 80013be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	187a      	adds	r2, r7, r1
 80013c2:	23a0      	movs	r3, #160	; 0xa0
 80013c4:	05db      	lsls	r3, r3, #23
 80013c6:	0011      	movs	r1, r2
 80013c8:	0018      	movs	r0, r3
 80013ca:	f000 f9d1 	bl	8001770 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b009      	add	sp, #36	; 0x24
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	40004400 	.word	0x40004400
 80013dc:	40021000 	.word	0x40021000
 80013e0:	00008004 	.word	0x00008004

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013f4:	46c0      	nop			; (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 f8be 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <_sbrk+0x5c>)
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <_sbrk+0x60>)
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <_sbrk+0x64>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <_sbrk+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	18d3      	adds	r3, r2, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	429a      	cmp	r2, r3
 8001442:	d207      	bcs.n	8001454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001444:	f003 f9e0 	bl	8004808 <__errno>
 8001448:	0003      	movs	r3, r0
 800144a:	220c      	movs	r2, #12
 800144c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144e:	2301      	movs	r3, #1
 8001450:	425b      	negs	r3, r3
 8001452:	e009      	b.n	8001468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	18d2      	adds	r2, r2, r3
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <_sbrk+0x64>)
 8001464:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b006      	add	sp, #24
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20002000 	.word	0x20002000
 8001474:	00000400 	.word	0x00000400
 8001478:	2000008c 	.word	0x2000008c
 800147c:	200001a0 	.word	0x200001a0

08001480 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800148c:	480d      	ldr	r0, [pc, #52]	; (80014c4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800148e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001492:	490e      	ldr	r1, [pc, #56]	; (80014cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001494:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <LoopForever+0xe>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a8:	4c0b      	ldr	r4, [pc, #44]	; (80014d8 <LoopForever+0x16>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014b6:	f7ff ffe3 	bl	8001480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f003 f9ab 	bl	8004814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff fa4d 	bl	800095c <main>

080014c2 <LoopForever>:

LoopForever:
    b LoopForever
 80014c2:	e7fe      	b.n	80014c2 <LoopForever>
   ldr   r0, =_estack
 80014c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014d0:	08005d84 	.word	0x08005d84
  ldr r2, =_sbss
 80014d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014d8:	200001a0 	.word	0x200001a0

080014dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC1_COMP_IRQHandler>
	...

080014e0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_Init+0x3c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_Init+0x3c>)
 80014f2:	2140      	movs	r1, #64	; 0x40
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f8:	2000      	movs	r0, #0
 80014fa:	f000 f811 	bl	8001520 <HAL_InitTick>
 80014fe:	1e03      	subs	r3, r0, #0
 8001500:	d003      	beq.n	800150a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e001      	b.n	800150e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800150a:	f7ff feb5 	bl	8001278 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	781b      	ldrb	r3, [r3, #0]
}
 8001512:	0018      	movs	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	b002      	add	sp, #8
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	40022000 	.word	0x40022000

08001520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_InitTick+0x5c>)
 800152a:	681c      	ldr	r4, [r3, #0]
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_InitTick+0x60>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	0019      	movs	r1, r3
 8001532:	23fa      	movs	r3, #250	; 0xfa
 8001534:	0098      	lsls	r0, r3, #2
 8001536:	f7fe fdf9 	bl	800012c <__udivsi3>
 800153a:	0003      	movs	r3, r0
 800153c:	0019      	movs	r1, r3
 800153e:	0020      	movs	r0, r4
 8001540:	f7fe fdf4 	bl	800012c <__udivsi3>
 8001544:	0003      	movs	r3, r0
 8001546:	0018      	movs	r0, r3
 8001548:	f000 f905 	bl	8001756 <HAL_SYSTICK_Config>
 800154c:	1e03      	subs	r3, r0, #0
 800154e:	d001      	beq.n	8001554 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e00f      	b.n	8001574 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d80b      	bhi.n	8001572 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	2301      	movs	r3, #1
 800155e:	425b      	negs	r3, r3
 8001560:	2200      	movs	r2, #0
 8001562:	0018      	movs	r0, r3
 8001564:	f000 f8e2 	bl	800172c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_InitTick+0x64>)
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e000      	b.n	8001574 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
}
 8001574:	0018      	movs	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	b003      	add	sp, #12
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	20000000 	.word	0x20000000
 8001580:	20000008 	.word	0x20000008
 8001584:	20000004 	.word	0x20000004

08001588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_IncTick+0x1c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	001a      	movs	r2, r3
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_IncTick+0x20>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	18d2      	adds	r2, r2, r3
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_IncTick+0x20>)
 800159a:	601a      	str	r2, [r3, #0]
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	20000008 	.word	0x20000008
 80015a8:	2000018c 	.word	0x2000018c

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b02      	ldr	r3, [pc, #8]	; (80015bc <HAL_GetTick+0x10>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	2000018c 	.word	0x2000018c

080015c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff fff0 	bl	80015ac <HAL_GetTick>
 80015cc:	0003      	movs	r3, r0
 80015ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	d005      	beq.n	80015e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_Delay+0x44>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	001a      	movs	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	189b      	adds	r3, r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	f7ff ffe0 	bl	80015ac <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d8f7      	bhi.n	80015e8 <HAL_Delay+0x28>
  {
  }
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b004      	add	sp, #16
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	20000008 	.word	0x20000008

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	0002      	movs	r2, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b7f      	cmp	r3, #127	; 0x7f
 800161c:	d828      	bhi.n	8001670 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800161e:	4a2f      	ldr	r2, [pc, #188]	; (80016dc <__NVIC_SetPriority+0xd4>)
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b25b      	sxtb	r3, r3
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	33c0      	adds	r3, #192	; 0xc0
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	589b      	ldr	r3, [r3, r2]
 800162e:	1dfa      	adds	r2, r7, #7
 8001630:	7812      	ldrb	r2, [r2, #0]
 8001632:	0011      	movs	r1, r2
 8001634:	2203      	movs	r2, #3
 8001636:	400a      	ands	r2, r1
 8001638:	00d2      	lsls	r2, r2, #3
 800163a:	21ff      	movs	r1, #255	; 0xff
 800163c:	4091      	lsls	r1, r2
 800163e:	000a      	movs	r2, r1
 8001640:	43d2      	mvns	r2, r2
 8001642:	401a      	ands	r2, r3
 8001644:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	019b      	lsls	r3, r3, #6
 800164a:	22ff      	movs	r2, #255	; 0xff
 800164c:	401a      	ands	r2, r3
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	0018      	movs	r0, r3
 8001654:	2303      	movs	r3, #3
 8001656:	4003      	ands	r3, r0
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800165c:	481f      	ldr	r0, [pc, #124]	; (80016dc <__NVIC_SetPriority+0xd4>)
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b25b      	sxtb	r3, r3
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	430a      	orrs	r2, r1
 8001668:	33c0      	adds	r3, #192	; 0xc0
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800166e:	e031      	b.n	80016d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <__NVIC_SetPriority+0xd8>)
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	0019      	movs	r1, r3
 8001678:	230f      	movs	r3, #15
 800167a:	400b      	ands	r3, r1
 800167c:	3b08      	subs	r3, #8
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3306      	adds	r3, #6
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	18d3      	adds	r3, r2, r3
 8001686:	3304      	adds	r3, #4
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	1dfa      	adds	r2, r7, #7
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	0011      	movs	r1, r2
 8001690:	2203      	movs	r2, #3
 8001692:	400a      	ands	r2, r1
 8001694:	00d2      	lsls	r2, r2, #3
 8001696:	21ff      	movs	r1, #255	; 0xff
 8001698:	4091      	lsls	r1, r2
 800169a:	000a      	movs	r2, r1
 800169c:	43d2      	mvns	r2, r2
 800169e:	401a      	ands	r2, r3
 80016a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	019b      	lsls	r3, r3, #6
 80016a6:	22ff      	movs	r2, #255	; 0xff
 80016a8:	401a      	ands	r2, r3
 80016aa:	1dfb      	adds	r3, r7, #7
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	0018      	movs	r0, r3
 80016b0:	2303      	movs	r3, #3
 80016b2:	4003      	ands	r3, r0
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016b8:	4809      	ldr	r0, [pc, #36]	; (80016e0 <__NVIC_SetPriority+0xd8>)
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	001c      	movs	r4, r3
 80016c0:	230f      	movs	r3, #15
 80016c2:	4023      	ands	r3, r4
 80016c4:	3b08      	subs	r3, #8
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	430a      	orrs	r2, r1
 80016ca:	3306      	adds	r3, #6
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	18c3      	adds	r3, r0, r3
 80016d0:	3304      	adds	r3, #4
 80016d2:	601a      	str	r2, [r3, #0]
}
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b003      	add	sp, #12
 80016da:	bd90      	pop	{r4, r7, pc}
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	1e5a      	subs	r2, r3, #1
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	045b      	lsls	r3, r3, #17
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d301      	bcc.n	80016fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f8:	2301      	movs	r3, #1
 80016fa:	e010      	b.n	800171e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <SysTick_Config+0x44>)
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	3a01      	subs	r2, #1
 8001702:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001704:	2301      	movs	r3, #1
 8001706:	425b      	negs	r3, r3
 8001708:	2103      	movs	r1, #3
 800170a:	0018      	movs	r0, r3
 800170c:	f7ff ff7c 	bl	8001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <SysTick_Config+0x44>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <SysTick_Config+0x44>)
 8001718:	2207      	movs	r2, #7
 800171a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800171c:	2300      	movs	r3, #0
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b002      	add	sp, #8
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	e000e010 	.word	0xe000e010

0800172c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	210f      	movs	r1, #15
 8001738:	187b      	adds	r3, r7, r1
 800173a:	1c02      	adds	r2, r0, #0
 800173c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	187b      	adds	r3, r7, r1
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b25b      	sxtb	r3, r3
 8001746:	0011      	movs	r1, r2
 8001748:	0018      	movs	r0, r3
 800174a:	f7ff ff5d 	bl	8001608 <__NVIC_SetPriority>
}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ffbf 	bl	80016e4 <SysTick_Config>
 8001766:	0003      	movs	r3, r0
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001786:	e149      	b.n	8001a1c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2101      	movs	r1, #1
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4091      	lsls	r1, r2
 8001792:	000a      	movs	r2, r1
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <HAL_GPIO_Init+0x30>
 800179e:	e13a      	b.n	8001a16 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d00b      	beq.n	80017c0 <HAL_GPIO_Init+0x50>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d007      	beq.n	80017c0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b4:	2b11      	cmp	r3, #17
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b12      	cmp	r3, #18
 80017be:	d130      	bne.n	8001822 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	43da      	mvns	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	409a      	lsls	r2, r3
 80017e2:	0013      	movs	r3, r2
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f6:	2201      	movs	r2, #1
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
 80017fc:	0013      	movs	r3, r2
 80017fe:	43da      	mvns	r2, r3
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	2201      	movs	r2, #1
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
 8001814:	0013      	movs	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2203      	movs	r2, #3
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	43da      	mvns	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0xf2>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b12      	cmp	r3, #18
 8001860:	d123      	bne.n	80018aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	58d3      	ldr	r3, [r2, r3]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2207      	movs	r2, #7
 8001874:	4013      	ands	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2107      	movs	r1, #7
 800188e:	400b      	ands	r3, r1
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	6939      	ldr	r1, [r7, #16]
 80018a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	43da      	mvns	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2203      	movs	r2, #3
 80018c8:	401a      	ands	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	055b      	lsls	r3, r3, #21
 80018e6:	4013      	ands	r3, r2
 80018e8:	d100      	bne.n	80018ec <HAL_GPIO_Init+0x17c>
 80018ea:	e094      	b.n	8001a16 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ec:	4b51      	ldr	r3, [pc, #324]	; (8001a34 <HAL_GPIO_Init+0x2c4>)
 80018ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f0:	4b50      	ldr	r3, [pc, #320]	; (8001a34 <HAL_GPIO_Init+0x2c4>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f8:	4a4f      	ldr	r2, [pc, #316]	; (8001a38 <HAL_GPIO_Init+0x2c8>)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	589b      	ldr	r3, [r3, r2]
 8001904:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2203      	movs	r2, #3
 800190a:	4013      	ands	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	409a      	lsls	r2, r3
 8001912:	0013      	movs	r3, r2
 8001914:	43da      	mvns	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	23a0      	movs	r3, #160	; 0xa0
 8001920:	05db      	lsls	r3, r3, #23
 8001922:	429a      	cmp	r2, r3
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0x1de>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a44      	ldr	r2, [pc, #272]	; (8001a3c <HAL_GPIO_Init+0x2cc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00d      	beq.n	800194a <HAL_GPIO_Init+0x1da>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a43      	ldr	r2, [pc, #268]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x1d6>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <HAL_GPIO_Init+0x2d4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_Init+0x1d2>
 800193e:	2305      	movs	r3, #5
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x1e0>
 8001942:	2306      	movs	r3, #6
 8001944:	e004      	b.n	8001950 <HAL_GPIO_Init+0x1e0>
 8001946:	2302      	movs	r3, #2
 8001948:	e002      	b.n	8001950 <HAL_GPIO_Init+0x1e0>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x1e0>
 800194e:	2300      	movs	r3, #0
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	2103      	movs	r1, #3
 8001954:	400a      	ands	r2, r1
 8001956:	0092      	lsls	r2, r2, #2
 8001958:	4093      	lsls	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001960:	4935      	ldr	r1, [pc, #212]	; (8001a38 <HAL_GPIO_Init+0x2c8>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800196e:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_GPIO_Init+0x2d8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	43da      	mvns	r2, r3
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	025b      	lsls	r3, r3, #9
 8001986:	4013      	ands	r3, r2
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_GPIO_Init+0x2d8>)
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001998:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_GPIO_Init+0x2d8>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	43da      	mvns	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	029b      	lsls	r3, r3, #10
 80019b0:	4013      	ands	r3, r2
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019bc:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <HAL_GPIO_Init+0x2d8>)
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019c2:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_GPIO_Init+0x2d8>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	43da      	mvns	r2, r3
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	035b      	lsls	r3, r3, #13
 80019da:	4013      	ands	r3, r2
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_GPIO_Init+0x2d8>)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_GPIO_Init+0x2d8>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43da      	mvns	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	039b      	lsls	r3, r3, #14
 8001a04:	4013      	ands	r3, r2
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_GPIO_Init+0x2d8>)
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	40da      	lsrs	r2, r3
 8001a24:	1e13      	subs	r3, r2, #0
 8001a26:	d000      	beq.n	8001a2a <HAL_GPIO_Init+0x2ba>
 8001a28:	e6ae      	b.n	8001788 <HAL_GPIO_Init+0x18>
  }
}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b006      	add	sp, #24
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	50000400 	.word	0x50000400
 8001a40:	50000800 	.word	0x50000800
 8001a44:	50001c00 	.word	0x50001c00
 8001a48:	40010400 	.word	0x40010400

08001a4c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	0008      	movs	r0, r1
 8001a56:	0011      	movs	r1, r2
 8001a58:	1cbb      	adds	r3, r7, #2
 8001a5a:	1c02      	adds	r2, r0, #0
 8001a5c:	801a      	strh	r2, [r3, #0]
 8001a5e:	1c7b      	adds	r3, r7, #1
 8001a60:	1c0a      	adds	r2, r1, #0
 8001a62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a64:	1c7b      	adds	r3, r7, #1
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d004      	beq.n	8001a76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6c:	1cbb      	adds	r3, r7, #2
 8001a6e:	881a      	ldrh	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a76:	1cbb      	adds	r3, r7, #2
 8001a78:	881a      	ldrh	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b002      	add	sp, #8
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	000a      	movs	r2, r1
 8001a90:	1cbb      	adds	r3, r7, #2
 8001a92:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a9a:	1cbb      	adds	r3, r7, #2
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	041a      	lsls	r2, r3, #16
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	1cb9      	adds	r1, r7, #2
 8001aaa:	8809      	ldrh	r1, [r1, #0]
 8001aac:	400b      	ands	r3, r1
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
}
 8001ab4:	46c0      	nop			; (mov r8, r8)
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b004      	add	sp, #16
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e082      	b.n	8001bd4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2241      	movs	r2, #65	; 0x41
 8001ad2:	5c9b      	ldrb	r3, [r3, r2]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d107      	bne.n	8001aea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2240      	movs	r2, #64	; 0x40
 8001ade:	2100      	movs	r1, #0
 8001ae0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7ff fbdb 	bl	80012a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2241      	movs	r2, #65	; 0x41
 8001aee:	2124      	movs	r1, #36	; 0x24
 8001af0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2101      	movs	r1, #1
 8001afe:	438a      	bics	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4934      	ldr	r1, [pc, #208]	; (8001bdc <HAL_I2C_Init+0x120>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4931      	ldr	r1, [pc, #196]	; (8001be0 <HAL_I2C_Init+0x124>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d108      	bne.n	8001b3a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	0209      	lsls	r1, r1, #8
 8001b34:	430a      	orrs	r2, r1
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	e007      	b.n	8001b4a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2184      	movs	r1, #132	; 0x84
 8001b44:	0209      	lsls	r1, r1, #8
 8001b46:	430a      	orrs	r2, r1
 8001b48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d104      	bne.n	8001b5c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2280      	movs	r2, #128	; 0x80
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	491f      	ldr	r1, [pc, #124]	; (8001be4 <HAL_I2C_Init+0x128>)
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	491a      	ldr	r1, [pc, #104]	; (8001be0 <HAL_I2C_Init+0x124>)
 8001b78:	400a      	ands	r2, r1
 8001b7a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	0011      	movs	r1, r2
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	021a      	lsls	r2, r3, #8
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69d9      	ldr	r1, [r3, #28]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1a      	ldr	r2, [r3, #32]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2241      	movs	r2, #65	; 0x41
 8001bc0:	2120      	movs	r1, #32
 8001bc2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2242      	movs	r2, #66	; 0x42
 8001bce:	2100      	movs	r1, #0
 8001bd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b002      	add	sp, #8
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	f0ffffff 	.word	0xf0ffffff
 8001be0:	ffff7fff 	.word	0xffff7fff
 8001be4:	02008000 	.word	0x02008000

08001be8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	0008      	movs	r0, r1
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	1c02      	adds	r2, r0, #0
 8001bfc:	801a      	strh	r2, [r3, #0]
 8001bfe:	2308      	movs	r3, #8
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	1c0a      	adds	r2, r1, #0
 8001c04:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2241      	movs	r2, #65	; 0x41
 8001c0a:	5c9b      	ldrb	r3, [r3, r2]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	d000      	beq.n	8001c14 <HAL_I2C_Master_Transmit+0x2c>
 8001c12:	e0e7      	b.n	8001de4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	5c9b      	ldrb	r3, [r3, r2]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2C_Master_Transmit+0x3a>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e0e1      	b.n	8001de6 <HAL_I2C_Master_Transmit+0x1fe>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2240      	movs	r2, #64	; 0x40
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c2a:	f7ff fcbf 	bl	80015ac <HAL_GetTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	0219      	lsls	r1, r3, #8
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2319      	movs	r3, #25
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f000 fd2c 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 8001c44:	1e03      	subs	r3, r0, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0cc      	b.n	8001de6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2241      	movs	r2, #65	; 0x41
 8001c50:	2121      	movs	r1, #33	; 0x21
 8001c52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2242      	movs	r2, #66	; 0x42
 8001c58:	2110      	movs	r1, #16
 8001c5a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	18ba      	adds	r2, r7, r2
 8001c6e:	8812      	ldrh	r2, [r2, #0]
 8001c70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2bff      	cmp	r3, #255	; 0xff
 8001c80:	d911      	bls.n	8001ca6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	22ff      	movs	r2, #255	; 0xff
 8001c86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	045c      	lsls	r4, r3, #17
 8001c92:	230a      	movs	r3, #10
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	8819      	ldrh	r1, [r3, #0]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	4b55      	ldr	r3, [pc, #340]	; (8001df0 <HAL_I2C_Master_Transmit+0x208>)
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	0023      	movs	r3, r4
 8001ca0:	f000 fe88 	bl	80029b4 <I2C_TransferConfig>
 8001ca4:	e075      	b.n	8001d92 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	049c      	lsls	r4, r3, #18
 8001cba:	230a      	movs	r3, #10
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	8819      	ldrh	r1, [r3, #0]
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <HAL_I2C_Master_Transmit+0x208>)
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	0023      	movs	r3, r4
 8001cc8:	f000 fe74 	bl	80029b4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ccc:	e061      	b.n	8001d92 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 fd20 	bl	800271a <I2C_WaitOnTXISFlagUntilTimeout>
 8001cda:	1e03      	subs	r3, r0, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e081      	b.n	8001de6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	781a      	ldrb	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d03a      	beq.n	8001d92 <HAL_I2C_Master_Transmit+0x1aa>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d136      	bne.n	8001d92 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	0013      	movs	r3, r2
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2180      	movs	r1, #128	; 0x80
 8001d32:	f000 fcb3 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 8001d36:	1e03      	subs	r3, r0, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e053      	b.n	8001de6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2bff      	cmp	r3, #255	; 0xff
 8001d46:	d911      	bls.n	8001d6c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	22ff      	movs	r2, #255	; 0xff
 8001d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	045c      	lsls	r4, r3, #17
 8001d58:	230a      	movs	r3, #10
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	8819      	ldrh	r1, [r3, #0]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	2300      	movs	r3, #0
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	0023      	movs	r3, r4
 8001d66:	f000 fe25 	bl	80029b4 <I2C_TransferConfig>
 8001d6a:	e012      	b.n	8001d92 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	049c      	lsls	r4, r3, #18
 8001d80:	230a      	movs	r3, #10
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	8819      	ldrh	r1, [r3, #0]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	0023      	movs	r3, r4
 8001d8e:	f000 fe11 	bl	80029b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d198      	bne.n	8001cce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f000 fcf8 	bl	8002798 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001da8:	1e03      	subs	r3, r0, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e01a      	b.n	8001de6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2220      	movs	r2, #32
 8001db6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	490c      	ldr	r1, [pc, #48]	; (8001df4 <HAL_I2C_Master_Transmit+0x20c>)
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2241      	movs	r2, #65	; 0x41
 8001dcc:	2120      	movs	r1, #32
 8001dce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2242      	movs	r2, #66	; 0x42
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2240      	movs	r2, #64	; 0x40
 8001ddc:	2100      	movs	r1, #0
 8001dde:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	e000      	b.n	8001de6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001de4:	2302      	movs	r3, #2
  }
}
 8001de6:	0018      	movs	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b007      	add	sp, #28
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	80002000 	.word	0x80002000
 8001df4:	fe00e800 	.word	0xfe00e800

08001df8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	0008      	movs	r0, r1
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	0019      	movs	r1, r3
 8001e06:	230a      	movs	r3, #10
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	1c02      	adds	r2, r0, #0
 8001e0c:	801a      	strh	r2, [r3, #0]
 8001e0e:	2308      	movs	r3, #8
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	1c0a      	adds	r2, r1, #0
 8001e14:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2241      	movs	r2, #65	; 0x41
 8001e1a:	5c9b      	ldrb	r3, [r3, r2]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	d000      	beq.n	8001e24 <HAL_I2C_Master_Receive+0x2c>
 8001e22:	e0e8      	b.n	8001ff6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2240      	movs	r2, #64	; 0x40
 8001e28:	5c9b      	ldrb	r3, [r3, r2]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2C_Master_Receive+0x3a>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e0e2      	b.n	8001ff8 <HAL_I2C_Master_Receive+0x200>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2240      	movs	r2, #64	; 0x40
 8001e36:	2101      	movs	r1, #1
 8001e38:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e3a:	f7ff fbb7 	bl	80015ac <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	0219      	lsls	r1, r3, #8
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2319      	movs	r3, #25
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f000 fc24 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 8001e54:	1e03      	subs	r3, r0, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0cd      	b.n	8001ff8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2241      	movs	r2, #65	; 0x41
 8001e60:	2122      	movs	r1, #34	; 0x22
 8001e62:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2242      	movs	r2, #66	; 0x42
 8001e68:	2110      	movs	r1, #16
 8001e6a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2208      	movs	r2, #8
 8001e7c:	18ba      	adds	r2, r7, r2
 8001e7e:	8812      	ldrh	r2, [r2, #0]
 8001e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2bff      	cmp	r3, #255	; 0xff
 8001e90:	d911      	bls.n	8001eb6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	22ff      	movs	r2, #255	; 0xff
 8001e96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	045c      	lsls	r4, r3, #17
 8001ea2:	230a      	movs	r3, #10
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	8819      	ldrh	r1, [r3, #0]
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	4b55      	ldr	r3, [pc, #340]	; (8002000 <HAL_I2C_Master_Receive+0x208>)
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	0023      	movs	r3, r4
 8001eb0:	f000 fd80 	bl	80029b4 <I2C_TransferConfig>
 8001eb4:	e076      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	049c      	lsls	r4, r3, #18
 8001eca:	230a      	movs	r3, #10
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	8819      	ldrh	r1, [r3, #0]
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <HAL_I2C_Master_Receive+0x208>)
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	0023      	movs	r3, r4
 8001ed8:	f000 fd6c 	bl	80029b4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001edc:	e062      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 fc93 	bl	8002810 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001eea:	1e03      	subs	r3, r0, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e082      	b.n	8001ff8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d03a      	beq.n	8001fa4 <HAL_I2C_Master_Receive+0x1ac>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d136      	bne.n	8001fa4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	0013      	movs	r3, r2
 8001f40:	2200      	movs	r2, #0
 8001f42:	2180      	movs	r1, #128	; 0x80
 8001f44:	f000 fbaa 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 8001f48:	1e03      	subs	r3, r0, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e053      	b.n	8001ff8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2bff      	cmp	r3, #255	; 0xff
 8001f58:	d911      	bls.n	8001f7e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	22ff      	movs	r2, #255	; 0xff
 8001f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	045c      	lsls	r4, r3, #17
 8001f6a:	230a      	movs	r3, #10
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	8819      	ldrh	r1, [r3, #0]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	2300      	movs	r3, #0
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	0023      	movs	r3, r4
 8001f78:	f000 fd1c 	bl	80029b4 <I2C_TransferConfig>
 8001f7c:	e012      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	049c      	lsls	r4, r3, #18
 8001f92:	230a      	movs	r3, #10
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	8819      	ldrh	r1, [r3, #0]
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	0023      	movs	r3, r4
 8001fa0:	f000 fd08 	bl	80029b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d197      	bne.n	8001ede <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f000 fbef 	bl	8002798 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fba:	1e03      	subs	r3, r0, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e01a      	b.n	8001ff8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	490b      	ldr	r1, [pc, #44]	; (8002004 <HAL_I2C_Master_Receive+0x20c>)
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2241      	movs	r2, #65	; 0x41
 8001fde:	2120      	movs	r1, #32
 8001fe0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2242      	movs	r2, #66	; 0x42
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2240      	movs	r2, #64	; 0x40
 8001fee:	2100      	movs	r1, #0
 8001ff0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001ff6:	2302      	movs	r3, #2
  }
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b007      	add	sp, #28
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	80002400 	.word	0x80002400
 8002004:	fe00e800 	.word	0xfe00e800

08002008 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af02      	add	r7, sp, #8
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	000c      	movs	r4, r1
 8002012:	0010      	movs	r0, r2
 8002014:	0019      	movs	r1, r3
 8002016:	230a      	movs	r3, #10
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	1c22      	adds	r2, r4, #0
 800201c:	801a      	strh	r2, [r3, #0]
 800201e:	2308      	movs	r3, #8
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	1c02      	adds	r2, r0, #0
 8002024:	801a      	strh	r2, [r3, #0]
 8002026:	1dbb      	adds	r3, r7, #6
 8002028:	1c0a      	adds	r2, r1, #0
 800202a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2241      	movs	r2, #65	; 0x41
 8002030:	5c9b      	ldrb	r3, [r3, r2]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b20      	cmp	r3, #32
 8002036:	d000      	beq.n	800203a <HAL_I2C_Mem_Write+0x32>
 8002038:	e10c      	b.n	8002254 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203c:	2b00      	cmp	r3, #0
 800203e:	d004      	beq.n	800204a <HAL_I2C_Mem_Write+0x42>
 8002040:	232c      	movs	r3, #44	; 0x2c
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d105      	bne.n	8002056 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2280      	movs	r2, #128	; 0x80
 800204e:	0092      	lsls	r2, r2, #2
 8002050:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0ff      	b.n	8002256 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2240      	movs	r2, #64	; 0x40
 800205a:	5c9b      	ldrb	r3, [r3, r2]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_I2C_Mem_Write+0x5c>
 8002060:	2302      	movs	r3, #2
 8002062:	e0f8      	b.n	8002256 <HAL_I2C_Mem_Write+0x24e>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2240      	movs	r2, #64	; 0x40
 8002068:	2101      	movs	r1, #1
 800206a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800206c:	f7ff fa9e 	bl	80015ac <HAL_GetTick>
 8002070:	0003      	movs	r3, r0
 8002072:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	0219      	lsls	r1, r3, #8
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2319      	movs	r3, #25
 8002080:	2201      	movs	r2, #1
 8002082:	f000 fb0b 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 8002086:	1e03      	subs	r3, r0, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0e3      	b.n	8002256 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2241      	movs	r2, #65	; 0x41
 8002092:	2121      	movs	r1, #33	; 0x21
 8002094:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2242      	movs	r2, #66	; 0x42
 800209a:	2140      	movs	r1, #64	; 0x40
 800209c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	222c      	movs	r2, #44	; 0x2c
 80020ae:	18ba      	adds	r2, r7, r2
 80020b0:	8812      	ldrh	r2, [r2, #0]
 80020b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020ba:	1dbb      	adds	r3, r7, #6
 80020bc:	881c      	ldrh	r4, [r3, #0]
 80020be:	2308      	movs	r3, #8
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	881a      	ldrh	r2, [r3, #0]
 80020c4:	230a      	movs	r3, #10
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	8819      	ldrh	r1, [r3, #0]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	0023      	movs	r3, r4
 80020d6:	f000 f9f9 	bl	80024cc <I2C_RequestMemoryWrite>
 80020da:	1e03      	subs	r3, r0, #0
 80020dc:	d005      	beq.n	80020ea <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2240      	movs	r2, #64	; 0x40
 80020e2:	2100      	movs	r1, #0
 80020e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e0b5      	b.n	8002256 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2bff      	cmp	r3, #255	; 0xff
 80020f2:	d911      	bls.n	8002118 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	22ff      	movs	r2, #255	; 0xff
 80020f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	045c      	lsls	r4, r3, #17
 8002104:	230a      	movs	r3, #10
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	8819      	ldrh	r1, [r3, #0]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	2300      	movs	r3, #0
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	0023      	movs	r3, r4
 8002112:	f000 fc4f 	bl	80029b4 <I2C_TransferConfig>
 8002116:	e012      	b.n	800213e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002126:	b2da      	uxtb	r2, r3
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	049c      	lsls	r4, r3, #18
 800212c:	230a      	movs	r3, #10
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	8819      	ldrh	r1, [r3, #0]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	2300      	movs	r3, #0
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	0023      	movs	r3, r4
 800213a:	f000 fc3b 	bl	80029b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	0018      	movs	r0, r3
 8002146:	f000 fae8 	bl	800271a <I2C_WaitOnTXISFlagUntilTimeout>
 800214a:	1e03      	subs	r3, r0, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e081      	b.n	8002256 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d03a      	beq.n	8002202 <HAL_I2C_Mem_Write+0x1fa>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	d136      	bne.n	8002202 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	0013      	movs	r3, r2
 800219e:	2200      	movs	r2, #0
 80021a0:	2180      	movs	r1, #128	; 0x80
 80021a2:	f000 fa7b 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 80021a6:	1e03      	subs	r3, r0, #0
 80021a8:	d001      	beq.n	80021ae <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e053      	b.n	8002256 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2bff      	cmp	r3, #255	; 0xff
 80021b6:	d911      	bls.n	80021dc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	22ff      	movs	r2, #255	; 0xff
 80021bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	045c      	lsls	r4, r3, #17
 80021c8:	230a      	movs	r3, #10
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	8819      	ldrh	r1, [r3, #0]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	2300      	movs	r3, #0
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	0023      	movs	r3, r4
 80021d6:	f000 fbed 	bl	80029b4 <I2C_TransferConfig>
 80021da:	e012      	b.n	8002202 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	049c      	lsls	r4, r3, #18
 80021f0:	230a      	movs	r3, #10
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	8819      	ldrh	r1, [r3, #0]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	2300      	movs	r3, #0
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	0023      	movs	r3, r4
 80021fe:	f000 fbd9 	bl	80029b4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d198      	bne.n	800213e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	0018      	movs	r0, r3
 8002214:	f000 fac0 	bl	8002798 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002218:	1e03      	subs	r3, r0, #0
 800221a:	d001      	beq.n	8002220 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e01a      	b.n	8002256 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2220      	movs	r2, #32
 8002226:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	490b      	ldr	r1, [pc, #44]	; (8002260 <HAL_I2C_Mem_Write+0x258>)
 8002234:	400a      	ands	r2, r1
 8002236:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2241      	movs	r2, #65	; 0x41
 800223c:	2120      	movs	r1, #32
 800223e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2242      	movs	r2, #66	; 0x42
 8002244:	2100      	movs	r1, #0
 8002246:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2240      	movs	r2, #64	; 0x40
 800224c:	2100      	movs	r1, #0
 800224e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e000      	b.n	8002256 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002254:	2302      	movs	r3, #2
  }
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b007      	add	sp, #28
 800225c:	bd90      	pop	{r4, r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	fe00e800 	.word	0xfe00e800

08002264 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	000c      	movs	r4, r1
 800226e:	0010      	movs	r0, r2
 8002270:	0019      	movs	r1, r3
 8002272:	230a      	movs	r3, #10
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	1c22      	adds	r2, r4, #0
 8002278:	801a      	strh	r2, [r3, #0]
 800227a:	2308      	movs	r3, #8
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	1c02      	adds	r2, r0, #0
 8002280:	801a      	strh	r2, [r3, #0]
 8002282:	1dbb      	adds	r3, r7, #6
 8002284:	1c0a      	adds	r2, r1, #0
 8002286:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2241      	movs	r2, #65	; 0x41
 800228c:	5c9b      	ldrb	r3, [r3, r2]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b20      	cmp	r3, #32
 8002292:	d000      	beq.n	8002296 <HAL_I2C_Mem_Read+0x32>
 8002294:	e110      	b.n	80024b8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	d004      	beq.n	80022a6 <HAL_I2C_Mem_Read+0x42>
 800229c:	232c      	movs	r3, #44	; 0x2c
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e103      	b.n	80024ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2240      	movs	r2, #64	; 0x40
 80022b6:	5c9b      	ldrb	r3, [r3, r2]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_I2C_Mem_Read+0x5c>
 80022bc:	2302      	movs	r3, #2
 80022be:	e0fc      	b.n	80024ba <HAL_I2C_Mem_Read+0x256>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2240      	movs	r2, #64	; 0x40
 80022c4:	2101      	movs	r1, #1
 80022c6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022c8:	f7ff f970 	bl	80015ac <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	0219      	lsls	r1, r3, #8
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2319      	movs	r3, #25
 80022dc:	2201      	movs	r2, #1
 80022de:	f000 f9dd 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 80022e2:	1e03      	subs	r3, r0, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0e7      	b.n	80024ba <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2241      	movs	r2, #65	; 0x41
 80022ee:	2122      	movs	r1, #34	; 0x22
 80022f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2242      	movs	r2, #66	; 0x42
 80022f6:	2140      	movs	r1, #64	; 0x40
 80022f8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	222c      	movs	r2, #44	; 0x2c
 800230a:	18ba      	adds	r2, r7, r2
 800230c:	8812      	ldrh	r2, [r2, #0]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002316:	1dbb      	adds	r3, r7, #6
 8002318:	881c      	ldrh	r4, [r3, #0]
 800231a:	2308      	movs	r3, #8
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	881a      	ldrh	r2, [r3, #0]
 8002320:	230a      	movs	r3, #10
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	8819      	ldrh	r1, [r3, #0]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	0023      	movs	r3, r4
 8002332:	f000 f92f 	bl	8002594 <I2C_RequestMemoryRead>
 8002336:	1e03      	subs	r3, r0, #0
 8002338:	d005      	beq.n	8002346 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2240      	movs	r2, #64	; 0x40
 800233e:	2100      	movs	r1, #0
 8002340:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e0b9      	b.n	80024ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	2bff      	cmp	r3, #255	; 0xff
 800234e:	d911      	bls.n	8002374 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	22ff      	movs	r2, #255	; 0xff
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	b2da      	uxtb	r2, r3
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	045c      	lsls	r4, r3, #17
 8002360:	230a      	movs	r3, #10
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	8819      	ldrh	r1, [r3, #0]
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	4b56      	ldr	r3, [pc, #344]	; (80024c4 <HAL_I2C_Mem_Read+0x260>)
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	0023      	movs	r3, r4
 800236e:	f000 fb21 	bl	80029b4 <I2C_TransferConfig>
 8002372:	e012      	b.n	800239a <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	b2da      	uxtb	r2, r3
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	049c      	lsls	r4, r3, #18
 8002388:	230a      	movs	r3, #10
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	8819      	ldrh	r1, [r3, #0]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <HAL_I2C_Mem_Read+0x260>)
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	0023      	movs	r3, r4
 8002396:	f000 fb0d 	bl	80029b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800239a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	0013      	movs	r3, r2
 80023a4:	2200      	movs	r2, #0
 80023a6:	2104      	movs	r1, #4
 80023a8:	f000 f978 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 80023ac:	1e03      	subs	r3, r0, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e082      	b.n	80024ba <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03a      	beq.n	8002466 <HAL_I2C_Mem_Read+0x202>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d136      	bne.n	8002466 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	0013      	movs	r3, r2
 8002402:	2200      	movs	r2, #0
 8002404:	2180      	movs	r1, #128	; 0x80
 8002406:	f000 f949 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 800240a:	1e03      	subs	r3, r0, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e053      	b.n	80024ba <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	2bff      	cmp	r3, #255	; 0xff
 800241a:	d911      	bls.n	8002440 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	22ff      	movs	r2, #255	; 0xff
 8002420:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	b2da      	uxtb	r2, r3
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	045c      	lsls	r4, r3, #17
 800242c:	230a      	movs	r3, #10
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	8819      	ldrh	r1, [r3, #0]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	2300      	movs	r3, #0
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	0023      	movs	r3, r4
 800243a:	f000 fabb 	bl	80029b4 <I2C_TransferConfig>
 800243e:	e012      	b.n	8002466 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	b2da      	uxtb	r2, r3
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	049c      	lsls	r4, r3, #18
 8002454:	230a      	movs	r3, #10
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	8819      	ldrh	r1, [r3, #0]
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	2300      	movs	r3, #0
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	0023      	movs	r3, r4
 8002462:	f000 faa7 	bl	80029b4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d194      	bne.n	800239a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	0018      	movs	r0, r3
 8002478:	f000 f98e 	bl	8002798 <I2C_WaitOnSTOPFlagUntilTimeout>
 800247c:	1e03      	subs	r3, r0, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e01a      	b.n	80024ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2220      	movs	r2, #32
 800248a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	490c      	ldr	r1, [pc, #48]	; (80024c8 <HAL_I2C_Mem_Read+0x264>)
 8002498:	400a      	ands	r2, r1
 800249a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2241      	movs	r2, #65	; 0x41
 80024a0:	2120      	movs	r1, #32
 80024a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2242      	movs	r2, #66	; 0x42
 80024a8:	2100      	movs	r1, #0
 80024aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2240      	movs	r2, #64	; 0x40
 80024b0:	2100      	movs	r1, #0
 80024b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	0018      	movs	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	b007      	add	sp, #28
 80024c0:	bd90      	pop	{r4, r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	80002400 	.word	0x80002400
 80024c8:	fe00e800 	.word	0xfe00e800

080024cc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024cc:	b5b0      	push	{r4, r5, r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	000c      	movs	r4, r1
 80024d6:	0010      	movs	r0, r2
 80024d8:	0019      	movs	r1, r3
 80024da:	250a      	movs	r5, #10
 80024dc:	197b      	adds	r3, r7, r5
 80024de:	1c22      	adds	r2, r4, #0
 80024e0:	801a      	strh	r2, [r3, #0]
 80024e2:	2308      	movs	r3, #8
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	1c02      	adds	r2, r0, #0
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	1dbb      	adds	r3, r7, #6
 80024ec:	1c0a      	adds	r2, r1, #0
 80024ee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024f0:	1dbb      	adds	r3, r7, #6
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	045c      	lsls	r4, r3, #17
 80024fa:	197b      	adds	r3, r7, r5
 80024fc:	8819      	ldrh	r1, [r3, #0]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	4b23      	ldr	r3, [pc, #140]	; (8002590 <I2C_RequestMemoryWrite+0xc4>)
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	0023      	movs	r3, r4
 8002506:	f000 fa55 	bl	80029b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	6a39      	ldr	r1, [r7, #32]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	0018      	movs	r0, r3
 8002512:	f000 f902 	bl	800271a <I2C_WaitOnTXISFlagUntilTimeout>
 8002516:	1e03      	subs	r3, r0, #0
 8002518:	d001      	beq.n	800251e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e033      	b.n	8002586 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800251e:	1dbb      	adds	r3, r7, #6
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d107      	bne.n	8002536 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002526:	2308      	movs	r3, #8
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
 8002534:	e019      	b.n	800256a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002536:	2308      	movs	r3, #8
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	b29b      	uxth	r3, r3
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254a:	6a39      	ldr	r1, [r7, #32]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	0018      	movs	r0, r3
 8002550:	f000 f8e3 	bl	800271a <I2C_WaitOnTXISFlagUntilTimeout>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d001      	beq.n	800255c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e014      	b.n	8002586 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800255c:	2308      	movs	r3, #8
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800256a:	6a3a      	ldr	r2, [r7, #32]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	0013      	movs	r3, r2
 8002574:	2200      	movs	r2, #0
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	f000 f890 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 800257c:	1e03      	subs	r3, r0, #0
 800257e:	d001      	beq.n	8002584 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b004      	add	sp, #16
 800258c:	bdb0      	pop	{r4, r5, r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	80002000 	.word	0x80002000

08002594 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b5b0      	push	{r4, r5, r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	000c      	movs	r4, r1
 800259e:	0010      	movs	r0, r2
 80025a0:	0019      	movs	r1, r3
 80025a2:	250a      	movs	r5, #10
 80025a4:	197b      	adds	r3, r7, r5
 80025a6:	1c22      	adds	r2, r4, #0
 80025a8:	801a      	strh	r2, [r3, #0]
 80025aa:	2308      	movs	r3, #8
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	1c02      	adds	r2, r0, #0
 80025b0:	801a      	strh	r2, [r3, #0]
 80025b2:	1dbb      	adds	r3, r7, #6
 80025b4:	1c0a      	adds	r2, r1, #0
 80025b6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025b8:	1dbb      	adds	r3, r7, #6
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	197b      	adds	r3, r7, r5
 80025c0:	8819      	ldrh	r1, [r3, #0]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	4b23      	ldr	r3, [pc, #140]	; (8002654 <I2C_RequestMemoryRead+0xc0>)
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2300      	movs	r3, #0
 80025ca:	f000 f9f3 	bl	80029b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d0:	6a39      	ldr	r1, [r7, #32]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 f8a0 	bl	800271a <I2C_WaitOnTXISFlagUntilTimeout>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d001      	beq.n	80025e2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e033      	b.n	800264a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025e2:	1dbb      	adds	r3, r7, #6
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025ea:	2308      	movs	r3, #8
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28
 80025f8:	e019      	b.n	800262e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025fa:	2308      	movs	r3, #8
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	b29b      	uxth	r3, r3
 8002604:	b2da      	uxtb	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260e:	6a39      	ldr	r1, [r7, #32]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	0018      	movs	r0, r3
 8002614:	f000 f881 	bl	800271a <I2C_WaitOnTXISFlagUntilTimeout>
 8002618:	1e03      	subs	r3, r0, #0
 800261a:	d001      	beq.n	8002620 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e014      	b.n	800264a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002620:	2308      	movs	r3, #8
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800262e:	6a3a      	ldr	r2, [r7, #32]
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	0013      	movs	r3, r2
 8002638:	2200      	movs	r2, #0
 800263a:	2140      	movs	r1, #64	; 0x40
 800263c:	f000 f82e 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 8002640:	1e03      	subs	r3, r0, #0
 8002642:	d001      	beq.n	8002648 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	0018      	movs	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	b004      	add	sp, #16
 8002650:	bdb0      	pop	{r4, r5, r7, pc}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	80002000 	.word	0x80002000

08002658 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2202      	movs	r2, #2
 8002668:	4013      	ands	r3, r2
 800266a:	2b02      	cmp	r3, #2
 800266c:	d103      	bne.n	8002676 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2201      	movs	r2, #1
 800267e:	4013      	ands	r3, r2
 8002680:	2b01      	cmp	r3, #1
 8002682:	d007      	beq.n	8002694 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2101      	movs	r1, #1
 8002690:	430a      	orrs	r2, r1
 8002692:	619a      	str	r2, [r3, #24]
  }
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	b002      	add	sp, #8
 800269a:	bd80      	pop	{r7, pc}

0800269c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	1dfb      	adds	r3, r7, #7
 80026aa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ac:	e021      	b.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	d01e      	beq.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b4:	f7fe ff7a 	bl	80015ac <HAL_GetTick>
 80026b8:	0002      	movs	r2, r0
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d302      	bcc.n	80026ca <I2C_WaitOnFlagUntilTimeout+0x2e>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d113      	bne.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	2220      	movs	r2, #32
 80026d0:	431a      	orrs	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2241      	movs	r2, #65	; 0x41
 80026da:	2120      	movs	r1, #32
 80026dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2242      	movs	r2, #66	; 0x42
 80026e2:	2100      	movs	r1, #0
 80026e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2240      	movs	r2, #64	; 0x40
 80026ea:	2100      	movs	r1, #0
 80026ec:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00f      	b.n	8002712 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	4013      	ands	r3, r2
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	425a      	negs	r2, r3
 8002702:	4153      	adcs	r3, r2
 8002704:	b2db      	uxtb	r3, r3
 8002706:	001a      	movs	r2, r3
 8002708:	1dfb      	adds	r3, r7, #7
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d0ce      	beq.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	0018      	movs	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	b004      	add	sp, #16
 8002718:	bd80      	pop	{r7, pc}

0800271a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002726:	e02b      	b.n	8002780 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	0018      	movs	r0, r3
 8002730:	f000 f8da 	bl	80028e8 <I2C_IsAcknowledgeFailed>
 8002734:	1e03      	subs	r3, r0, #0
 8002736:	d001      	beq.n	800273c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e029      	b.n	8002790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3301      	adds	r3, #1
 8002740:	d01e      	beq.n	8002780 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7fe ff33 	bl	80015ac <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d113      	bne.n	8002780 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	2220      	movs	r2, #32
 800275e:	431a      	orrs	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2241      	movs	r2, #65	; 0x41
 8002768:	2120      	movs	r1, #32
 800276a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2242      	movs	r2, #66	; 0x42
 8002770:	2100      	movs	r1, #0
 8002772:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2240      	movs	r2, #64	; 0x40
 8002778:	2100      	movs	r1, #0
 800277a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e007      	b.n	8002790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2202      	movs	r2, #2
 8002788:	4013      	ands	r3, r2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d1cc      	bne.n	8002728 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	b004      	add	sp, #16
 8002796:	bd80      	pop	{r7, pc}

08002798 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027a4:	e028      	b.n	80027f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	0018      	movs	r0, r3
 80027ae:	f000 f89b 	bl	80028e8 <I2C_IsAcknowledgeFailed>
 80027b2:	1e03      	subs	r3, r0, #0
 80027b4:	d001      	beq.n	80027ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e026      	b.n	8002808 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ba:	f7fe fef7 	bl	80015ac <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d302      	bcc.n	80027d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d113      	bne.n	80027f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	2220      	movs	r2, #32
 80027d6:	431a      	orrs	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2241      	movs	r2, #65	; 0x41
 80027e0:	2120      	movs	r1, #32
 80027e2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2242      	movs	r2, #66	; 0x42
 80027e8:	2100      	movs	r1, #0
 80027ea:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2240      	movs	r2, #64	; 0x40
 80027f0:	2100      	movs	r1, #0
 80027f2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e007      	b.n	8002808 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2220      	movs	r2, #32
 8002800:	4013      	ands	r3, r2
 8002802:	2b20      	cmp	r3, #32
 8002804:	d1cf      	bne.n	80027a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	b004      	add	sp, #16
 800280e:	bd80      	pop	{r7, pc}

08002810 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800281c:	e055      	b.n	80028ca <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	0018      	movs	r0, r3
 8002826:	f000 f85f 	bl	80028e8 <I2C_IsAcknowledgeFailed>
 800282a:	1e03      	subs	r3, r0, #0
 800282c:	d001      	beq.n	8002832 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e053      	b.n	80028da <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2220      	movs	r2, #32
 800283a:	4013      	ands	r3, r2
 800283c:	2b20      	cmp	r3, #32
 800283e:	d129      	bne.n	8002894 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2204      	movs	r2, #4
 8002848:	4013      	ands	r3, r2
 800284a:	2b04      	cmp	r3, #4
 800284c:	d105      	bne.n	800285a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e03f      	b.n	80028da <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2220      	movs	r2, #32
 8002860:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	491d      	ldr	r1, [pc, #116]	; (80028e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800286e:	400a      	ands	r2, r1
 8002870:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2241      	movs	r2, #65	; 0x41
 800287c:	2120      	movs	r1, #32
 800287e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2242      	movs	r2, #66	; 0x42
 8002884:	2100      	movs	r1, #0
 8002886:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2240      	movs	r2, #64	; 0x40
 800288c:	2100      	movs	r1, #0
 800288e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e022      	b.n	80028da <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002894:	f7fe fe8a 	bl	80015ac <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d302      	bcc.n	80028aa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10f      	bne.n	80028ca <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	2220      	movs	r2, #32
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2241      	movs	r2, #65	; 0x41
 80028ba:	2120      	movs	r1, #32
 80028bc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2240      	movs	r2, #64	; 0x40
 80028c2:	2100      	movs	r1, #0
 80028c4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e007      	b.n	80028da <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2204      	movs	r2, #4
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d1a2      	bne.n	800281e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b004      	add	sp, #16
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	fe00e800 	.word	0xfe00e800

080028e8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2210      	movs	r2, #16
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d151      	bne.n	80029a6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002902:	e021      	b.n	8002948 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	3301      	adds	r3, #1
 8002908:	d01e      	beq.n	8002948 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290a:	f7fe fe4f 	bl	80015ac <HAL_GetTick>
 800290e:	0002      	movs	r2, r0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	429a      	cmp	r2, r3
 8002918:	d302      	bcc.n	8002920 <I2C_IsAcknowledgeFailed+0x38>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d113      	bne.n	8002948 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002924:	2220      	movs	r2, #32
 8002926:	431a      	orrs	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2241      	movs	r2, #65	; 0x41
 8002930:	2120      	movs	r1, #32
 8002932:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2242      	movs	r2, #66	; 0x42
 8002938:	2100      	movs	r1, #0
 800293a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2240      	movs	r2, #64	; 0x40
 8002940:	2100      	movs	r1, #0
 8002942:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e02f      	b.n	80029a8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2220      	movs	r2, #32
 8002950:	4013      	ands	r3, r2
 8002952:	2b20      	cmp	r3, #32
 8002954:	d1d6      	bne.n	8002904 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2210      	movs	r2, #16
 800295c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2220      	movs	r2, #32
 8002964:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	0018      	movs	r0, r3
 800296a:	f7ff fe75 	bl	8002658 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	490d      	ldr	r1, [pc, #52]	; (80029b0 <I2C_IsAcknowledgeFailed+0xc8>)
 800297a:	400a      	ands	r2, r1
 800297c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	2204      	movs	r2, #4
 8002984:	431a      	orrs	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2241      	movs	r2, #65	; 0x41
 800298e:	2120      	movs	r1, #32
 8002990:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2242      	movs	r2, #66	; 0x42
 8002996:	2100      	movs	r1, #0
 8002998:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2240      	movs	r2, #64	; 0x40
 800299e:	2100      	movs	r1, #0
 80029a0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b004      	add	sp, #16
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	fe00e800 	.word	0xfe00e800

080029b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	0008      	movs	r0, r1
 80029be:	0011      	movs	r1, r2
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	240a      	movs	r4, #10
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	1c02      	adds	r2, r0, #0
 80029c8:	801a      	strh	r2, [r3, #0]
 80029ca:	2009      	movs	r0, #9
 80029cc:	183b      	adds	r3, r7, r0
 80029ce:	1c0a      	adds	r2, r1, #0
 80029d0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	6a3a      	ldr	r2, [r7, #32]
 80029da:	0d51      	lsrs	r1, r2, #21
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	00d2      	lsls	r2, r2, #3
 80029e0:	400a      	ands	r2, r1
 80029e2:	490e      	ldr	r1, [pc, #56]	; (8002a1c <I2C_TransferConfig+0x68>)
 80029e4:	430a      	orrs	r2, r1
 80029e6:	43d2      	mvns	r2, r2
 80029e8:	401a      	ands	r2, r3
 80029ea:	0011      	movs	r1, r2
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	059b      	lsls	r3, r3, #22
 80029f2:	0d9a      	lsrs	r2, r3, #22
 80029f4:	183b      	adds	r3, r7, r0
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	0418      	lsls	r0, r3, #16
 80029fa:	23ff      	movs	r3, #255	; 0xff
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	4003      	ands	r3, r0
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b005      	add	sp, #20
 8002a18:	bd90      	pop	{r4, r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	03ff63ff 	.word	0x03ff63ff

08002a20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2241      	movs	r2, #65	; 0x41
 8002a2e:	5c9b      	ldrb	r3, [r3, r2]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d138      	bne.n	8002aa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2240      	movs	r2, #64	; 0x40
 8002a3a:	5c9b      	ldrb	r3, [r3, r2]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e032      	b.n	8002aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2240      	movs	r2, #64	; 0x40
 8002a48:	2101      	movs	r1, #1
 8002a4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2241      	movs	r2, #65	; 0x41
 8002a50:	2124      	movs	r1, #36	; 0x24
 8002a52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2101      	movs	r1, #1
 8002a60:	438a      	bics	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4911      	ldr	r1, [pc, #68]	; (8002ab4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002a70:	400a      	ands	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2241      	movs	r2, #65	; 0x41
 8002a98:	2120      	movs	r1, #32
 8002a9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2240      	movs	r2, #64	; 0x40
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
  }
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b002      	add	sp, #8
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	ffffefff 	.word	0xffffefff

08002ab8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2241      	movs	r2, #65	; 0x41
 8002ac6:	5c9b      	ldrb	r3, [r3, r2]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d139      	bne.n	8002b42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2240      	movs	r2, #64	; 0x40
 8002ad2:	5c9b      	ldrb	r3, [r3, r2]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e033      	b.n	8002b44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2240      	movs	r2, #64	; 0x40
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2241      	movs	r2, #65	; 0x41
 8002ae8:	2124      	movs	r1, #36	; 0x24
 8002aea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2101      	movs	r1, #1
 8002af8:	438a      	bics	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2101      	movs	r1, #1
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2241      	movs	r2, #65	; 0x41
 8002b32:	2120      	movs	r1, #32
 8002b34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2240      	movs	r2, #64	; 0x40
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e000      	b.n	8002b44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b42:	2302      	movs	r3, #2
  }
}
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b004      	add	sp, #16
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	fffff0ff 	.word	0xfffff0ff

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b5b0      	push	{r4, r5, r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d102      	bne.n	8002b64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f000 fb6c 	bl	800323c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b64:	4bc8      	ldr	r3, [pc, #800]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	220c      	movs	r2, #12
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b6e:	4bc6      	ldr	r3, [pc, #792]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	025b      	lsls	r3, r3, #9
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	4013      	ands	r3, r2
 8002b82:	d100      	bne.n	8002b86 <HAL_RCC_OscConfig+0x36>
 8002b84:	e07d      	b.n	8002c82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d007      	beq.n	8002b9c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	d112      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x68>
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	025b      	lsls	r3, r3, #9
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d10d      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	4bba      	ldr	r3, [pc, #744]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	029b      	lsls	r3, r3, #10
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d100      	bne.n	8002baa <HAL_RCC_OscConfig+0x5a>
 8002ba8:	e06a      	b.n	8002c80 <HAL_RCC_OscConfig+0x130>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d166      	bne.n	8002c80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f000 fb42 	bl	800323c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	025b      	lsls	r3, r3, #9
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d107      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x84>
 8002bc4:	4bb0      	ldr	r3, [pc, #704]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4baf      	ldr	r3, [pc, #700]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	0249      	lsls	r1, r1, #9
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e027      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	23a0      	movs	r3, #160	; 0xa0
 8002bda:	02db      	lsls	r3, r3, #11
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d10e      	bne.n	8002bfe <HAL_RCC_OscConfig+0xae>
 8002be0:	4ba9      	ldr	r3, [pc, #676]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4ba8      	ldr	r3, [pc, #672]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002be6:	2180      	movs	r1, #128	; 0x80
 8002be8:	02c9      	lsls	r1, r1, #11
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	4ba6      	ldr	r3, [pc, #664]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4ba5      	ldr	r3, [pc, #660]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	0249      	lsls	r1, r1, #9
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e012      	b.n	8002c24 <HAL_RCC_OscConfig+0xd4>
 8002bfe:	4ba2      	ldr	r3, [pc, #648]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4ba1      	ldr	r3, [pc, #644]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002c04:	49a1      	ldr	r1, [pc, #644]	; (8002e8c <HAL_RCC_OscConfig+0x33c>)
 8002c06:	400a      	ands	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	4b9f      	ldr	r3, [pc, #636]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	025b      	lsls	r3, r3, #9
 8002c12:	4013      	ands	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4b9b      	ldr	r3, [pc, #620]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b9a      	ldr	r3, [pc, #616]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002c1e:	499c      	ldr	r1, [pc, #624]	; (8002e90 <HAL_RCC_OscConfig+0x340>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d014      	beq.n	8002c56 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fcbe 	bl	80015ac <HAL_GetTick>
 8002c30:	0003      	movs	r3, r0
 8002c32:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c36:	f7fe fcb9 	bl	80015ac <HAL_GetTick>
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b64      	cmp	r3, #100	; 0x64
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e2f9      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c48:	4b8f      	ldr	r3, [pc, #572]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	029b      	lsls	r3, r3, #10
 8002c50:	4013      	ands	r3, r2
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0xe6>
 8002c54:	e015      	b.n	8002c82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe fca9 	bl	80015ac <HAL_GetTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe fca4 	bl	80015ac <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e2e4      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c72:	4b85      	ldr	r3, [pc, #532]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	029b      	lsls	r3, r3, #10
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x110>
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2202      	movs	r2, #2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d100      	bne.n	8002c8e <HAL_RCC_OscConfig+0x13e>
 8002c8c:	e099      	b.n	8002dc2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	2220      	movs	r2, #32
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d009      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002c9c:	4b7a      	ldr	r3, [pc, #488]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b79      	ldr	r3, [pc, #484]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002ca2:	2120      	movs	r1, #32
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	2220      	movs	r2, #32
 8002cac:	4393      	bics	r3, r2
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d005      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	2b0c      	cmp	r3, #12
 8002cba:	d13e      	bne.n	8002d3a <HAL_RCC_OscConfig+0x1ea>
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d13b      	bne.n	8002d3a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002cc2:	4b71      	ldr	r3, [pc, #452]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d004      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x186>
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e2b2      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd6:	4b6c      	ldr	r3, [pc, #432]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4a6e      	ldr	r2, [pc, #440]	; (8002e94 <HAL_RCC_OscConfig+0x344>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	021a      	lsls	r2, r3, #8
 8002ce6:	4b68      	ldr	r3, [pc, #416]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002cec:	4b66      	ldr	r3, [pc, #408]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2209      	movs	r2, #9
 8002cf2:	4393      	bics	r3, r2
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	4b64      	ldr	r3, [pc, #400]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cfe:	f000 fbeb 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8002d02:	0001      	movs	r1, r0
 8002d04:	4b60      	ldr	r3, [pc, #384]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	4a62      	ldr	r2, [pc, #392]	; (8002e98 <HAL_RCC_OscConfig+0x348>)
 8002d10:	5cd3      	ldrb	r3, [r2, r3]
 8002d12:	000a      	movs	r2, r1
 8002d14:	40da      	lsrs	r2, r3
 8002d16:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <HAL_RCC_OscConfig+0x34c>)
 8002d18:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002d1a:	4b61      	ldr	r3, [pc, #388]	; (8002ea0 <HAL_RCC_OscConfig+0x350>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2513      	movs	r5, #19
 8002d20:	197c      	adds	r4, r7, r5
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7fe fbfc 	bl	8001520 <HAL_InitTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002d2c:	197b      	adds	r3, r7, r5
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d046      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002d34:	197b      	adds	r3, r7, r5
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	e280      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d027      	beq.n	8002d90 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d40:	4b51      	ldr	r3, [pc, #324]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2209      	movs	r2, #9
 8002d46:	4393      	bics	r3, r2
 8002d48:	0019      	movs	r1, r3
 8002d4a:	4b4f      	ldr	r3, [pc, #316]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7fe fc2b 	bl	80015ac <HAL_GetTick>
 8002d56:	0003      	movs	r3, r0
 8002d58:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fc26 	bl	80015ac <HAL_GetTick>
 8002d60:	0002      	movs	r2, r0
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e266      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d6e:	4b46      	ldr	r3, [pc, #280]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2204      	movs	r2, #4
 8002d74:	4013      	ands	r3, r2
 8002d76:	d0f1      	beq.n	8002d5c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4a45      	ldr	r2, [pc, #276]	; (8002e94 <HAL_RCC_OscConfig+0x344>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	0019      	movs	r1, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	021a      	lsls	r2, r3, #8
 8002d88:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	e018      	b.n	8002dc2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d90:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b3c      	ldr	r3, [pc, #240]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002d96:	2101      	movs	r1, #1
 8002d98:	438a      	bics	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fc06 	bl	80015ac <HAL_GetTick>
 8002da0:	0003      	movs	r3, r0
 8002da2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da6:	f7fe fc01 	bl	80015ac <HAL_GetTick>
 8002daa:	0002      	movs	r2, r0
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e241      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002db8:	4b33      	ldr	r3, [pc, #204]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d1f1      	bne.n	8002da6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d100      	bne.n	8002dce <HAL_RCC_OscConfig+0x27e>
 8002dcc:	e0a1      	b.n	8002f12 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d140      	bne.n	8002e56 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_OscConfig+0x29c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e227      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dec:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4a2c      	ldr	r2, [pc, #176]	; (8002ea4 <HAL_RCC_OscConfig+0x354>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1a      	ldr	r2, [r3, #32]
 8002dfa:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e00:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	0a19      	lsrs	r1, r3, #8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	061a      	lsls	r2, r3, #24
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	0b5b      	lsrs	r3, r3, #13
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	2280      	movs	r2, #128	; 0x80
 8002e1e:	0212      	lsls	r2, r2, #8
 8002e20:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e22:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	210f      	movs	r1, #15
 8002e2a:	400b      	ands	r3, r1
 8002e2c:	491a      	ldr	r1, [pc, #104]	; (8002e98 <HAL_RCC_OscConfig+0x348>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_RCC_OscConfig+0x34c>)
 8002e34:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <HAL_RCC_OscConfig+0x350>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2513      	movs	r5, #19
 8002e3c:	197c      	adds	r4, r7, r5
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f7fe fb6e 	bl	8001520 <HAL_InitTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002e48:	197b      	adds	r3, r7, r5
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d060      	beq.n	8002f12 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002e50:	197b      	adds	r3, r7, r5
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	e1f2      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d03f      	beq.n	8002ede <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	0049      	lsls	r1, r1, #1
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fb9e 	bl	80015ac <HAL_GetTick>
 8002e70:	0003      	movs	r3, r0
 8002e72:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e74:	e018      	b.n	8002ea8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e76:	f7fe fb99 	bl	80015ac <HAL_GetTick>
 8002e7a:	0002      	movs	r2, r0
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d911      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e1d9      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	fffeffff 	.word	0xfffeffff
 8002e90:	fffbffff 	.word	0xfffbffff
 8002e94:	ffffe0ff 	.word	0xffffe0ff
 8002e98:	08005b58 	.word	0x08005b58
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	20000004 	.word	0x20000004
 8002ea4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ea8:	4bc9      	ldr	r3, [pc, #804]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d0e0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eb4:	4bc6      	ldr	r3, [pc, #792]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4ac6      	ldr	r2, [pc, #792]	; (80031d4 <HAL_RCC_OscConfig+0x684>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1a      	ldr	r2, [r3, #32]
 8002ec2:	4bc3      	ldr	r3, [pc, #780]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec8:	4bc1      	ldr	r3, [pc, #772]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	0a19      	lsrs	r1, r3, #8
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	061a      	lsls	r2, r3, #24
 8002ed6:	4bbe      	ldr	r3, [pc, #760]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	e019      	b.n	8002f12 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ede:	4bbc      	ldr	r3, [pc, #752]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4bbb      	ldr	r3, [pc, #748]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002ee4:	49bc      	ldr	r1, [pc, #752]	; (80031d8 <HAL_RCC_OscConfig+0x688>)
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7fe fb5f 	bl	80015ac <HAL_GetTick>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ef4:	f7fe fb5a 	bl	80015ac <HAL_GetTick>
 8002ef8:	0002      	movs	r2, r0
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e19a      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f06:	4bb2      	ldr	r3, [pc, #712]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2208      	movs	r2, #8
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d036      	beq.n	8002f8a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d019      	beq.n	8002f58 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f24:	4baa      	ldr	r3, [pc, #680]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002f26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f28:	4ba9      	ldr	r3, [pc, #676]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f30:	f7fe fb3c 	bl	80015ac <HAL_GetTick>
 8002f34:	0003      	movs	r3, r0
 8002f36:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3a:	f7fe fb37 	bl	80015ac <HAL_GetTick>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e177      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f4c:	4ba0      	ldr	r3, [pc, #640]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f50:	2202      	movs	r2, #2
 8002f52:	4013      	ands	r3, r2
 8002f54:	d0f1      	beq.n	8002f3a <HAL_RCC_OscConfig+0x3ea>
 8002f56:	e018      	b.n	8002f8a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f58:	4b9d      	ldr	r3, [pc, #628]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002f5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f5c:	4b9c      	ldr	r3, [pc, #624]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002f5e:	2101      	movs	r1, #1
 8002f60:	438a      	bics	r2, r1
 8002f62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f64:	f7fe fb22 	bl	80015ac <HAL_GetTick>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6e:	f7fe fb1d 	bl	80015ac <HAL_GetTick>
 8002f72:	0002      	movs	r2, r0
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e15d      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f80:	4b93      	ldr	r3, [pc, #588]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f84:	2202      	movs	r2, #2
 8002f86:	4013      	ands	r3, r2
 8002f88:	d1f1      	bne.n	8002f6e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2204      	movs	r2, #4
 8002f90:	4013      	ands	r3, r2
 8002f92:	d100      	bne.n	8002f96 <HAL_RCC_OscConfig+0x446>
 8002f94:	e0ae      	b.n	80030f4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f96:	2023      	movs	r0, #35	; 0x23
 8002f98:	183b      	adds	r3, r7, r0
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9e:	4b8c      	ldr	r3, [pc, #560]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	055b      	lsls	r3, r3, #21
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d109      	bne.n	8002fbe <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	4b89      	ldr	r3, [pc, #548]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fae:	4b88      	ldr	r3, [pc, #544]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	0549      	lsls	r1, r1, #21
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002fb8:	183b      	adds	r3, r7, r0
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbe:	4b87      	ldr	r3, [pc, #540]	; (80031dc <HAL_RCC_OscConfig+0x68c>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d11a      	bne.n	8003000 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fca:	4b84      	ldr	r3, [pc, #528]	; (80031dc <HAL_RCC_OscConfig+0x68c>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b83      	ldr	r3, [pc, #524]	; (80031dc <HAL_RCC_OscConfig+0x68c>)
 8002fd0:	2180      	movs	r1, #128	; 0x80
 8002fd2:	0049      	lsls	r1, r1, #1
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fae8 	bl	80015ac <HAL_GetTick>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7fe fae3 	bl	80015ac <HAL_GetTick>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b64      	cmp	r3, #100	; 0x64
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e123      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	4b79      	ldr	r3, [pc, #484]	; (80031dc <HAL_RCC_OscConfig+0x68c>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	429a      	cmp	r2, r3
 800300a:	d107      	bne.n	800301c <HAL_RCC_OscConfig+0x4cc>
 800300c:	4b70      	ldr	r3, [pc, #448]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 800300e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003010:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	0049      	lsls	r1, r1, #1
 8003016:	430a      	orrs	r2, r1
 8003018:	651a      	str	r2, [r3, #80]	; 0x50
 800301a:	e031      	b.n	8003080 <HAL_RCC_OscConfig+0x530>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10c      	bne.n	800303e <HAL_RCC_OscConfig+0x4ee>
 8003024:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8003026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003028:	4b69      	ldr	r3, [pc, #420]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 800302a:	496b      	ldr	r1, [pc, #428]	; (80031d8 <HAL_RCC_OscConfig+0x688>)
 800302c:	400a      	ands	r2, r1
 800302e:	651a      	str	r2, [r3, #80]	; 0x50
 8003030:	4b67      	ldr	r3, [pc, #412]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8003032:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003034:	4b66      	ldr	r3, [pc, #408]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8003036:	496a      	ldr	r1, [pc, #424]	; (80031e0 <HAL_RCC_OscConfig+0x690>)
 8003038:	400a      	ands	r2, r1
 800303a:	651a      	str	r2, [r3, #80]	; 0x50
 800303c:	e020      	b.n	8003080 <HAL_RCC_OscConfig+0x530>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	23a0      	movs	r3, #160	; 0xa0
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	429a      	cmp	r2, r3
 8003048:	d10e      	bne.n	8003068 <HAL_RCC_OscConfig+0x518>
 800304a:	4b61      	ldr	r3, [pc, #388]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 800304c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800304e:	4b60      	ldr	r3, [pc, #384]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8003050:	2180      	movs	r1, #128	; 0x80
 8003052:	00c9      	lsls	r1, r1, #3
 8003054:	430a      	orrs	r2, r1
 8003056:	651a      	str	r2, [r3, #80]	; 0x50
 8003058:	4b5d      	ldr	r3, [pc, #372]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 800305a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800305c:	4b5c      	ldr	r3, [pc, #368]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 800305e:	2180      	movs	r1, #128	; 0x80
 8003060:	0049      	lsls	r1, r1, #1
 8003062:	430a      	orrs	r2, r1
 8003064:	651a      	str	r2, [r3, #80]	; 0x50
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0x530>
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 800306a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800306c:	4b58      	ldr	r3, [pc, #352]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 800306e:	495a      	ldr	r1, [pc, #360]	; (80031d8 <HAL_RCC_OscConfig+0x688>)
 8003070:	400a      	ands	r2, r1
 8003072:	651a      	str	r2, [r3, #80]	; 0x50
 8003074:	4b56      	ldr	r3, [pc, #344]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8003076:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003078:	4b55      	ldr	r3, [pc, #340]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 800307a:	4959      	ldr	r1, [pc, #356]	; (80031e0 <HAL_RCC_OscConfig+0x690>)
 800307c:	400a      	ands	r2, r1
 800307e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d015      	beq.n	80030b4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003088:	f7fe fa90 	bl	80015ac <HAL_GetTick>
 800308c:	0003      	movs	r3, r0
 800308e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003090:	e009      	b.n	80030a6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe fa8b 	bl	80015ac <HAL_GetTick>
 8003096:	0002      	movs	r2, r0
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	4a51      	ldr	r2, [pc, #324]	; (80031e4 <HAL_RCC_OscConfig+0x694>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0ca      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030a6:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 80030a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4013      	ands	r3, r2
 80030b0:	d0ef      	beq.n	8003092 <HAL_RCC_OscConfig+0x542>
 80030b2:	e014      	b.n	80030de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b4:	f7fe fa7a 	bl	80015ac <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030bc:	e009      	b.n	80030d2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fe fa75 	bl	80015ac <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	4a46      	ldr	r2, [pc, #280]	; (80031e4 <HAL_RCC_OscConfig+0x694>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0b4      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030d2:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 80030d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	d1ef      	bne.n	80030be <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030de:	2323      	movs	r3, #35	; 0x23
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e8:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 80030ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ec:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 80030ee:	493e      	ldr	r1, [pc, #248]	; (80031e8 <HAL_RCC_OscConfig+0x698>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d100      	bne.n	80030fe <HAL_RCC_OscConfig+0x5ae>
 80030fc:	e09d      	b.n	800323a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2b0c      	cmp	r3, #12
 8003102:	d100      	bne.n	8003106 <HAL_RCC_OscConfig+0x5b6>
 8003104:	e076      	b.n	80031f4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	2b02      	cmp	r3, #2
 800310c:	d145      	bne.n	800319a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8003114:	4935      	ldr	r1, [pc, #212]	; (80031ec <HAL_RCC_OscConfig+0x69c>)
 8003116:	400a      	ands	r2, r1
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311a:	f7fe fa47 	bl	80015ac <HAL_GetTick>
 800311e:	0003      	movs	r3, r0
 8003120:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003124:	f7fe fa42 	bl	80015ac <HAL_GetTick>
 8003128:	0002      	movs	r2, r0
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e082      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003136:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	049b      	lsls	r3, r3, #18
 800313e:	4013      	ands	r3, r2
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	4a2a      	ldr	r2, [pc, #168]	; (80031f0 <HAL_RCC_OscConfig+0x6a0>)
 8003148:	4013      	ands	r3, r2
 800314a:	0019      	movs	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	431a      	orrs	r2, r3
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 800315e:	430a      	orrs	r2, r1
 8003160:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 8003168:	2180      	movs	r1, #128	; 0x80
 800316a:	0449      	lsls	r1, r1, #17
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe fa1c 	bl	80015ac <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317a:	f7fe fa17 	bl	80015ac <HAL_GetTick>
 800317e:	0002      	movs	r2, r0
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e057      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800318c:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	049b      	lsls	r3, r3, #18
 8003194:	4013      	ands	r3, r2
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x62a>
 8003198:	e04f      	b.n	800323a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 80031a0:	4912      	ldr	r1, [pc, #72]	; (80031ec <HAL_RCC_OscConfig+0x69c>)
 80031a2:	400a      	ands	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fe fa01 	bl	80015ac <HAL_GetTick>
 80031aa:	0003      	movs	r3, r0
 80031ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe f9fc 	bl	80015ac <HAL_GetTick>
 80031b4:	0002      	movs	r2, r0
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e03c      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031c2:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <HAL_RCC_OscConfig+0x680>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	2380      	movs	r3, #128	; 0x80
 80031c8:	049b      	lsls	r3, r3, #18
 80031ca:	4013      	ands	r3, r2
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x660>
 80031ce:	e034      	b.n	800323a <HAL_RCC_OscConfig+0x6ea>
 80031d0:	40021000 	.word	0x40021000
 80031d4:	ffff1fff 	.word	0xffff1fff
 80031d8:	fffffeff 	.word	0xfffffeff
 80031dc:	40007000 	.word	0x40007000
 80031e0:	fffffbff 	.word	0xfffffbff
 80031e4:	00001388 	.word	0x00001388
 80031e8:	efffffff 	.word	0xefffffff
 80031ec:	feffffff 	.word	0xfeffffff
 80031f0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e01d      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003200:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_RCC_OscConfig+0x6f4>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	025b      	lsls	r3, r3, #9
 800320c:	401a      	ands	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	429a      	cmp	r2, r3
 8003214:	d10f      	bne.n	8003236 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	23f0      	movs	r3, #240	; 0xf0
 800321a:	039b      	lsls	r3, r3, #14
 800321c:	401a      	ands	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d107      	bne.n	8003236 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	23c0      	movs	r3, #192	; 0xc0
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	401a      	ands	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d001      	beq.n	800323a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b00a      	add	sp, #40	; 0x28
 8003242:	bdb0      	pop	{r4, r5, r7, pc}
 8003244:	40021000 	.word	0x40021000

08003248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b5b0      	push	{r4, r5, r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e128      	b.n	80034ae <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b96      	ldr	r3, [pc, #600]	; (80034b8 <HAL_RCC_ClockConfig+0x270>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2201      	movs	r2, #1
 8003262:	4013      	ands	r3, r2
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d91e      	bls.n	80032a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b93      	ldr	r3, [pc, #588]	; (80034b8 <HAL_RCC_ClockConfig+0x270>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2201      	movs	r2, #1
 8003270:	4393      	bics	r3, r2
 8003272:	0019      	movs	r1, r3
 8003274:	4b90      	ldr	r3, [pc, #576]	; (80034b8 <HAL_RCC_ClockConfig+0x270>)
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800327c:	f7fe f996 	bl	80015ac <HAL_GetTick>
 8003280:	0003      	movs	r3, r0
 8003282:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003284:	e009      	b.n	800329a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003286:	f7fe f991 	bl	80015ac <HAL_GetTick>
 800328a:	0002      	movs	r2, r0
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	4a8a      	ldr	r2, [pc, #552]	; (80034bc <HAL_RCC_ClockConfig+0x274>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e109      	b.n	80034ae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b87      	ldr	r3, [pc, #540]	; (80034b8 <HAL_RCC_ClockConfig+0x270>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	4013      	ands	r3, r2
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1ee      	bne.n	8003286 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2202      	movs	r2, #2
 80032ae:	4013      	ands	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b2:	4b83      	ldr	r3, [pc, #524]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	22f0      	movs	r2, #240	; 0xf0
 80032b8:	4393      	bics	r3, r2
 80032ba:	0019      	movs	r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	4b7f      	ldr	r3, [pc, #508]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 80032c2:	430a      	orrs	r2, r1
 80032c4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2201      	movs	r2, #1
 80032cc:	4013      	ands	r3, r2
 80032ce:	d100      	bne.n	80032d2 <HAL_RCC_ClockConfig+0x8a>
 80032d0:	e089      	b.n	80033e6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032da:	4b79      	ldr	r3, [pc, #484]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	029b      	lsls	r3, r3, #10
 80032e2:	4013      	ands	r3, r2
 80032e4:	d120      	bne.n	8003328 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0e1      	b.n	80034ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032f2:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	049b      	lsls	r3, r3, #18
 80032fa:	4013      	ands	r3, r2
 80032fc:	d114      	bne.n	8003328 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0d5      	b.n	80034ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d106      	bne.n	8003318 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800330a:	4b6d      	ldr	r3, [pc, #436]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2204      	movs	r2, #4
 8003310:	4013      	ands	r3, r2
 8003312:	d109      	bne.n	8003328 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0ca      	b.n	80034ae <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003318:	4b69      	ldr	r3, [pc, #420]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4013      	ands	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0c2      	b.n	80034ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003328:	4b65      	ldr	r3, [pc, #404]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2203      	movs	r2, #3
 800332e:	4393      	bics	r3, r2
 8003330:	0019      	movs	r1, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4b62      	ldr	r3, [pc, #392]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 8003338:	430a      	orrs	r2, r1
 800333a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333c:	f7fe f936 	bl	80015ac <HAL_GetTick>
 8003340:	0003      	movs	r3, r0
 8003342:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d111      	bne.n	8003370 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800334c:	e009      	b.n	8003362 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334e:	f7fe f92d 	bl	80015ac <HAL_GetTick>
 8003352:	0002      	movs	r2, r0
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	4a58      	ldr	r2, [pc, #352]	; (80034bc <HAL_RCC_ClockConfig+0x274>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0a5      	b.n	80034ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003362:	4b57      	ldr	r3, [pc, #348]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	220c      	movs	r2, #12
 8003368:	4013      	ands	r3, r2
 800336a:	2b08      	cmp	r3, #8
 800336c:	d1ef      	bne.n	800334e <HAL_RCC_ClockConfig+0x106>
 800336e:	e03a      	b.n	80033e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d111      	bne.n	800339c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003378:	e009      	b.n	800338e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337a:	f7fe f917 	bl	80015ac <HAL_GetTick>
 800337e:	0002      	movs	r2, r0
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	4a4d      	ldr	r2, [pc, #308]	; (80034bc <HAL_RCC_ClockConfig+0x274>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e08f      	b.n	80034ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800338e:	4b4c      	ldr	r3, [pc, #304]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	220c      	movs	r2, #12
 8003394:	4013      	ands	r3, r2
 8003396:	2b0c      	cmp	r3, #12
 8003398:	d1ef      	bne.n	800337a <HAL_RCC_ClockConfig+0x132>
 800339a:	e024      	b.n	80033e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d11b      	bne.n	80033dc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033a4:	e009      	b.n	80033ba <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a6:	f7fe f901 	bl	80015ac <HAL_GetTick>
 80033aa:	0002      	movs	r2, r0
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	4a42      	ldr	r2, [pc, #264]	; (80034bc <HAL_RCC_ClockConfig+0x274>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e079      	b.n	80034ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ba:	4b41      	ldr	r3, [pc, #260]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	220c      	movs	r2, #12
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d1ef      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x15e>
 80033c6:	e00e      	b.n	80033e6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7fe f8f0 	bl	80015ac <HAL_GetTick>
 80033cc:	0002      	movs	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	4a3a      	ldr	r2, [pc, #232]	; (80034bc <HAL_RCC_ClockConfig+0x274>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e068      	b.n	80034ae <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033dc:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	220c      	movs	r2, #12
 80033e2:	4013      	ands	r3, r2
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033e6:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <HAL_RCC_ClockConfig+0x270>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2201      	movs	r2, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d21e      	bcs.n	8003432 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f4:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <HAL_RCC_ClockConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2201      	movs	r2, #1
 80033fa:	4393      	bics	r3, r2
 80033fc:	0019      	movs	r1, r3
 80033fe:	4b2e      	ldr	r3, [pc, #184]	; (80034b8 <HAL_RCC_ClockConfig+0x270>)
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003406:	f7fe f8d1 	bl	80015ac <HAL_GetTick>
 800340a:	0003      	movs	r3, r0
 800340c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	e009      	b.n	8003424 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003410:	f7fe f8cc 	bl	80015ac <HAL_GetTick>
 8003414:	0002      	movs	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	4a28      	ldr	r2, [pc, #160]	; (80034bc <HAL_RCC_ClockConfig+0x274>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e044      	b.n	80034ae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_RCC_ClockConfig+0x270>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2201      	movs	r2, #1
 800342a:	4013      	ands	r3, r2
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d1ee      	bne.n	8003410 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2204      	movs	r2, #4
 8003438:	4013      	ands	r3, r2
 800343a:	d009      	beq.n	8003450 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a20      	ldr	r2, [pc, #128]	; (80034c4 <HAL_RCC_ClockConfig+0x27c>)
 8003442:	4013      	ands	r3, r2
 8003444:	0019      	movs	r1, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 800344c:	430a      	orrs	r2, r1
 800344e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2208      	movs	r2, #8
 8003456:	4013      	ands	r3, r2
 8003458:	d00a      	beq.n	8003470 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800345a:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	4a1a      	ldr	r2, [pc, #104]	; (80034c8 <HAL_RCC_ClockConfig+0x280>)
 8003460:	4013      	ands	r3, r2
 8003462:	0019      	movs	r1, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	00da      	lsls	r2, r3, #3
 800346a:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 800346c:	430a      	orrs	r2, r1
 800346e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003470:	f000 f832 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003474:	0001      	movs	r1, r0
 8003476:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_RCC_ClockConfig+0x278>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	220f      	movs	r2, #15
 800347e:	4013      	ands	r3, r2
 8003480:	4a12      	ldr	r2, [pc, #72]	; (80034cc <HAL_RCC_ClockConfig+0x284>)
 8003482:	5cd3      	ldrb	r3, [r2, r3]
 8003484:	000a      	movs	r2, r1
 8003486:	40da      	lsrs	r2, r3
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_RCC_ClockConfig+0x288>)
 800348a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <HAL_RCC_ClockConfig+0x28c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	250b      	movs	r5, #11
 8003492:	197c      	adds	r4, r7, r5
 8003494:	0018      	movs	r0, r3
 8003496:	f7fe f843 	bl	8001520 <HAL_InitTick>
 800349a:	0003      	movs	r3, r0
 800349c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800349e:	197b      	adds	r3, r7, r5
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80034a6:	197b      	adds	r3, r7, r5
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	e000      	b.n	80034ae <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bdb0      	pop	{r4, r5, r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	40022000 	.word	0x40022000
 80034bc:	00001388 	.word	0x00001388
 80034c0:	40021000 	.word	0x40021000
 80034c4:	fffff8ff 	.word	0xfffff8ff
 80034c8:	ffffc7ff 	.word	0xffffc7ff
 80034cc:	08005b58 	.word	0x08005b58
 80034d0:	20000000 	.word	0x20000000
 80034d4:	20000004 	.word	0x20000004

080034d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	b5b0      	push	{r4, r5, r7, lr}
 80034da:	b08e      	sub	sp, #56	; 0x38
 80034dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80034de:	4b4c      	ldr	r3, [pc, #304]	; (8003610 <HAL_RCC_GetSysClockFreq+0x138>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e6:	230c      	movs	r3, #12
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d014      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x40>
 80034ee:	d900      	bls.n	80034f2 <HAL_RCC_GetSysClockFreq+0x1a>
 80034f0:	e07b      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x112>
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d002      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0x24>
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d00b      	beq.n	8003512 <HAL_RCC_GetSysClockFreq+0x3a>
 80034fa:	e076      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034fc:	4b44      	ldr	r3, [pc, #272]	; (8003610 <HAL_RCC_GetSysClockFreq+0x138>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2210      	movs	r2, #16
 8003502:	4013      	ands	r3, r2
 8003504:	d002      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003506:	4b43      	ldr	r3, [pc, #268]	; (8003614 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003508:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800350a:	e07c      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800350c:	4b42      	ldr	r3, [pc, #264]	; (8003618 <HAL_RCC_GetSysClockFreq+0x140>)
 800350e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003510:	e079      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003512:	4b42      	ldr	r3, [pc, #264]	; (800361c <HAL_RCC_GetSysClockFreq+0x144>)
 8003514:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003516:	e076      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351a:	0c9a      	lsrs	r2, r3, #18
 800351c:	230f      	movs	r3, #15
 800351e:	401a      	ands	r2, r3
 8003520:	4b3f      	ldr	r3, [pc, #252]	; (8003620 <HAL_RCC_GetSysClockFreq+0x148>)
 8003522:	5c9b      	ldrb	r3, [r3, r2]
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	0d9a      	lsrs	r2, r3, #22
 800352a:	2303      	movs	r3, #3
 800352c:	4013      	ands	r3, r2
 800352e:	3301      	adds	r3, #1
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003532:	4b37      	ldr	r3, [pc, #220]	; (8003610 <HAL_RCC_GetSysClockFreq+0x138>)
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	025b      	lsls	r3, r3, #9
 800353a:	4013      	ands	r3, r2
 800353c:	d01a      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	4a35      	ldr	r2, [pc, #212]	; (800361c <HAL_RCC_GetSysClockFreq+0x144>)
 8003548:	2300      	movs	r3, #0
 800354a:	69b8      	ldr	r0, [r7, #24]
 800354c:	69f9      	ldr	r1, [r7, #28]
 800354e:	f7fc fed3 	bl	80002f8 <__aeabi_lmul>
 8003552:	0002      	movs	r2, r0
 8003554:	000b      	movs	r3, r1
 8003556:	0010      	movs	r0, r2
 8003558:	0019      	movs	r1, r3
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f7fc fea7 	bl	80002b8 <__aeabi_uldivmod>
 800356a:	0002      	movs	r2, r0
 800356c:	000b      	movs	r3, r1
 800356e:	0013      	movs	r3, r2
 8003570:	637b      	str	r3, [r7, #52]	; 0x34
 8003572:	e037      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003574:	4b26      	ldr	r3, [pc, #152]	; (8003610 <HAL_RCC_GetSysClockFreq+0x138>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2210      	movs	r2, #16
 800357a:	4013      	ands	r3, r2
 800357c:	d01a      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	4a23      	ldr	r2, [pc, #140]	; (8003614 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003588:	2300      	movs	r3, #0
 800358a:	68b8      	ldr	r0, [r7, #8]
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	f7fc feb3 	bl	80002f8 <__aeabi_lmul>
 8003592:	0002      	movs	r2, r0
 8003594:	000b      	movs	r3, r1
 8003596:	0010      	movs	r0, r2
 8003598:	0019      	movs	r1, r3
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f7fc fe87 	bl	80002b8 <__aeabi_uldivmod>
 80035aa:	0002      	movs	r2, r0
 80035ac:	000b      	movs	r3, r1
 80035ae:	0013      	movs	r3, r2
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
 80035b2:	e017      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	0018      	movs	r0, r3
 80035b8:	2300      	movs	r3, #0
 80035ba:	0019      	movs	r1, r3
 80035bc:	4a16      	ldr	r2, [pc, #88]	; (8003618 <HAL_RCC_GetSysClockFreq+0x140>)
 80035be:	2300      	movs	r3, #0
 80035c0:	f7fc fe9a 	bl	80002f8 <__aeabi_lmul>
 80035c4:	0002      	movs	r2, r0
 80035c6:	000b      	movs	r3, r1
 80035c8:	0010      	movs	r0, r2
 80035ca:	0019      	movs	r1, r3
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	001c      	movs	r4, r3
 80035d0:	2300      	movs	r3, #0
 80035d2:	001d      	movs	r5, r3
 80035d4:	0022      	movs	r2, r4
 80035d6:	002b      	movs	r3, r5
 80035d8:	f7fc fe6e 	bl	80002b8 <__aeabi_uldivmod>
 80035dc:	0002      	movs	r2, r0
 80035de:	000b      	movs	r3, r1
 80035e0:	0013      	movs	r3, r2
 80035e2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80035e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035e8:	e00d      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_RCC_GetSysClockFreq+0x138>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	0b5b      	lsrs	r3, r3, #13
 80035f0:	2207      	movs	r2, #7
 80035f2:	4013      	ands	r3, r2
 80035f4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	3301      	adds	r3, #1
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	0212      	lsls	r2, r2, #8
 80035fe:	409a      	lsls	r2, r3
 8003600:	0013      	movs	r3, r2
 8003602:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003604:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b00e      	add	sp, #56	; 0x38
 800360e:	bdb0      	pop	{r4, r5, r7, pc}
 8003610:	40021000 	.word	0x40021000
 8003614:	003d0900 	.word	0x003d0900
 8003618:	00f42400 	.word	0x00f42400
 800361c:	007a1200 	.word	0x007a1200
 8003620:	08005b70 	.word	0x08005b70

08003624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003628:	4b02      	ldr	r3, [pc, #8]	; (8003634 <HAL_RCC_GetHCLKFreq+0x10>)
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	20000000 	.word	0x20000000

08003638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800363c:	f7ff fff2 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8003640:	0001      	movs	r1, r0
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	2207      	movs	r2, #7
 800364a:	4013      	ands	r3, r2
 800364c:	4a04      	ldr	r2, [pc, #16]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x28>)
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	40d9      	lsrs	r1, r3
 8003652:	000b      	movs	r3, r1
}
 8003654:	0018      	movs	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	40021000 	.word	0x40021000
 8003660:	08005b68 	.word	0x08005b68

08003664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003668:	f7ff ffdc 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 800366c:	0001      	movs	r1, r0
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	0adb      	lsrs	r3, r3, #11
 8003674:	2207      	movs	r2, #7
 8003676:	4013      	ands	r3, r2
 8003678:	4a04      	ldr	r2, [pc, #16]	; (800368c <HAL_RCC_GetPCLK2Freq+0x28>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	40d9      	lsrs	r1, r3
 800367e:	000b      	movs	r3, r1
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	40021000 	.word	0x40021000
 800368c:	08005b68 	.word	0x08005b68

08003690 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003698:	2017      	movs	r0, #23
 800369a:	183b      	adds	r3, r7, r0
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2220      	movs	r2, #32
 80036a6:	4013      	ands	r3, r2
 80036a8:	d100      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80036aa:	e0c2      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ac:	4b81      	ldr	r3, [pc, #516]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80036ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b0:	2380      	movs	r3, #128	; 0x80
 80036b2:	055b      	lsls	r3, r3, #21
 80036b4:	4013      	ands	r3, r2
 80036b6:	d109      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b8:	4b7e      	ldr	r3, [pc, #504]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80036ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036bc:	4b7d      	ldr	r3, [pc, #500]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80036be:	2180      	movs	r1, #128	; 0x80
 80036c0:	0549      	lsls	r1, r1, #21
 80036c2:	430a      	orrs	r2, r1
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80036c6:	183b      	adds	r3, r7, r0
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036cc:	4b7a      	ldr	r3, [pc, #488]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4013      	ands	r3, r2
 80036d6:	d11a      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d8:	4b77      	ldr	r3, [pc, #476]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b76      	ldr	r3, [pc, #472]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80036de:	2180      	movs	r1, #128	; 0x80
 80036e0:	0049      	lsls	r1, r1, #1
 80036e2:	430a      	orrs	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e6:	f7fd ff61 	bl	80015ac <HAL_GetTick>
 80036ea:	0003      	movs	r3, r0
 80036ec:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ee:	e008      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f0:	f7fd ff5c 	bl	80015ac <HAL_GetTick>
 80036f4:	0002      	movs	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	; 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0d4      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	4b6d      	ldr	r3, [pc, #436]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4013      	ands	r3, r2
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800370e:	4b69      	ldr	r3, [pc, #420]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	23c0      	movs	r3, #192	; 0xc0
 8003714:	039b      	lsls	r3, r3, #14
 8003716:	4013      	ands	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	23c0      	movs	r3, #192	; 0xc0
 8003720:	039b      	lsls	r3, r3, #14
 8003722:	4013      	ands	r3, r2
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	429a      	cmp	r2, r3
 8003728:	d013      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	23c0      	movs	r3, #192	; 0xc0
 8003730:	029b      	lsls	r3, r3, #10
 8003732:	401a      	ands	r2, r3
 8003734:	23c0      	movs	r3, #192	; 0xc0
 8003736:	029b      	lsls	r3, r3, #10
 8003738:	429a      	cmp	r2, r3
 800373a:	d10a      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800373c:	4b5d      	ldr	r3, [pc, #372]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	029b      	lsls	r3, r3, #10
 8003744:	401a      	ands	r2, r3
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	029b      	lsls	r3, r3, #10
 800374a:	429a      	cmp	r2, r3
 800374c:	d101      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0ac      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003752:	4b58      	ldr	r3, [pc, #352]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003756:	23c0      	movs	r3, #192	; 0xc0
 8003758:	029b      	lsls	r3, r3, #10
 800375a:	4013      	ands	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d03b      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	23c0      	movs	r3, #192	; 0xc0
 800376a:	029b      	lsls	r3, r3, #10
 800376c:	4013      	ands	r3, r2
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	429a      	cmp	r2, r3
 8003772:	d033      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2220      	movs	r2, #32
 800377a:	4013      	ands	r3, r2
 800377c:	d02e      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800377e:	4b4d      	ldr	r3, [pc, #308]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003782:	4a4e      	ldr	r2, [pc, #312]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003784:	4013      	ands	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003788:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800378a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800378c:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	0309      	lsls	r1, r1, #12
 8003792:	430a      	orrs	r2, r1
 8003794:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003796:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003798:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800379a:	4b46      	ldr	r3, [pc, #280]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800379c:	4948      	ldr	r1, [pc, #288]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800379e:	400a      	ands	r2, r1
 80037a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80037a2:	4b44      	ldr	r3, [pc, #272]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	2380      	movs	r3, #128	; 0x80
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4013      	ands	r3, r2
 80037b0:	d014      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fd fefb 	bl	80015ac <HAL_GetTick>
 80037b6:	0003      	movs	r3, r0
 80037b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037ba:	e009      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f7fd fef6 	bl	80015ac <HAL_GetTick>
 80037c0:	0002      	movs	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	4a3f      	ldr	r2, [pc, #252]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e06d      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037d0:	4b38      	ldr	r3, [pc, #224]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	d0ef      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	23c0      	movs	r3, #192	; 0xc0
 80037e2:	029b      	lsls	r3, r3, #10
 80037e4:	401a      	ands	r2, r3
 80037e6:	23c0      	movs	r3, #192	; 0xc0
 80037e8:	029b      	lsls	r3, r3, #10
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d10c      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80037ee:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a35      	ldr	r2, [pc, #212]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	0019      	movs	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	23c0      	movs	r3, #192	; 0xc0
 80037fe:	039b      	lsls	r3, r3, #14
 8003800:	401a      	ands	r2, r3
 8003802:	4b2c      	ldr	r3, [pc, #176]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800380a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	23c0      	movs	r3, #192	; 0xc0
 8003812:	029b      	lsls	r3, r3, #10
 8003814:	401a      	ands	r2, r3
 8003816:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003818:	430a      	orrs	r2, r1
 800381a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800381c:	2317      	movs	r3, #23
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003826:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800382a:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800382c:	4927      	ldr	r1, [pc, #156]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800382e:	400a      	ands	r2, r1
 8003830:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2202      	movs	r2, #2
 8003838:	4013      	ands	r3, r2
 800383a:	d009      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800383e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003840:	220c      	movs	r2, #12
 8003842:	4393      	bics	r3, r2
 8003844:	0019      	movs	r1, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800384c:	430a      	orrs	r2, r1
 800384e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2204      	movs	r2, #4
 8003856:	4013      	ands	r3, r2
 8003858:	d009      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800385a:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	4a1c      	ldr	r2, [pc, #112]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003860:	4013      	ands	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800386a:	430a      	orrs	r2, r1
 800386c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2208      	movs	r2, #8
 8003874:	4013      	ands	r3, r2
 8003876:	d009      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003878:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800387a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387c:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800387e:	4013      	ands	r3, r2
 8003880:	0019      	movs	r1, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003888:	430a      	orrs	r2, r1
 800388a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2280      	movs	r2, #128	; 0x80
 8003892:	4013      	ands	r3, r2
 8003894:	d009      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003896:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389a:	4a0f      	ldr	r2, [pc, #60]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800389c:	4013      	ands	r3, r2
 800389e:	0019      	movs	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80038a6:	430a      	orrs	r2, r1
 80038a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b006      	add	sp, #24
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40007000 	.word	0x40007000
 80038bc:	fffcffff 	.word	0xfffcffff
 80038c0:	fff7ffff 	.word	0xfff7ffff
 80038c4:	00001388 	.word	0x00001388
 80038c8:	ffcfffff 	.word	0xffcfffff
 80038cc:	efffffff 	.word	0xefffffff
 80038d0:	fffff3ff 	.word	0xfffff3ff
 80038d4:	ffffcfff 	.word	0xffffcfff
 80038d8:	fff3ffff 	.word	0xfff3ffff

080038dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e08e      	b.n	8003a0c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2221      	movs	r2, #33	; 0x21
 80038f2:	5c9b      	ldrb	r3, [r3, r2]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d107      	bne.n	800390a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	2100      	movs	r1, #0
 8003900:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	0018      	movs	r0, r3
 8003906:	f7fd fd0f 	bl	8001328 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2221      	movs	r2, #33	; 0x21
 800390e:	2102      	movs	r1, #2
 8003910:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	22ca      	movs	r2, #202	; 0xca
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2253      	movs	r2, #83	; 0x53
 8003920:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	0018      	movs	r0, r3
 8003926:	f000 faba 	bl	8003e9e <RTC_EnterInitMode>
 800392a:	1e03      	subs	r3, r0, #0
 800392c:	d009      	beq.n	8003942 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	22ff      	movs	r2, #255	; 0xff
 8003934:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2221      	movs	r2, #33	; 0x21
 800393a:	2104      	movs	r1, #4
 800393c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e064      	b.n	8003a0c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4931      	ldr	r1, [pc, #196]	; (8003a14 <HAL_RTC_Init+0x138>)
 800394e:	400a      	ands	r2, r1
 8003950:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68d2      	ldr	r2, [r2, #12]
 8003978:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6919      	ldr	r1, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	041a      	lsls	r2, r3, #16
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2180      	movs	r1, #128	; 0x80
 800399a:	438a      	bics	r2, r1
 800399c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2103      	movs	r1, #3
 80039aa:	438a      	bics	r2, r1
 80039ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69da      	ldr	r2, [r3, #28]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2220      	movs	r2, #32
 80039ce:	4013      	ands	r3, r2
 80039d0:	d113      	bne.n	80039fa <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	0018      	movs	r0, r3
 80039d6:	f000 fa3b 	bl	8003e50 <HAL_RTC_WaitForSynchro>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d00d      	beq.n	80039fa <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	22ff      	movs	r2, #255	; 0xff
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2221      	movs	r2, #33	; 0x21
 80039ea:	2104      	movs	r1, #4
 80039ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	2100      	movs	r1, #0
 80039f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e008      	b.n	8003a0c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	22ff      	movs	r2, #255	; 0xff
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2221      	movs	r2, #33	; 0x21
 8003a06:	2101      	movs	r1, #1
 8003a08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
  }
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b002      	add	sp, #8
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	ff8fffbf 	.word	0xff8fffbf

08003a18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	5c9b      	ldrb	r3, [r3, r2]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_RTC_SetTime+0x1a>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e0ad      	b.n	8003b8e <HAL_RTC_SetTime+0x176>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	2101      	movs	r1, #1
 8003a38:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2221      	movs	r2, #33	; 0x21
 8003a3e:	2102      	movs	r1, #2
 8003a40:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d125      	bne.n	8003a94 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2240      	movs	r2, #64	; 0x40
 8003a50:	4013      	ands	r3, r2
 8003a52:	d102      	bne.n	8003a5a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2200      	movs	r2, #0
 8003a58:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f000 fa47 	bl	8003ef2 <RTC_ByteToBcd2>
 8003a64:	0003      	movs	r3, r0
 8003a66:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	785b      	ldrb	r3, [r3, #1]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f000 fa40 	bl	8003ef2 <RTC_ByteToBcd2>
 8003a72:	0003      	movs	r3, r0
 8003a74:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a76:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	789b      	ldrb	r3, [r3, #2]
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f000 fa38 	bl	8003ef2 <RTC_ByteToBcd2>
 8003a82:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003a84:	0022      	movs	r2, r4
 8003a86:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	78db      	ldrb	r3, [r3, #3]
 8003a8c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	e017      	b.n	8003ac4 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2240      	movs	r2, #64	; 0x40
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d102      	bne.n	8003aa6 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	785b      	ldrb	r3, [r3, #1]
 8003ab0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003ab2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003ab8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	78db      	ldrb	r3, [r3, #3]
 8003abe:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	22ca      	movs	r2, #202	; 0xca
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2253      	movs	r2, #83	; 0x53
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f000 f9e1 	bl	8003e9e <RTC_EnterInitMode>
 8003adc:	1e03      	subs	r3, r0, #0
 8003ade:	d00d      	beq.n	8003afc <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	22ff      	movs	r2, #255	; 0xff
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2221      	movs	r2, #33	; 0x21
 8003aec:	2104      	movs	r1, #4
 8003aee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	2100      	movs	r1, #0
 8003af6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e048      	b.n	8003b8e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4925      	ldr	r1, [pc, #148]	; (8003b98 <HAL_RTC_SetTime+0x180>)
 8003b04:	400a      	ands	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4922      	ldr	r1, [pc, #136]	; (8003b9c <HAL_RTC_SetTime+0x184>)
 8003b14:	400a      	ands	r2, r1
 8003b16:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6899      	ldr	r1, [r3, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2180      	movs	r1, #128	; 0x80
 8003b3c:	438a      	bics	r2, r1
 8003b3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2220      	movs	r2, #32
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d113      	bne.n	8003b74 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 f97e 	bl	8003e50 <HAL_RTC_WaitForSynchro>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d00d      	beq.n	8003b74 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	22ff      	movs	r2, #255	; 0xff
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2221      	movs	r2, #33	; 0x21
 8003b64:	2104      	movs	r1, #4
 8003b66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e00c      	b.n	8003b8e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	22ff      	movs	r2, #255	; 0xff
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2221      	movs	r2, #33	; 0x21
 8003b80:	2101      	movs	r1, #1
 8003b82:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
  }
}
 8003b8e:	0018      	movs	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b007      	add	sp, #28
 8003b94:	bd90      	pop	{r4, r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	007f7f7f 	.word	0x007f7f7f
 8003b9c:	fffbffff 	.word	0xfffbffff

08003ba0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	045b      	lsls	r3, r3, #17
 8003bbe:	0c5a      	lsrs	r2, r3, #17
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a22      	ldr	r2, [pc, #136]	; (8003c54 <HAL_RTC_GetTime+0xb4>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	0c1b      	lsrs	r3, r3, #16
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	223f      	movs	r2, #63	; 0x3f
 8003bd8:	4013      	ands	r3, r2
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	227f      	movs	r2, #127	; 0x7f
 8003be8:	4013      	ands	r3, r2
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	227f      	movs	r2, #127	; 0x7f
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2240      	movs	r2, #64	; 0x40
 8003c06:	4013      	ands	r3, r2
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d11a      	bne.n	8003c4a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 f992 	bl	8003f42 <RTC_Bcd2ToByte>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	001a      	movs	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	785b      	ldrb	r3, [r3, #1]
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f000 f989 	bl	8003f42 <RTC_Bcd2ToByte>
 8003c30:	0003      	movs	r3, r0
 8003c32:	001a      	movs	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	789b      	ldrb	r3, [r3, #2]
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f000 f980 	bl	8003f42 <RTC_Bcd2ToByte>
 8003c42:	0003      	movs	r3, r0
 8003c44:	001a      	movs	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b006      	add	sp, #24
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	007f7f7f 	.word	0x007f7f7f

08003c58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	5c9b      	ldrb	r3, [r3, r2]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_RTC_SetDate+0x1a>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e099      	b.n	8003da6 <HAL_RTC_SetDate+0x14e>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	2101      	movs	r1, #1
 8003c78:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2221      	movs	r2, #33	; 0x21
 8003c7e:	2102      	movs	r1, #2
 8003c80:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10e      	bne.n	8003ca6 <HAL_RTC_SetDate+0x4e>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	785b      	ldrb	r3, [r3, #1]
 8003c8c:	001a      	movs	r2, r3
 8003c8e:	2310      	movs	r3, #16
 8003c90:	4013      	ands	r3, r2
 8003c92:	d008      	beq.n	8003ca6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	785b      	ldrb	r3, [r3, #1]
 8003c98:	2210      	movs	r2, #16
 8003c9a:	4393      	bics	r3, r2
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	330a      	adds	r3, #10
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11c      	bne.n	8003ce6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	78db      	ldrb	r3, [r3, #3]
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f000 f91e 	bl	8003ef2 <RTC_ByteToBcd2>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f000 f917 	bl	8003ef2 <RTC_ByteToBcd2>
 8003cc4:	0003      	movs	r3, r0
 8003cc6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003cc8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	789b      	ldrb	r3, [r3, #2]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f000 f90f 	bl	8003ef2 <RTC_ByteToBcd2>
 8003cd4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003cd6:	0022      	movs	r2, r4
 8003cd8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	e00e      	b.n	8003d04 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	78db      	ldrb	r3, [r3, #3]
 8003cea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	785b      	ldrb	r3, [r3, #1]
 8003cf0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003cf2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003cf8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	22ca      	movs	r2, #202	; 0xca
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2253      	movs	r2, #83	; 0x53
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	0018      	movs	r0, r3
 8003d18:	f000 f8c1 	bl	8003e9e <RTC_EnterInitMode>
 8003d1c:	1e03      	subs	r3, r0, #0
 8003d1e:	d00d      	beq.n	8003d3c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	22ff      	movs	r2, #255	; 0xff
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2221      	movs	r2, #33	; 0x21
 8003d2c:	2104      	movs	r1, #4
 8003d2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	2100      	movs	r1, #0
 8003d36:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e034      	b.n	8003da6 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	491b      	ldr	r1, [pc, #108]	; (8003db0 <HAL_RTC_SetDate+0x158>)
 8003d44:	400a      	ands	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2180      	movs	r1, #128	; 0x80
 8003d54:	438a      	bics	r2, r1
 8003d56:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	4013      	ands	r3, r2
 8003d62:	d113      	bne.n	8003d8c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f000 f872 	bl	8003e50 <HAL_RTC_WaitForSynchro>
 8003d6c:	1e03      	subs	r3, r0, #0
 8003d6e:	d00d      	beq.n	8003d8c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	22ff      	movs	r2, #255	; 0xff
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2221      	movs	r2, #33	; 0x21
 8003d7c:	2104      	movs	r1, #4
 8003d7e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	2100      	movs	r1, #0
 8003d86:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e00c      	b.n	8003da6 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	22ff      	movs	r2, #255	; 0xff
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2221      	movs	r2, #33	; 0x21
 8003d98:	2101      	movs	r1, #1
 8003d9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	2100      	movs	r1, #0
 8003da2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003da4:	2300      	movs	r3, #0
  }
}
 8003da6:	0018      	movs	r0, r3
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b007      	add	sp, #28
 8003dac:	bd90      	pop	{r4, r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	00ffff3f 	.word	0x00ffff3f

08003db4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <HAL_RTC_GetDate+0x98>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	0c1b      	lsrs	r3, r3, #16
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	221f      	movs	r2, #31
 8003dde:	4013      	ands	r3, r2
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	223f      	movs	r2, #63	; 0x3f
 8003dec:	4013      	ands	r3, r2
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	0b5b      	lsrs	r3, r3, #13
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2207      	movs	r2, #7
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d11a      	bne.n	8003e40 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	78db      	ldrb	r3, [r3, #3]
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f000 f897 	bl	8003f42 <RTC_Bcd2ToByte>
 8003e14:	0003      	movs	r3, r0
 8003e16:	001a      	movs	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	785b      	ldrb	r3, [r3, #1]
 8003e20:	0018      	movs	r0, r3
 8003e22:	f000 f88e 	bl	8003f42 <RTC_Bcd2ToByte>
 8003e26:	0003      	movs	r3, r0
 8003e28:	001a      	movs	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	789b      	ldrb	r3, [r3, #2]
 8003e32:	0018      	movs	r0, r3
 8003e34:	f000 f885 	bl	8003f42 <RTC_Bcd2ToByte>
 8003e38:	0003      	movs	r3, r0
 8003e3a:	001a      	movs	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	0018      	movs	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b006      	add	sp, #24
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	00ffff3f 	.word	0x00ffff3f

08003e50 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	21a0      	movs	r1, #160	; 0xa0
 8003e64:	438a      	bics	r2, r1
 8003e66:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003e68:	f7fd fba0 	bl	80015ac <HAL_GetTick>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e70:	e00a      	b.n	8003e88 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e72:	f7fd fb9b 	bl	80015ac <HAL_GetTick>
 8003e76:	0002      	movs	r2, r0
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1ad2      	subs	r2, r2, r3
 8003e7c:	23fa      	movs	r3, #250	; 0xfa
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d901      	bls.n	8003e88 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e006      	b.n	8003e96 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	4013      	ands	r3, r2
 8003e92:	d0ee      	beq.n	8003e72 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	0018      	movs	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b004      	add	sp, #16
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2240      	movs	r2, #64	; 0x40
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d11a      	bne.n	8003ee8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	4252      	negs	r2, r2
 8003eba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003ebc:	f7fd fb76 	bl	80015ac <HAL_GetTick>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ec4:	e00a      	b.n	8003edc <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003ec6:	f7fd fb71 	bl	80015ac <HAL_GetTick>
 8003eca:	0002      	movs	r2, r0
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1ad2      	subs	r2, r2, r3
 8003ed0:	23fa      	movs	r3, #250	; 0xfa
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d901      	bls.n	8003edc <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e006      	b.n	8003eea <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	2240      	movs	r2, #64	; 0x40
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d0ee      	beq.n	8003ec6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	0018      	movs	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b004      	add	sp, #16
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	0002      	movs	r2, r0
 8003efa:	1dfb      	adds	r3, r7, #7
 8003efc:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003f02:	230b      	movs	r3, #11
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	1dfa      	adds	r2, r7, #7
 8003f08:	7812      	ldrb	r2, [r2, #0]
 8003f0a:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8003f0c:	e008      	b.n	8003f20 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3301      	adds	r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003f14:	220b      	movs	r2, #11
 8003f16:	18bb      	adds	r3, r7, r2
 8003f18:	18ba      	adds	r2, r7, r2
 8003f1a:	7812      	ldrb	r2, [r2, #0]
 8003f1c:	3a0a      	subs	r2, #10
 8003f1e:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8003f20:	210b      	movs	r1, #11
 8003f22:	187b      	adds	r3, r7, r1
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b09      	cmp	r3, #9
 8003f28:	d8f1      	bhi.n	8003f0e <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	187b      	adds	r3, r7, r1
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	b2db      	uxtb	r3, r3
}
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b004      	add	sp, #16
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	0002      	movs	r2, r0
 8003f4a:	1dfb      	adds	r3, r7, #7
 8003f4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003f4e:	1dfb      	adds	r3, r7, #7
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	001a      	movs	r2, r3
 8003f58:	0013      	movs	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	189b      	adds	r3, r3, r2
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	1dfb      	adds	r3, r7, #7
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	210f      	movs	r1, #15
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	18d3      	adds	r3, r2, r3
 8003f72:	b2db      	uxtb	r3, r3
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b004      	add	sp, #16
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3350      	adds	r3, #80	; 0x50
 8003f8e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	18d3      	adds	r3, r2, r3
 8003f98:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	601a      	str	r2, [r3, #0]
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b006      	add	sp, #24
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e044      	b.n	8004044 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d107      	bne.n	8003fd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2274      	movs	r2, #116	; 0x74
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f7fd f9c3 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2224      	movs	r2, #36	; 0x24
 8003fd6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	438a      	bics	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 f830 	bl	8004050 <UART_SetConfig>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e024      	b.n	8004044 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	0018      	movs	r0, r3
 8004006:	f000 fa85 	bl	8004514 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	490d      	ldr	r1, [pc, #52]	; (800404c <HAL_UART_Init+0xa4>)
 8004016:	400a      	ands	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	212a      	movs	r1, #42	; 0x2a
 8004026:	438a      	bics	r2, r1
 8004028:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2101      	movs	r1, #1
 8004036:	430a      	orrs	r2, r1
 8004038:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	0018      	movs	r0, r3
 800403e:	f000 fb1d 	bl	800467c <UART_CheckIdleState>
 8004042:	0003      	movs	r3, r0
}
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b002      	add	sp, #8
 800404a:	bd80      	pop	{r7, pc}
 800404c:	ffffb7ff 	.word	0xffffb7ff

08004050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004050:	b5b0      	push	{r4, r5, r7, lr}
 8004052:	b08e      	sub	sp, #56	; 0x38
 8004054:	af00      	add	r7, sp, #0
 8004056:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004058:	231a      	movs	r3, #26
 800405a:	2218      	movs	r2, #24
 800405c:	4694      	mov	ip, r2
 800405e:	44bc      	add	ip, r7
 8004060:	4463      	add	r3, ip
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	431a      	orrs	r2, r3
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	431a      	orrs	r2, r3
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	4313      	orrs	r3, r2
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4abc      	ldr	r2, [pc, #752]	; (8004378 <UART_SetConfig+0x328>)
 8004086:	4013      	ands	r3, r2
 8004088:	0019      	movs	r1, r3
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	4ab8      	ldr	r2, [pc, #736]	; (800437c <UART_SetConfig+0x32c>)
 800409c:	4013      	ands	r3, r2
 800409e:	0019      	movs	r1, r3
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4ab2      	ldr	r2, [pc, #712]	; (8004380 <UART_SetConfig+0x330>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040c2:	4313      	orrs	r3, r2
 80040c4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4aad      	ldr	r2, [pc, #692]	; (8004384 <UART_SetConfig+0x334>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	0019      	movs	r1, r3
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040d8:	430a      	orrs	r2, r1
 80040da:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4aa9      	ldr	r2, [pc, #676]	; (8004388 <UART_SetConfig+0x338>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d136      	bne.n	8004154 <UART_SetConfig+0x104>
 80040e6:	4ba9      	ldr	r3, [pc, #676]	; (800438c <UART_SetConfig+0x33c>)
 80040e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ea:	220c      	movs	r2, #12
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b0c      	cmp	r3, #12
 80040f0:	d020      	beq.n	8004134 <UART_SetConfig+0xe4>
 80040f2:	d827      	bhi.n	8004144 <UART_SetConfig+0xf4>
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d00d      	beq.n	8004114 <UART_SetConfig+0xc4>
 80040f8:	d824      	bhi.n	8004144 <UART_SetConfig+0xf4>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <UART_SetConfig+0xb4>
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d010      	beq.n	8004124 <UART_SetConfig+0xd4>
 8004102:	e01f      	b.n	8004144 <UART_SetConfig+0xf4>
 8004104:	231b      	movs	r3, #27
 8004106:	2218      	movs	r2, #24
 8004108:	4694      	mov	ip, r2
 800410a:	44bc      	add	ip, r7
 800410c:	4463      	add	r3, ip
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	e06f      	b.n	80041f4 <UART_SetConfig+0x1a4>
 8004114:	231b      	movs	r3, #27
 8004116:	2218      	movs	r2, #24
 8004118:	4694      	mov	ip, r2
 800411a:	44bc      	add	ip, r7
 800411c:	4463      	add	r3, ip
 800411e:	2202      	movs	r2, #2
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	e067      	b.n	80041f4 <UART_SetConfig+0x1a4>
 8004124:	231b      	movs	r3, #27
 8004126:	2218      	movs	r2, #24
 8004128:	4694      	mov	ip, r2
 800412a:	44bc      	add	ip, r7
 800412c:	4463      	add	r3, ip
 800412e:	2204      	movs	r2, #4
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	e05f      	b.n	80041f4 <UART_SetConfig+0x1a4>
 8004134:	231b      	movs	r3, #27
 8004136:	2218      	movs	r2, #24
 8004138:	4694      	mov	ip, r2
 800413a:	44bc      	add	ip, r7
 800413c:	4463      	add	r3, ip
 800413e:	2208      	movs	r2, #8
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e057      	b.n	80041f4 <UART_SetConfig+0x1a4>
 8004144:	231b      	movs	r3, #27
 8004146:	2218      	movs	r2, #24
 8004148:	4694      	mov	ip, r2
 800414a:	44bc      	add	ip, r7
 800414c:	4463      	add	r3, ip
 800414e:	2210      	movs	r2, #16
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e04f      	b.n	80041f4 <UART_SetConfig+0x1a4>
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a89      	ldr	r2, [pc, #548]	; (8004380 <UART_SetConfig+0x330>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d143      	bne.n	80041e6 <UART_SetConfig+0x196>
 800415e:	4b8b      	ldr	r3, [pc, #556]	; (800438c <UART_SetConfig+0x33c>)
 8004160:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004162:	23c0      	movs	r3, #192	; 0xc0
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	4013      	ands	r3, r2
 8004168:	22c0      	movs	r2, #192	; 0xc0
 800416a:	0112      	lsls	r2, r2, #4
 800416c:	4293      	cmp	r3, r2
 800416e:	d02a      	beq.n	80041c6 <UART_SetConfig+0x176>
 8004170:	22c0      	movs	r2, #192	; 0xc0
 8004172:	0112      	lsls	r2, r2, #4
 8004174:	4293      	cmp	r3, r2
 8004176:	d82e      	bhi.n	80041d6 <UART_SetConfig+0x186>
 8004178:	2280      	movs	r2, #128	; 0x80
 800417a:	0112      	lsls	r2, r2, #4
 800417c:	4293      	cmp	r3, r2
 800417e:	d012      	beq.n	80041a6 <UART_SetConfig+0x156>
 8004180:	2280      	movs	r2, #128	; 0x80
 8004182:	0112      	lsls	r2, r2, #4
 8004184:	4293      	cmp	r3, r2
 8004186:	d826      	bhi.n	80041d6 <UART_SetConfig+0x186>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d004      	beq.n	8004196 <UART_SetConfig+0x146>
 800418c:	2280      	movs	r2, #128	; 0x80
 800418e:	00d2      	lsls	r2, r2, #3
 8004190:	4293      	cmp	r3, r2
 8004192:	d010      	beq.n	80041b6 <UART_SetConfig+0x166>
 8004194:	e01f      	b.n	80041d6 <UART_SetConfig+0x186>
 8004196:	231b      	movs	r3, #27
 8004198:	2218      	movs	r2, #24
 800419a:	4694      	mov	ip, r2
 800419c:	44bc      	add	ip, r7
 800419e:	4463      	add	r3, ip
 80041a0:	2200      	movs	r2, #0
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e026      	b.n	80041f4 <UART_SetConfig+0x1a4>
 80041a6:	231b      	movs	r3, #27
 80041a8:	2218      	movs	r2, #24
 80041aa:	4694      	mov	ip, r2
 80041ac:	44bc      	add	ip, r7
 80041ae:	4463      	add	r3, ip
 80041b0:	2202      	movs	r2, #2
 80041b2:	701a      	strb	r2, [r3, #0]
 80041b4:	e01e      	b.n	80041f4 <UART_SetConfig+0x1a4>
 80041b6:	231b      	movs	r3, #27
 80041b8:	2218      	movs	r2, #24
 80041ba:	4694      	mov	ip, r2
 80041bc:	44bc      	add	ip, r7
 80041be:	4463      	add	r3, ip
 80041c0:	2204      	movs	r2, #4
 80041c2:	701a      	strb	r2, [r3, #0]
 80041c4:	e016      	b.n	80041f4 <UART_SetConfig+0x1a4>
 80041c6:	231b      	movs	r3, #27
 80041c8:	2218      	movs	r2, #24
 80041ca:	4694      	mov	ip, r2
 80041cc:	44bc      	add	ip, r7
 80041ce:	4463      	add	r3, ip
 80041d0:	2208      	movs	r2, #8
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e00e      	b.n	80041f4 <UART_SetConfig+0x1a4>
 80041d6:	231b      	movs	r3, #27
 80041d8:	2218      	movs	r2, #24
 80041da:	4694      	mov	ip, r2
 80041dc:	44bc      	add	ip, r7
 80041de:	4463      	add	r3, ip
 80041e0:	2210      	movs	r2, #16
 80041e2:	701a      	strb	r2, [r3, #0]
 80041e4:	e006      	b.n	80041f4 <UART_SetConfig+0x1a4>
 80041e6:	231b      	movs	r3, #27
 80041e8:	2218      	movs	r2, #24
 80041ea:	4694      	mov	ip, r2
 80041ec:	44bc      	add	ip, r7
 80041ee:	4463      	add	r3, ip
 80041f0:	2210      	movs	r2, #16
 80041f2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a61      	ldr	r2, [pc, #388]	; (8004380 <UART_SetConfig+0x330>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d000      	beq.n	8004200 <UART_SetConfig+0x1b0>
 80041fe:	e088      	b.n	8004312 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004200:	231b      	movs	r3, #27
 8004202:	2218      	movs	r2, #24
 8004204:	4694      	mov	ip, r2
 8004206:	44bc      	add	ip, r7
 8004208:	4463      	add	r3, ip
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b08      	cmp	r3, #8
 800420e:	d01d      	beq.n	800424c <UART_SetConfig+0x1fc>
 8004210:	dc20      	bgt.n	8004254 <UART_SetConfig+0x204>
 8004212:	2b04      	cmp	r3, #4
 8004214:	d015      	beq.n	8004242 <UART_SetConfig+0x1f2>
 8004216:	dc1d      	bgt.n	8004254 <UART_SetConfig+0x204>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <UART_SetConfig+0x1d2>
 800421c:	2b02      	cmp	r3, #2
 800421e:	d005      	beq.n	800422c <UART_SetConfig+0x1dc>
 8004220:	e018      	b.n	8004254 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004222:	f7ff fa09 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8004226:	0003      	movs	r3, r0
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800422a:	e01d      	b.n	8004268 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800422c:	4b57      	ldr	r3, [pc, #348]	; (800438c <UART_SetConfig+0x33c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2210      	movs	r2, #16
 8004232:	4013      	ands	r3, r2
 8004234:	d002      	beq.n	800423c <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004236:	4b56      	ldr	r3, [pc, #344]	; (8004390 <UART_SetConfig+0x340>)
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800423a:	e015      	b.n	8004268 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 800423c:	4b55      	ldr	r3, [pc, #340]	; (8004394 <UART_SetConfig+0x344>)
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004240:	e012      	b.n	8004268 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004242:	f7ff f949 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8004246:	0003      	movs	r3, r0
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800424a:	e00d      	b.n	8004268 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004252:	e009      	b.n	8004268 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004258:	231a      	movs	r3, #26
 800425a:	2218      	movs	r2, #24
 800425c:	4694      	mov	ip, r2
 800425e:	44bc      	add	ip, r7
 8004260:	4463      	add	r3, ip
 8004262:	2201      	movs	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]
        break;
 8004266:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d100      	bne.n	8004270 <UART_SetConfig+0x220>
 800426e:	e139      	b.n	80044e4 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	0013      	movs	r3, r2
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	189b      	adds	r3, r3, r2
 800427a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427c:	429a      	cmp	r2, r3
 800427e:	d305      	bcc.n	800428c <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004288:	429a      	cmp	r2, r3
 800428a:	d907      	bls.n	800429c <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 800428c:	231a      	movs	r3, #26
 800428e:	2218      	movs	r2, #24
 8004290:	4694      	mov	ip, r2
 8004292:	44bc      	add	ip, r7
 8004294:	4463      	add	r3, ip
 8004296:	2201      	movs	r2, #1
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	e123      	b.n	80044e4 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	6939      	ldr	r1, [r7, #16]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	000b      	movs	r3, r1
 80042aa:	0e1b      	lsrs	r3, r3, #24
 80042ac:	0010      	movs	r0, r2
 80042ae:	0205      	lsls	r5, r0, #8
 80042b0:	431d      	orrs	r5, r3
 80042b2:	000b      	movs	r3, r1
 80042b4:	021c      	lsls	r4, r3, #8
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	68b8      	ldr	r0, [r7, #8]
 80042c4:	68f9      	ldr	r1, [r7, #12]
 80042c6:	1900      	adds	r0, r0, r4
 80042c8:	4169      	adcs	r1, r5
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	2300      	movs	r3, #0
 80042d2:	607b      	str	r3, [r7, #4]
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f7fb ffee 	bl	80002b8 <__aeabi_uldivmod>
 80042dc:	0002      	movs	r2, r0
 80042de:	000b      	movs	r3, r1
 80042e0:	0013      	movs	r3, r2
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042e6:	23c0      	movs	r3, #192	; 0xc0
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d309      	bcc.n	8004302 <UART_SetConfig+0x2b2>
 80042ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	035b      	lsls	r3, r3, #13
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d204      	bcs.n	8004302 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042fe:	60da      	str	r2, [r3, #12]
 8004300:	e0f0      	b.n	80044e4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004302:	231a      	movs	r3, #26
 8004304:	2218      	movs	r2, #24
 8004306:	4694      	mov	ip, r2
 8004308:	44bc      	add	ip, r7
 800430a:	4463      	add	r3, ip
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	e0e8      	b.n	80044e4 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	2380      	movs	r3, #128	; 0x80
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	429a      	cmp	r2, r3
 800431c:	d000      	beq.n	8004320 <UART_SetConfig+0x2d0>
 800431e:	e087      	b.n	8004430 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8004320:	231b      	movs	r3, #27
 8004322:	2218      	movs	r2, #24
 8004324:	4694      	mov	ip, r2
 8004326:	44bc      	add	ip, r7
 8004328:	4463      	add	r3, ip
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d835      	bhi.n	800439c <UART_SetConfig+0x34c>
 8004330:	009a      	lsls	r2, r3, #2
 8004332:	4b19      	ldr	r3, [pc, #100]	; (8004398 <UART_SetConfig+0x348>)
 8004334:	18d3      	adds	r3, r2, r3
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800433a:	f7ff f97d 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 800433e:	0003      	movs	r3, r0
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004342:	e035      	b.n	80043b0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004344:	f7ff f98e 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 8004348:	0003      	movs	r3, r0
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800434c:	e030      	b.n	80043b0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800434e:	4b0f      	ldr	r3, [pc, #60]	; (800438c <UART_SetConfig+0x33c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2210      	movs	r2, #16
 8004354:	4013      	ands	r3, r2
 8004356:	d002      	beq.n	800435e <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <UART_SetConfig+0x340>)
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800435c:	e028      	b.n	80043b0 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <UART_SetConfig+0x344>)
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004362:	e025      	b.n	80043b0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004364:	f7ff f8b8 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8004368:	0003      	movs	r3, r0
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800436c:	e020      	b.n	80043b0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004374:	e01c      	b.n	80043b0 <UART_SetConfig+0x360>
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	efff69f3 	.word	0xefff69f3
 800437c:	ffffcfff 	.word	0xffffcfff
 8004380:	40004800 	.word	0x40004800
 8004384:	fffff4ff 	.word	0xfffff4ff
 8004388:	40004400 	.word	0x40004400
 800438c:	40021000 	.word	0x40021000
 8004390:	003d0900 	.word	0x003d0900
 8004394:	00f42400 	.word	0x00f42400
 8004398:	08005b7c 	.word	0x08005b7c
      default:
        pclk = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80043a0:	231a      	movs	r3, #26
 80043a2:	2218      	movs	r2, #24
 80043a4:	4694      	mov	ip, r2
 80043a6:	44bc      	add	ip, r7
 80043a8:	4463      	add	r3, ip
 80043aa:	2201      	movs	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
        break;
 80043ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d100      	bne.n	80043b8 <UART_SetConfig+0x368>
 80043b6:	e095      	b.n	80044e4 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ba:	005a      	lsls	r2, r3, #1
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	18d2      	adds	r2, r2, r3
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	0019      	movs	r1, r3
 80043ca:	0010      	movs	r0, r2
 80043cc:	f7fb feae 	bl	800012c <__udivsi3>
 80043d0:	0003      	movs	r3, r0
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	2b0f      	cmp	r3, #15
 80043da:	d921      	bls.n	8004420 <UART_SetConfig+0x3d0>
 80043dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	025b      	lsls	r3, r3, #9
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d21c      	bcs.n	8004420 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	200e      	movs	r0, #14
 80043ec:	2418      	movs	r4, #24
 80043ee:	193b      	adds	r3, r7, r4
 80043f0:	181b      	adds	r3, r3, r0
 80043f2:	210f      	movs	r1, #15
 80043f4:	438a      	bics	r2, r1
 80043f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2207      	movs	r2, #7
 8004400:	4013      	ands	r3, r2
 8004402:	b299      	uxth	r1, r3
 8004404:	193b      	adds	r3, r7, r4
 8004406:	181b      	adds	r3, r3, r0
 8004408:	193a      	adds	r2, r7, r4
 800440a:	1812      	adds	r2, r2, r0
 800440c:	8812      	ldrh	r2, [r2, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	193a      	adds	r2, r7, r4
 8004418:	1812      	adds	r2, r2, r0
 800441a:	8812      	ldrh	r2, [r2, #0]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	e061      	b.n	80044e4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004420:	231a      	movs	r3, #26
 8004422:	2218      	movs	r2, #24
 8004424:	4694      	mov	ip, r2
 8004426:	44bc      	add	ip, r7
 8004428:	4463      	add	r3, ip
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e059      	b.n	80044e4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004430:	231b      	movs	r3, #27
 8004432:	2218      	movs	r2, #24
 8004434:	4694      	mov	ip, r2
 8004436:	44bc      	add	ip, r7
 8004438:	4463      	add	r3, ip
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d822      	bhi.n	8004486 <UART_SetConfig+0x436>
 8004440:	009a      	lsls	r2, r3, #2
 8004442:	4b30      	ldr	r3, [pc, #192]	; (8004504 <UART_SetConfig+0x4b4>)
 8004444:	18d3      	adds	r3, r2, r3
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800444a:	f7ff f8f5 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 800444e:	0003      	movs	r3, r0
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004452:	e022      	b.n	800449a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004454:	f7ff f906 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 8004458:	0003      	movs	r3, r0
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800445c:	e01d      	b.n	800449a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800445e:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <UART_SetConfig+0x4b8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2210      	movs	r2, #16
 8004464:	4013      	ands	r3, r2
 8004466:	d002      	beq.n	800446e <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004468:	4b28      	ldr	r3, [pc, #160]	; (800450c <UART_SetConfig+0x4bc>)
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800446c:	e015      	b.n	800449a <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 800446e:	4b28      	ldr	r3, [pc, #160]	; (8004510 <UART_SetConfig+0x4c0>)
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004472:	e012      	b.n	800449a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004474:	f7ff f830 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8004478:	0003      	movs	r3, r0
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800447c:	e00d      	b.n	800449a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004484:	e009      	b.n	800449a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800448a:	231a      	movs	r3, #26
 800448c:	2218      	movs	r2, #24
 800448e:	4694      	mov	ip, r2
 8004490:	44bc      	add	ip, r7
 8004492:	4463      	add	r3, ip
 8004494:	2201      	movs	r2, #1
 8004496:	701a      	strb	r2, [r3, #0]
        break;
 8004498:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d021      	beq.n	80044e4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	085a      	lsrs	r2, r3, #1
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	18d2      	adds	r2, r2, r3
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	0019      	movs	r1, r3
 80044b0:	0010      	movs	r0, r2
 80044b2:	f7fb fe3b 	bl	800012c <__udivsi3>
 80044b6:	0003      	movs	r3, r0
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	2b0f      	cmp	r3, #15
 80044c0:	d909      	bls.n	80044d6 <UART_SetConfig+0x486>
 80044c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	025b      	lsls	r3, r3, #9
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d204      	bcs.n	80044d6 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d2:	60da      	str	r2, [r3, #12]
 80044d4:	e006      	b.n	80044e4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80044d6:	231a      	movs	r3, #26
 80044d8:	2218      	movs	r2, #24
 80044da:	4694      	mov	ip, r2
 80044dc:	44bc      	add	ip, r7
 80044de:	4463      	add	r3, ip
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2200      	movs	r2, #0
 80044e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2200      	movs	r2, #0
 80044ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044f0:	231a      	movs	r3, #26
 80044f2:	2218      	movs	r2, #24
 80044f4:	4694      	mov	ip, r2
 80044f6:	44bc      	add	ip, r7
 80044f8:	4463      	add	r3, ip
 80044fa:	781b      	ldrb	r3, [r3, #0]
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b00e      	add	sp, #56	; 0x38
 8004502:	bdb0      	pop	{r4, r5, r7, pc}
 8004504:	08005ba0 	.word	0x08005ba0
 8004508:	40021000 	.word	0x40021000
 800450c:	003d0900 	.word	0x003d0900
 8004510:	00f42400 	.word	0x00f42400

08004514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	2201      	movs	r2, #1
 8004522:	4013      	ands	r3, r2
 8004524:	d00b      	beq.n	800453e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4a4a      	ldr	r2, [pc, #296]	; (8004658 <UART_AdvFeatureConfig+0x144>)
 800452e:	4013      	ands	r3, r2
 8004530:	0019      	movs	r1, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2202      	movs	r2, #2
 8004544:	4013      	ands	r3, r2
 8004546:	d00b      	beq.n	8004560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4a43      	ldr	r2, [pc, #268]	; (800465c <UART_AdvFeatureConfig+0x148>)
 8004550:	4013      	ands	r3, r2
 8004552:	0019      	movs	r1, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	2204      	movs	r2, #4
 8004566:	4013      	ands	r3, r2
 8004568:	d00b      	beq.n	8004582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4a3b      	ldr	r2, [pc, #236]	; (8004660 <UART_AdvFeatureConfig+0x14c>)
 8004572:	4013      	ands	r3, r2
 8004574:	0019      	movs	r1, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2208      	movs	r2, #8
 8004588:	4013      	ands	r3, r2
 800458a:	d00b      	beq.n	80045a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4a34      	ldr	r2, [pc, #208]	; (8004664 <UART_AdvFeatureConfig+0x150>)
 8004594:	4013      	ands	r3, r2
 8004596:	0019      	movs	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2210      	movs	r2, #16
 80045aa:	4013      	ands	r3, r2
 80045ac:	d00b      	beq.n	80045c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a2c      	ldr	r2, [pc, #176]	; (8004668 <UART_AdvFeatureConfig+0x154>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	0019      	movs	r1, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	2220      	movs	r2, #32
 80045cc:	4013      	ands	r3, r2
 80045ce:	d00b      	beq.n	80045e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	4a25      	ldr	r2, [pc, #148]	; (800466c <UART_AdvFeatureConfig+0x158>)
 80045d8:	4013      	ands	r3, r2
 80045da:	0019      	movs	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	2240      	movs	r2, #64	; 0x40
 80045ee:	4013      	ands	r3, r2
 80045f0:	d01d      	beq.n	800462e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <UART_AdvFeatureConfig+0x15c>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	0019      	movs	r1, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	035b      	lsls	r3, r3, #13
 8004612:	429a      	cmp	r2, r3
 8004614:	d10b      	bne.n	800462e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4a15      	ldr	r2, [pc, #84]	; (8004674 <UART_AdvFeatureConfig+0x160>)
 800461e:	4013      	ands	r3, r2
 8004620:	0019      	movs	r1, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	2280      	movs	r2, #128	; 0x80
 8004634:	4013      	ands	r3, r2
 8004636:	d00b      	beq.n	8004650 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <UART_AdvFeatureConfig+0x164>)
 8004640:	4013      	ands	r3, r2
 8004642:	0019      	movs	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
  }
}
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b002      	add	sp, #8
 8004656:	bd80      	pop	{r7, pc}
 8004658:	fffdffff 	.word	0xfffdffff
 800465c:	fffeffff 	.word	0xfffeffff
 8004660:	fffbffff 	.word	0xfffbffff
 8004664:	ffff7fff 	.word	0xffff7fff
 8004668:	ffffefff 	.word	0xffffefff
 800466c:	ffffdfff 	.word	0xffffdfff
 8004670:	ffefffff 	.word	0xffefffff
 8004674:	ff9fffff 	.word	0xff9fffff
 8004678:	fff7ffff 	.word	0xfff7ffff

0800467c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af02      	add	r7, sp, #8
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2280      	movs	r2, #128	; 0x80
 8004688:	2100      	movs	r1, #0
 800468a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800468c:	f7fc ff8e 	bl	80015ac <HAL_GetTick>
 8004690:	0003      	movs	r3, r0
 8004692:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2208      	movs	r2, #8
 800469c:	4013      	ands	r3, r2
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d10c      	bne.n	80046bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2280      	movs	r2, #128	; 0x80
 80046a6:	0391      	lsls	r1, r2, #14
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	4a17      	ldr	r2, [pc, #92]	; (8004708 <UART_CheckIdleState+0x8c>)
 80046ac:	9200      	str	r2, [sp, #0]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f000 f82c 	bl	800470c <UART_WaitOnFlagUntilTimeout>
 80046b4:	1e03      	subs	r3, r0, #0
 80046b6:	d001      	beq.n	80046bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e021      	b.n	8004700 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2204      	movs	r2, #4
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d10c      	bne.n	80046e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2280      	movs	r2, #128	; 0x80
 80046ce:	03d1      	lsls	r1, r2, #15
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	4a0d      	ldr	r2, [pc, #52]	; (8004708 <UART_CheckIdleState+0x8c>)
 80046d4:	9200      	str	r2, [sp, #0]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f000 f818 	bl	800470c <UART_WaitOnFlagUntilTimeout>
 80046dc:	1e03      	subs	r3, r0, #0
 80046de:	d001      	beq.n	80046e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e00d      	b.n	8004700 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2274      	movs	r2, #116	; 0x74
 80046fa:	2100      	movs	r1, #0
 80046fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	0018      	movs	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	b004      	add	sp, #16
 8004706:	bd80      	pop	{r7, pc}
 8004708:	01ffffff 	.word	0x01ffffff

0800470c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	1dfb      	adds	r3, r7, #7
 800471a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800471c:	e05e      	b.n	80047dc <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	3301      	adds	r3, #1
 8004722:	d05b      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004724:	f7fc ff42 	bl	80015ac <HAL_GetTick>
 8004728:	0002      	movs	r2, r0
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	429a      	cmp	r2, r3
 8004732:	d302      	bcc.n	800473a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d11b      	bne.n	8004772 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	492f      	ldr	r1, [pc, #188]	; (8004804 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004746:	400a      	ands	r2, r1
 8004748:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2101      	movs	r1, #1
 8004756:	438a      	bics	r2, r1
 8004758:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2274      	movs	r2, #116	; 0x74
 800476a:	2100      	movs	r1, #0
 800476c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e044      	b.n	80047fc <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2204      	movs	r2, #4
 800477a:	4013      	ands	r3, r2
 800477c:	d02e      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	2380      	movs	r3, #128	; 0x80
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	401a      	ands	r2, r3
 800478a:	2380      	movs	r3, #128	; 0x80
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	429a      	cmp	r2, r3
 8004790:	d124      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2280      	movs	r2, #128	; 0x80
 8004798:	0112      	lsls	r2, r2, #4
 800479a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4917      	ldr	r1, [pc, #92]	; (8004804 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80047a8:	400a      	ands	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2101      	movs	r1, #1
 80047b8:	438a      	bics	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2280      	movs	r2, #128	; 0x80
 80047cc:	2120      	movs	r1, #32
 80047ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2274      	movs	r2, #116	; 0x74
 80047d4:	2100      	movs	r1, #0
 80047d6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e00f      	b.n	80047fc <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	425a      	negs	r2, r3
 80047ec:	4153      	adcs	r3, r2
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	001a      	movs	r2, r3
 80047f2:	1dfb      	adds	r3, r7, #7
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d091      	beq.n	800471e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	0018      	movs	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	b004      	add	sp, #16
 8004802:	bd80      	pop	{r7, pc}
 8004804:	fffffe5f 	.word	0xfffffe5f

08004808 <__errno>:
 8004808:	4b01      	ldr	r3, [pc, #4]	; (8004810 <__errno+0x8>)
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	4770      	bx	lr
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	2000000c 	.word	0x2000000c

08004814 <__libc_init_array>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	2600      	movs	r6, #0
 8004818:	4d0c      	ldr	r5, [pc, #48]	; (800484c <__libc_init_array+0x38>)
 800481a:	4c0d      	ldr	r4, [pc, #52]	; (8004850 <__libc_init_array+0x3c>)
 800481c:	1b64      	subs	r4, r4, r5
 800481e:	10a4      	asrs	r4, r4, #2
 8004820:	42a6      	cmp	r6, r4
 8004822:	d109      	bne.n	8004838 <__libc_init_array+0x24>
 8004824:	2600      	movs	r6, #0
 8004826:	f001 f943 	bl	8005ab0 <_init>
 800482a:	4d0a      	ldr	r5, [pc, #40]	; (8004854 <__libc_init_array+0x40>)
 800482c:	4c0a      	ldr	r4, [pc, #40]	; (8004858 <__libc_init_array+0x44>)
 800482e:	1b64      	subs	r4, r4, r5
 8004830:	10a4      	asrs	r4, r4, #2
 8004832:	42a6      	cmp	r6, r4
 8004834:	d105      	bne.n	8004842 <__libc_init_array+0x2e>
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	00b3      	lsls	r3, r6, #2
 800483a:	58eb      	ldr	r3, [r5, r3]
 800483c:	4798      	blx	r3
 800483e:	3601      	adds	r6, #1
 8004840:	e7ee      	b.n	8004820 <__libc_init_array+0xc>
 8004842:	00b3      	lsls	r3, r6, #2
 8004844:	58eb      	ldr	r3, [r5, r3]
 8004846:	4798      	blx	r3
 8004848:	3601      	adds	r6, #1
 800484a:	e7f2      	b.n	8004832 <__libc_init_array+0x1e>
 800484c:	08005d7c 	.word	0x08005d7c
 8004850:	08005d7c 	.word	0x08005d7c
 8004854:	08005d7c 	.word	0x08005d7c
 8004858:	08005d80 	.word	0x08005d80

0800485c <memset>:
 800485c:	0003      	movs	r3, r0
 800485e:	1882      	adds	r2, r0, r2
 8004860:	4293      	cmp	r3, r2
 8004862:	d100      	bne.n	8004866 <memset+0xa>
 8004864:	4770      	bx	lr
 8004866:	7019      	strb	r1, [r3, #0]
 8004868:	3301      	adds	r3, #1
 800486a:	e7f9      	b.n	8004860 <memset+0x4>

0800486c <siprintf>:
 800486c:	b40e      	push	{r1, r2, r3}
 800486e:	b500      	push	{lr}
 8004870:	490b      	ldr	r1, [pc, #44]	; (80048a0 <siprintf+0x34>)
 8004872:	b09c      	sub	sp, #112	; 0x70
 8004874:	ab1d      	add	r3, sp, #116	; 0x74
 8004876:	9002      	str	r0, [sp, #8]
 8004878:	9006      	str	r0, [sp, #24]
 800487a:	9107      	str	r1, [sp, #28]
 800487c:	9104      	str	r1, [sp, #16]
 800487e:	4809      	ldr	r0, [pc, #36]	; (80048a4 <siprintf+0x38>)
 8004880:	4909      	ldr	r1, [pc, #36]	; (80048a8 <siprintf+0x3c>)
 8004882:	cb04      	ldmia	r3!, {r2}
 8004884:	9105      	str	r1, [sp, #20]
 8004886:	6800      	ldr	r0, [r0, #0]
 8004888:	a902      	add	r1, sp, #8
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	f000 f89a 	bl	80049c4 <_svfiprintf_r>
 8004890:	2300      	movs	r3, #0
 8004892:	9a02      	ldr	r2, [sp, #8]
 8004894:	7013      	strb	r3, [r2, #0]
 8004896:	b01c      	add	sp, #112	; 0x70
 8004898:	bc08      	pop	{r3}
 800489a:	b003      	add	sp, #12
 800489c:	4718      	bx	r3
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	7fffffff 	.word	0x7fffffff
 80048a4:	2000000c 	.word	0x2000000c
 80048a8:	ffff0208 	.word	0xffff0208

080048ac <siscanf>:
 80048ac:	b40e      	push	{r1, r2, r3}
 80048ae:	b530      	push	{r4, r5, lr}
 80048b0:	2381      	movs	r3, #129	; 0x81
 80048b2:	b09c      	sub	sp, #112	; 0x70
 80048b4:	466a      	mov	r2, sp
 80048b6:	ac1f      	add	r4, sp, #124	; 0x7c
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	cc20      	ldmia	r4!, {r5}
 80048bc:	8293      	strh	r3, [r2, #20]
 80048be:	9002      	str	r0, [sp, #8]
 80048c0:	9006      	str	r0, [sp, #24]
 80048c2:	f7fb fc21 	bl	8000108 <strlen>
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <siscanf+0x48>)
 80048c8:	466a      	mov	r2, sp
 80048ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80048cc:	2300      	movs	r3, #0
 80048ce:	9003      	str	r0, [sp, #12]
 80048d0:	9007      	str	r0, [sp, #28]
 80048d2:	4809      	ldr	r0, [pc, #36]	; (80048f8 <siscanf+0x4c>)
 80048d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80048d6:	9314      	str	r3, [sp, #80]	; 0x50
 80048d8:	3b01      	subs	r3, #1
 80048da:	82d3      	strh	r3, [r2, #22]
 80048dc:	a902      	add	r1, sp, #8
 80048de:	0023      	movs	r3, r4
 80048e0:	002a      	movs	r2, r5
 80048e2:	6800      	ldr	r0, [r0, #0]
 80048e4:	9401      	str	r4, [sp, #4]
 80048e6:	f000 f9c9 	bl	8004c7c <__ssvfiscanf_r>
 80048ea:	b01c      	add	sp, #112	; 0x70
 80048ec:	bc30      	pop	{r4, r5}
 80048ee:	bc08      	pop	{r3}
 80048f0:	b003      	add	sp, #12
 80048f2:	4718      	bx	r3
 80048f4:	080048fd 	.word	0x080048fd
 80048f8:	2000000c 	.word	0x2000000c

080048fc <__seofread>:
 80048fc:	2000      	movs	r0, #0
 80048fe:	4770      	bx	lr

08004900 <__ssputs_r>:
 8004900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004902:	688e      	ldr	r6, [r1, #8]
 8004904:	b085      	sub	sp, #20
 8004906:	0007      	movs	r7, r0
 8004908:	000c      	movs	r4, r1
 800490a:	9203      	str	r2, [sp, #12]
 800490c:	9301      	str	r3, [sp, #4]
 800490e:	429e      	cmp	r6, r3
 8004910:	d83c      	bhi.n	800498c <__ssputs_r+0x8c>
 8004912:	2390      	movs	r3, #144	; 0x90
 8004914:	898a      	ldrh	r2, [r1, #12]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	421a      	tst	r2, r3
 800491a:	d034      	beq.n	8004986 <__ssputs_r+0x86>
 800491c:	2503      	movs	r5, #3
 800491e:	6909      	ldr	r1, [r1, #16]
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	1a5b      	subs	r3, r3, r1
 8004924:	9302      	str	r3, [sp, #8]
 8004926:	6963      	ldr	r3, [r4, #20]
 8004928:	9802      	ldr	r0, [sp, #8]
 800492a:	435d      	muls	r5, r3
 800492c:	0feb      	lsrs	r3, r5, #31
 800492e:	195d      	adds	r5, r3, r5
 8004930:	9b01      	ldr	r3, [sp, #4]
 8004932:	106d      	asrs	r5, r5, #1
 8004934:	3301      	adds	r3, #1
 8004936:	181b      	adds	r3, r3, r0
 8004938:	42ab      	cmp	r3, r5
 800493a:	d900      	bls.n	800493e <__ssputs_r+0x3e>
 800493c:	001d      	movs	r5, r3
 800493e:	0553      	lsls	r3, r2, #21
 8004940:	d532      	bpl.n	80049a8 <__ssputs_r+0xa8>
 8004942:	0029      	movs	r1, r5
 8004944:	0038      	movs	r0, r7
 8004946:	f001 f805 	bl	8005954 <_malloc_r>
 800494a:	1e06      	subs	r6, r0, #0
 800494c:	d109      	bne.n	8004962 <__ssputs_r+0x62>
 800494e:	230c      	movs	r3, #12
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	2340      	movs	r3, #64	; 0x40
 8004954:	2001      	movs	r0, #1
 8004956:	89a2      	ldrh	r2, [r4, #12]
 8004958:	4240      	negs	r0, r0
 800495a:	4313      	orrs	r3, r2
 800495c:	81a3      	strh	r3, [r4, #12]
 800495e:	b005      	add	sp, #20
 8004960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004962:	9a02      	ldr	r2, [sp, #8]
 8004964:	6921      	ldr	r1, [r4, #16]
 8004966:	f000 ff8e 	bl	8005886 <memcpy>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	4a14      	ldr	r2, [pc, #80]	; (80049c0 <__ssputs_r+0xc0>)
 800496e:	401a      	ands	r2, r3
 8004970:	2380      	movs	r3, #128	; 0x80
 8004972:	4313      	orrs	r3, r2
 8004974:	81a3      	strh	r3, [r4, #12]
 8004976:	9b02      	ldr	r3, [sp, #8]
 8004978:	6126      	str	r6, [r4, #16]
 800497a:	18f6      	adds	r6, r6, r3
 800497c:	6026      	str	r6, [r4, #0]
 800497e:	6165      	str	r5, [r4, #20]
 8004980:	9e01      	ldr	r6, [sp, #4]
 8004982:	1aed      	subs	r5, r5, r3
 8004984:	60a5      	str	r5, [r4, #8]
 8004986:	9b01      	ldr	r3, [sp, #4]
 8004988:	429e      	cmp	r6, r3
 800498a:	d900      	bls.n	800498e <__ssputs_r+0x8e>
 800498c:	9e01      	ldr	r6, [sp, #4]
 800498e:	0032      	movs	r2, r6
 8004990:	9903      	ldr	r1, [sp, #12]
 8004992:	6820      	ldr	r0, [r4, #0]
 8004994:	f000 ff80 	bl	8005898 <memmove>
 8004998:	68a3      	ldr	r3, [r4, #8]
 800499a:	2000      	movs	r0, #0
 800499c:	1b9b      	subs	r3, r3, r6
 800499e:	60a3      	str	r3, [r4, #8]
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	199e      	adds	r6, r3, r6
 80049a4:	6026      	str	r6, [r4, #0]
 80049a6:	e7da      	b.n	800495e <__ssputs_r+0x5e>
 80049a8:	002a      	movs	r2, r5
 80049aa:	0038      	movs	r0, r7
 80049ac:	f001 f830 	bl	8005a10 <_realloc_r>
 80049b0:	1e06      	subs	r6, r0, #0
 80049b2:	d1e0      	bne.n	8004976 <__ssputs_r+0x76>
 80049b4:	0038      	movs	r0, r7
 80049b6:	6921      	ldr	r1, [r4, #16]
 80049b8:	f000 ff82 	bl	80058c0 <_free_r>
 80049bc:	e7c7      	b.n	800494e <__ssputs_r+0x4e>
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	fffffb7f 	.word	0xfffffb7f

080049c4 <_svfiprintf_r>:
 80049c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c6:	b0a1      	sub	sp, #132	; 0x84
 80049c8:	9003      	str	r0, [sp, #12]
 80049ca:	001d      	movs	r5, r3
 80049cc:	898b      	ldrh	r3, [r1, #12]
 80049ce:	000f      	movs	r7, r1
 80049d0:	0016      	movs	r6, r2
 80049d2:	061b      	lsls	r3, r3, #24
 80049d4:	d511      	bpl.n	80049fa <_svfiprintf_r+0x36>
 80049d6:	690b      	ldr	r3, [r1, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10e      	bne.n	80049fa <_svfiprintf_r+0x36>
 80049dc:	2140      	movs	r1, #64	; 0x40
 80049de:	f000 ffb9 	bl	8005954 <_malloc_r>
 80049e2:	6038      	str	r0, [r7, #0]
 80049e4:	6138      	str	r0, [r7, #16]
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d105      	bne.n	80049f6 <_svfiprintf_r+0x32>
 80049ea:	230c      	movs	r3, #12
 80049ec:	9a03      	ldr	r2, [sp, #12]
 80049ee:	3801      	subs	r0, #1
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	b021      	add	sp, #132	; 0x84
 80049f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f6:	2340      	movs	r3, #64	; 0x40
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	2300      	movs	r3, #0
 80049fc:	ac08      	add	r4, sp, #32
 80049fe:	6163      	str	r3, [r4, #20]
 8004a00:	3320      	adds	r3, #32
 8004a02:	7663      	strb	r3, [r4, #25]
 8004a04:	3310      	adds	r3, #16
 8004a06:	76a3      	strb	r3, [r4, #26]
 8004a08:	9507      	str	r5, [sp, #28]
 8004a0a:	0035      	movs	r5, r6
 8004a0c:	782b      	ldrb	r3, [r5, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <_svfiprintf_r+0x52>
 8004a12:	2b25      	cmp	r3, #37	; 0x25
 8004a14:	d147      	bne.n	8004aa6 <_svfiprintf_r+0xe2>
 8004a16:	1bab      	subs	r3, r5, r6
 8004a18:	9305      	str	r3, [sp, #20]
 8004a1a:	42b5      	cmp	r5, r6
 8004a1c:	d00c      	beq.n	8004a38 <_svfiprintf_r+0x74>
 8004a1e:	0032      	movs	r2, r6
 8004a20:	0039      	movs	r1, r7
 8004a22:	9803      	ldr	r0, [sp, #12]
 8004a24:	f7ff ff6c 	bl	8004900 <__ssputs_r>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d100      	bne.n	8004a2e <_svfiprintf_r+0x6a>
 8004a2c:	e0ae      	b.n	8004b8c <_svfiprintf_r+0x1c8>
 8004a2e:	6962      	ldr	r2, [r4, #20]
 8004a30:	9b05      	ldr	r3, [sp, #20]
 8004a32:	4694      	mov	ip, r2
 8004a34:	4463      	add	r3, ip
 8004a36:	6163      	str	r3, [r4, #20]
 8004a38:	782b      	ldrb	r3, [r5, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d100      	bne.n	8004a40 <_svfiprintf_r+0x7c>
 8004a3e:	e0a5      	b.n	8004b8c <_svfiprintf_r+0x1c8>
 8004a40:	2201      	movs	r2, #1
 8004a42:	2300      	movs	r3, #0
 8004a44:	4252      	negs	r2, r2
 8004a46:	6062      	str	r2, [r4, #4]
 8004a48:	a904      	add	r1, sp, #16
 8004a4a:	3254      	adds	r2, #84	; 0x54
 8004a4c:	1852      	adds	r2, r2, r1
 8004a4e:	1c6e      	adds	r6, r5, #1
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	60e3      	str	r3, [r4, #12]
 8004a54:	60a3      	str	r3, [r4, #8]
 8004a56:	7013      	strb	r3, [r2, #0]
 8004a58:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a5a:	2205      	movs	r2, #5
 8004a5c:	7831      	ldrb	r1, [r6, #0]
 8004a5e:	4854      	ldr	r0, [pc, #336]	; (8004bb0 <_svfiprintf_r+0x1ec>)
 8004a60:	f000 ff06 	bl	8005870 <memchr>
 8004a64:	1c75      	adds	r5, r6, #1
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d11f      	bne.n	8004aaa <_svfiprintf_r+0xe6>
 8004a6a:	6822      	ldr	r2, [r4, #0]
 8004a6c:	06d3      	lsls	r3, r2, #27
 8004a6e:	d504      	bpl.n	8004a7a <_svfiprintf_r+0xb6>
 8004a70:	2353      	movs	r3, #83	; 0x53
 8004a72:	a904      	add	r1, sp, #16
 8004a74:	185b      	adds	r3, r3, r1
 8004a76:	2120      	movs	r1, #32
 8004a78:	7019      	strb	r1, [r3, #0]
 8004a7a:	0713      	lsls	r3, r2, #28
 8004a7c:	d504      	bpl.n	8004a88 <_svfiprintf_r+0xc4>
 8004a7e:	2353      	movs	r3, #83	; 0x53
 8004a80:	a904      	add	r1, sp, #16
 8004a82:	185b      	adds	r3, r3, r1
 8004a84:	212b      	movs	r1, #43	; 0x2b
 8004a86:	7019      	strb	r1, [r3, #0]
 8004a88:	7833      	ldrb	r3, [r6, #0]
 8004a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a8c:	d016      	beq.n	8004abc <_svfiprintf_r+0xf8>
 8004a8e:	0035      	movs	r5, r6
 8004a90:	2100      	movs	r1, #0
 8004a92:	200a      	movs	r0, #10
 8004a94:	68e3      	ldr	r3, [r4, #12]
 8004a96:	782a      	ldrb	r2, [r5, #0]
 8004a98:	1c6e      	adds	r6, r5, #1
 8004a9a:	3a30      	subs	r2, #48	; 0x30
 8004a9c:	2a09      	cmp	r2, #9
 8004a9e:	d94e      	bls.n	8004b3e <_svfiprintf_r+0x17a>
 8004aa0:	2900      	cmp	r1, #0
 8004aa2:	d111      	bne.n	8004ac8 <_svfiprintf_r+0x104>
 8004aa4:	e017      	b.n	8004ad6 <_svfiprintf_r+0x112>
 8004aa6:	3501      	adds	r5, #1
 8004aa8:	e7b0      	b.n	8004a0c <_svfiprintf_r+0x48>
 8004aaa:	4b41      	ldr	r3, [pc, #260]	; (8004bb0 <_svfiprintf_r+0x1ec>)
 8004aac:	6822      	ldr	r2, [r4, #0]
 8004aae:	1ac0      	subs	r0, r0, r3
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4083      	lsls	r3, r0
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	002e      	movs	r6, r5
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	e7ce      	b.n	8004a5a <_svfiprintf_r+0x96>
 8004abc:	9b07      	ldr	r3, [sp, #28]
 8004abe:	1d19      	adds	r1, r3, #4
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	9107      	str	r1, [sp, #28]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	db01      	blt.n	8004acc <_svfiprintf_r+0x108>
 8004ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004aca:	e004      	b.n	8004ad6 <_svfiprintf_r+0x112>
 8004acc:	425b      	negs	r3, r3
 8004ace:	60e3      	str	r3, [r4, #12]
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	782b      	ldrb	r3, [r5, #0]
 8004ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8004ada:	d10a      	bne.n	8004af2 <_svfiprintf_r+0x12e>
 8004adc:	786b      	ldrb	r3, [r5, #1]
 8004ade:	2b2a      	cmp	r3, #42	; 0x2a
 8004ae0:	d135      	bne.n	8004b4e <_svfiprintf_r+0x18a>
 8004ae2:	9b07      	ldr	r3, [sp, #28]
 8004ae4:	3502      	adds	r5, #2
 8004ae6:	1d1a      	adds	r2, r3, #4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	9207      	str	r2, [sp, #28]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	db2b      	blt.n	8004b48 <_svfiprintf_r+0x184>
 8004af0:	9309      	str	r3, [sp, #36]	; 0x24
 8004af2:	4e30      	ldr	r6, [pc, #192]	; (8004bb4 <_svfiprintf_r+0x1f0>)
 8004af4:	2203      	movs	r2, #3
 8004af6:	0030      	movs	r0, r6
 8004af8:	7829      	ldrb	r1, [r5, #0]
 8004afa:	f000 feb9 	bl	8005870 <memchr>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d006      	beq.n	8004b10 <_svfiprintf_r+0x14c>
 8004b02:	2340      	movs	r3, #64	; 0x40
 8004b04:	1b80      	subs	r0, r0, r6
 8004b06:	4083      	lsls	r3, r0
 8004b08:	6822      	ldr	r2, [r4, #0]
 8004b0a:	3501      	adds	r5, #1
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	6023      	str	r3, [r4, #0]
 8004b10:	7829      	ldrb	r1, [r5, #0]
 8004b12:	2206      	movs	r2, #6
 8004b14:	4828      	ldr	r0, [pc, #160]	; (8004bb8 <_svfiprintf_r+0x1f4>)
 8004b16:	1c6e      	adds	r6, r5, #1
 8004b18:	7621      	strb	r1, [r4, #24]
 8004b1a:	f000 fea9 	bl	8005870 <memchr>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d03c      	beq.n	8004b9c <_svfiprintf_r+0x1d8>
 8004b22:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <_svfiprintf_r+0x1f8>)
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d125      	bne.n	8004b74 <_svfiprintf_r+0x1b0>
 8004b28:	2207      	movs	r2, #7
 8004b2a:	9b07      	ldr	r3, [sp, #28]
 8004b2c:	3307      	adds	r3, #7
 8004b2e:	4393      	bics	r3, r2
 8004b30:	3308      	adds	r3, #8
 8004b32:	9307      	str	r3, [sp, #28]
 8004b34:	6963      	ldr	r3, [r4, #20]
 8004b36:	9a04      	ldr	r2, [sp, #16]
 8004b38:	189b      	adds	r3, r3, r2
 8004b3a:	6163      	str	r3, [r4, #20]
 8004b3c:	e765      	b.n	8004a0a <_svfiprintf_r+0x46>
 8004b3e:	4343      	muls	r3, r0
 8004b40:	0035      	movs	r5, r6
 8004b42:	2101      	movs	r1, #1
 8004b44:	189b      	adds	r3, r3, r2
 8004b46:	e7a6      	b.n	8004a96 <_svfiprintf_r+0xd2>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	425b      	negs	r3, r3
 8004b4c:	e7d0      	b.n	8004af0 <_svfiprintf_r+0x12c>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	200a      	movs	r0, #10
 8004b52:	001a      	movs	r2, r3
 8004b54:	3501      	adds	r5, #1
 8004b56:	6063      	str	r3, [r4, #4]
 8004b58:	7829      	ldrb	r1, [r5, #0]
 8004b5a:	1c6e      	adds	r6, r5, #1
 8004b5c:	3930      	subs	r1, #48	; 0x30
 8004b5e:	2909      	cmp	r1, #9
 8004b60:	d903      	bls.n	8004b6a <_svfiprintf_r+0x1a6>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0c5      	beq.n	8004af2 <_svfiprintf_r+0x12e>
 8004b66:	9209      	str	r2, [sp, #36]	; 0x24
 8004b68:	e7c3      	b.n	8004af2 <_svfiprintf_r+0x12e>
 8004b6a:	4342      	muls	r2, r0
 8004b6c:	0035      	movs	r5, r6
 8004b6e:	2301      	movs	r3, #1
 8004b70:	1852      	adds	r2, r2, r1
 8004b72:	e7f1      	b.n	8004b58 <_svfiprintf_r+0x194>
 8004b74:	ab07      	add	r3, sp, #28
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	003a      	movs	r2, r7
 8004b7a:	0021      	movs	r1, r4
 8004b7c:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <_svfiprintf_r+0x1fc>)
 8004b7e:	9803      	ldr	r0, [sp, #12]
 8004b80:	e000      	b.n	8004b84 <_svfiprintf_r+0x1c0>
 8004b82:	bf00      	nop
 8004b84:	9004      	str	r0, [sp, #16]
 8004b86:	9b04      	ldr	r3, [sp, #16]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	d1d3      	bne.n	8004b34 <_svfiprintf_r+0x170>
 8004b8c:	89bb      	ldrh	r3, [r7, #12]
 8004b8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b90:	065b      	lsls	r3, r3, #25
 8004b92:	d400      	bmi.n	8004b96 <_svfiprintf_r+0x1d2>
 8004b94:	e72d      	b.n	80049f2 <_svfiprintf_r+0x2e>
 8004b96:	2001      	movs	r0, #1
 8004b98:	4240      	negs	r0, r0
 8004b9a:	e72a      	b.n	80049f2 <_svfiprintf_r+0x2e>
 8004b9c:	ab07      	add	r3, sp, #28
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	003a      	movs	r2, r7
 8004ba2:	0021      	movs	r1, r4
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <_svfiprintf_r+0x1fc>)
 8004ba6:	9803      	ldr	r0, [sp, #12]
 8004ba8:	f000 fa50 	bl	800504c <_printf_i>
 8004bac:	e7ea      	b.n	8004b84 <_svfiprintf_r+0x1c0>
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	08005bc4 	.word	0x08005bc4
 8004bb4:	08005bca 	.word	0x08005bca
 8004bb8:	08005bce 	.word	0x08005bce
 8004bbc:	00000000 	.word	0x00000000
 8004bc0:	08004901 	.word	0x08004901

08004bc4 <_sungetc_r>:
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	0014      	movs	r4, r2
 8004bc8:	1c4b      	adds	r3, r1, #1
 8004bca:	d103      	bne.n	8004bd4 <_sungetc_r+0x10>
 8004bcc:	2501      	movs	r5, #1
 8004bce:	426d      	negs	r5, r5
 8004bd0:	0028      	movs	r0, r5
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	8993      	ldrh	r3, [r2, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	4393      	bics	r3, r2
 8004bda:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004bdc:	81a3      	strh	r3, [r4, #12]
 8004bde:	b2ce      	uxtb	r6, r1
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	b2cd      	uxtb	r5, r1
 8004be4:	2a00      	cmp	r2, #0
 8004be6:	d010      	beq.n	8004c0a <_sungetc_r+0x46>
 8004be8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004bea:	429a      	cmp	r2, r3
 8004bec:	dd07      	ble.n	8004bfe <_sungetc_r+0x3a>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	6023      	str	r3, [r4, #0]
 8004bf4:	701e      	strb	r6, [r3, #0]
 8004bf6:	6863      	ldr	r3, [r4, #4]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	6063      	str	r3, [r4, #4]
 8004bfc:	e7e8      	b.n	8004bd0 <_sungetc_r+0xc>
 8004bfe:	0021      	movs	r1, r4
 8004c00:	f000 fdf6 	bl	80057f0 <__submore>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d0f2      	beq.n	8004bee <_sungetc_r+0x2a>
 8004c08:	e7e0      	b.n	8004bcc <_sungetc_r+0x8>
 8004c0a:	6921      	ldr	r1, [r4, #16]
 8004c0c:	6822      	ldr	r2, [r4, #0]
 8004c0e:	2900      	cmp	r1, #0
 8004c10:	d007      	beq.n	8004c22 <_sungetc_r+0x5e>
 8004c12:	4291      	cmp	r1, r2
 8004c14:	d205      	bcs.n	8004c22 <_sungetc_r+0x5e>
 8004c16:	1e51      	subs	r1, r2, #1
 8004c18:	7808      	ldrb	r0, [r1, #0]
 8004c1a:	42a8      	cmp	r0, r5
 8004c1c:	d101      	bne.n	8004c22 <_sungetc_r+0x5e>
 8004c1e:	6021      	str	r1, [r4, #0]
 8004c20:	e7ea      	b.n	8004bf8 <_sungetc_r+0x34>
 8004c22:	6423      	str	r3, [r4, #64]	; 0x40
 8004c24:	0023      	movs	r3, r4
 8004c26:	3344      	adds	r3, #68	; 0x44
 8004c28:	6363      	str	r3, [r4, #52]	; 0x34
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c2e:	0023      	movs	r3, r4
 8004c30:	3346      	adds	r3, #70	; 0x46
 8004c32:	63e2      	str	r2, [r4, #60]	; 0x3c
 8004c34:	701e      	strb	r6, [r3, #0]
 8004c36:	6023      	str	r3, [r4, #0]
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e7de      	b.n	8004bfa <_sungetc_r+0x36>

08004c3c <__ssrefill_r>:
 8004c3c:	b510      	push	{r4, lr}
 8004c3e:	000c      	movs	r4, r1
 8004c40:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004c42:	2900      	cmp	r1, #0
 8004c44:	d00e      	beq.n	8004c64 <__ssrefill_r+0x28>
 8004c46:	0023      	movs	r3, r4
 8004c48:	3344      	adds	r3, #68	; 0x44
 8004c4a:	4299      	cmp	r1, r3
 8004c4c:	d001      	beq.n	8004c52 <__ssrefill_r+0x16>
 8004c4e:	f000 fe37 	bl	80058c0 <_free_r>
 8004c52:	2000      	movs	r0, #0
 8004c54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c56:	6360      	str	r0, [r4, #52]	; 0x34
 8004c58:	6063      	str	r3, [r4, #4]
 8004c5a:	4283      	cmp	r3, r0
 8004c5c:	d002      	beq.n	8004c64 <__ssrefill_r+0x28>
 8004c5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd10      	pop	{r4, pc}
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	2001      	movs	r0, #1
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	89a2      	ldrh	r2, [r4, #12]
 8004c6e:	6063      	str	r3, [r4, #4]
 8004c70:	3320      	adds	r3, #32
 8004c72:	4313      	orrs	r3, r2
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	4240      	negs	r0, r0
 8004c78:	e7f3      	b.n	8004c62 <__ssrefill_r+0x26>
	...

08004c7c <__ssvfiscanf_r>:
 8004c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c7e:	4cb5      	ldr	r4, [pc, #724]	; (8004f54 <__ssvfiscanf_r+0x2d8>)
 8004c80:	0005      	movs	r5, r0
 8004c82:	44a5      	add	sp, r4
 8004c84:	000c      	movs	r4, r1
 8004c86:	2100      	movs	r1, #0
 8004c88:	9148      	str	r1, [sp, #288]	; 0x120
 8004c8a:	9149      	str	r1, [sp, #292]	; 0x124
 8004c8c:	a905      	add	r1, sp, #20
 8004c8e:	914a      	str	r1, [sp, #296]	; 0x128
 8004c90:	21be      	movs	r1, #190	; 0xbe
 8004c92:	48b1      	ldr	r0, [pc, #708]	; (8004f58 <__ssvfiscanf_r+0x2dc>)
 8004c94:	0049      	lsls	r1, r1, #1
 8004c96:	ae45      	add	r6, sp, #276	; 0x114
 8004c98:	5070      	str	r0, [r6, r1]
 8004c9a:	48b0      	ldr	r0, [pc, #704]	; (8004f5c <__ssvfiscanf_r+0x2e0>)
 8004c9c:	3104      	adds	r1, #4
 8004c9e:	ae45      	add	r6, sp, #276	; 0x114
 8004ca0:	5070      	str	r0, [r6, r1]
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	9101      	str	r1, [sp, #4]
 8004ca6:	7813      	ldrb	r3, [r2, #0]
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d100      	bne.n	8004cb0 <__ssvfiscanf_r+0x34>
 8004cae:	e14f      	b.n	8004f50 <__ssvfiscanf_r+0x2d4>
 8004cb0:	4fab      	ldr	r7, [pc, #684]	; (8004f60 <__ssvfiscanf_r+0x2e4>)
 8004cb2:	2008      	movs	r0, #8
 8004cb4:	5cf9      	ldrb	r1, [r7, r3]
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	1c56      	adds	r6, r2, #1
 8004cba:	400b      	ands	r3, r1
 8004cbc:	4201      	tst	r1, r0
 8004cbe:	d01e      	beq.n	8004cfe <__ssvfiscanf_r+0x82>
 8004cc0:	6863      	ldr	r3, [r4, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	dd11      	ble.n	8004cea <__ssvfiscanf_r+0x6e>
 8004cc6:	2108      	movs	r1, #8
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	781a      	ldrb	r2, [r3, #0]
 8004ccc:	5cba      	ldrb	r2, [r7, r2]
 8004cce:	420a      	tst	r2, r1
 8004cd0:	d101      	bne.n	8004cd6 <__ssvfiscanf_r+0x5a>
 8004cd2:	0032      	movs	r2, r6
 8004cd4:	e7e7      	b.n	8004ca6 <__ssvfiscanf_r+0x2a>
 8004cd6:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8004cd8:	3301      	adds	r3, #1
 8004cda:	9200      	str	r2, [sp, #0]
 8004cdc:	3201      	adds	r2, #1
 8004cde:	9249      	str	r2, [sp, #292]	; 0x124
 8004ce0:	6862      	ldr	r2, [r4, #4]
 8004ce2:	6023      	str	r3, [r4, #0]
 8004ce4:	3a01      	subs	r2, #1
 8004ce6:	6062      	str	r2, [r4, #4]
 8004ce8:	e7ea      	b.n	8004cc0 <__ssvfiscanf_r+0x44>
 8004cea:	9a01      	ldr	r2, [sp, #4]
 8004cec:	ab45      	add	r3, sp, #276	; 0x114
 8004cee:	589b      	ldr	r3, [r3, r2]
 8004cf0:	0021      	movs	r1, r4
 8004cf2:	0028      	movs	r0, r5
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	4798      	blx	r3
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d0e4      	beq.n	8004cc6 <__ssvfiscanf_r+0x4a>
 8004cfc:	e7e9      	b.n	8004cd2 <__ssvfiscanf_r+0x56>
 8004cfe:	9900      	ldr	r1, [sp, #0]
 8004d00:	2925      	cmp	r1, #37	; 0x25
 8004d02:	d164      	bne.n	8004dce <__ssvfiscanf_r+0x152>
 8004d04:	9347      	str	r3, [sp, #284]	; 0x11c
 8004d06:	9345      	str	r3, [sp, #276]	; 0x114
 8004d08:	7853      	ldrb	r3, [r2, #1]
 8004d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d0c:	d102      	bne.n	8004d14 <__ssvfiscanf_r+0x98>
 8004d0e:	3b1a      	subs	r3, #26
 8004d10:	9345      	str	r3, [sp, #276]	; 0x114
 8004d12:	1c96      	adds	r6, r2, #2
 8004d14:	0037      	movs	r7, r6
 8004d16:	200a      	movs	r0, #10
 8004d18:	7839      	ldrb	r1, [r7, #0]
 8004d1a:	1c7b      	adds	r3, r7, #1
 8004d1c:	9302      	str	r3, [sp, #8]
 8004d1e:	000b      	movs	r3, r1
 8004d20:	3b30      	subs	r3, #48	; 0x30
 8004d22:	2b09      	cmp	r3, #9
 8004d24:	d91f      	bls.n	8004d66 <__ssvfiscanf_r+0xea>
 8004d26:	4e8f      	ldr	r6, [pc, #572]	; (8004f64 <__ssvfiscanf_r+0x2e8>)
 8004d28:	2203      	movs	r2, #3
 8004d2a:	0030      	movs	r0, r6
 8004d2c:	f000 fda0 	bl	8005870 <memchr>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d007      	beq.n	8004d44 <__ssvfiscanf_r+0xc8>
 8004d34:	2301      	movs	r3, #1
 8004d36:	1b80      	subs	r0, r0, r6
 8004d38:	4083      	lsls	r3, r0
 8004d3a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004d3c:	9f02      	ldr	r7, [sp, #8]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	9203      	str	r2, [sp, #12]
 8004d42:	9345      	str	r3, [sp, #276]	; 0x114
 8004d44:	783b      	ldrb	r3, [r7, #0]
 8004d46:	1c7e      	adds	r6, r7, #1
 8004d48:	2b78      	cmp	r3, #120	; 0x78
 8004d4a:	d807      	bhi.n	8004d5c <__ssvfiscanf_r+0xe0>
 8004d4c:	2b57      	cmp	r3, #87	; 0x57
 8004d4e:	d812      	bhi.n	8004d76 <__ssvfiscanf_r+0xfa>
 8004d50:	2b25      	cmp	r3, #37	; 0x25
 8004d52:	d03c      	beq.n	8004dce <__ssvfiscanf_r+0x152>
 8004d54:	d836      	bhi.n	8004dc4 <__ssvfiscanf_r+0x148>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d100      	bne.n	8004d5c <__ssvfiscanf_r+0xe0>
 8004d5a:	e0f6      	b.n	8004f4a <__ssvfiscanf_r+0x2ce>
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	934b      	str	r3, [sp, #300]	; 0x12c
 8004d60:	3307      	adds	r3, #7
 8004d62:	9346      	str	r3, [sp, #280]	; 0x118
 8004d64:	e076      	b.n	8004e54 <__ssvfiscanf_r+0x1d8>
 8004d66:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004d68:	9f02      	ldr	r7, [sp, #8]
 8004d6a:	9303      	str	r3, [sp, #12]
 8004d6c:	4343      	muls	r3, r0
 8004d6e:	3b30      	subs	r3, #48	; 0x30
 8004d70:	185b      	adds	r3, r3, r1
 8004d72:	9347      	str	r3, [sp, #284]	; 0x11c
 8004d74:	e7d0      	b.n	8004d18 <__ssvfiscanf_r+0x9c>
 8004d76:	0018      	movs	r0, r3
 8004d78:	3858      	subs	r0, #88	; 0x58
 8004d7a:	2820      	cmp	r0, #32
 8004d7c:	d8ee      	bhi.n	8004d5c <__ssvfiscanf_r+0xe0>
 8004d7e:	f7fb f9cb 	bl	8000118 <__gnu_thumb1_case_shi>
 8004d82:	0051      	.short	0x0051
 8004d84:	ffedffed 	.word	0xffedffed
 8004d88:	ffed0086 	.word	0xffed0086
 8004d8c:	ffedffed 	.word	0xffedffed
 8004d90:	ffedffed 	.word	0xffedffed
 8004d94:	ffedffed 	.word	0xffedffed
 8004d98:	00600093 	.word	0x00600093
 8004d9c:	00240024 	.word	0x00240024
 8004da0:	ffed0024 	.word	0xffed0024
 8004da4:	ffed0062 	.word	0xffed0062
 8004da8:	ffedffed 	.word	0xffedffed
 8004dac:	009dffed 	.word	0x009dffed
 8004db0:	004b0065 	.word	0x004b0065
 8004db4:	ffedffed 	.word	0xffedffed
 8004db8:	ffed009b 	.word	0xffed009b
 8004dbc:	ffed0060 	.word	0xffed0060
 8004dc0:	0051ffed 	.word	0x0051ffed
 8004dc4:	3b45      	subs	r3, #69	; 0x45
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d8c8      	bhi.n	8004d5c <__ssvfiscanf_r+0xe0>
 8004dca:	2305      	movs	r3, #5
 8004dcc:	e041      	b.n	8004e52 <__ssvfiscanf_r+0x1d6>
 8004dce:	6863      	ldr	r3, [r4, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	dd0f      	ble.n	8004df4 <__ssvfiscanf_r+0x178>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	9900      	ldr	r1, [sp, #0]
 8004dd8:	781a      	ldrb	r2, [r3, #0]
 8004dda:	428a      	cmp	r2, r1
 8004ddc:	d000      	beq.n	8004de0 <__ssvfiscanf_r+0x164>
 8004dde:	e0b7      	b.n	8004f50 <__ssvfiscanf_r+0x2d4>
 8004de0:	3301      	adds	r3, #1
 8004de2:	6862      	ldr	r2, [r4, #4]
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8004de8:	3a01      	subs	r2, #1
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	3301      	adds	r3, #1
 8004dee:	6062      	str	r2, [r4, #4]
 8004df0:	9349      	str	r3, [sp, #292]	; 0x124
 8004df2:	e76e      	b.n	8004cd2 <__ssvfiscanf_r+0x56>
 8004df4:	9a01      	ldr	r2, [sp, #4]
 8004df6:	ab45      	add	r3, sp, #276	; 0x114
 8004df8:	589b      	ldr	r3, [r3, r2]
 8004dfa:	0021      	movs	r1, r4
 8004dfc:	0028      	movs	r0, r5
 8004dfe:	9302      	str	r3, [sp, #8]
 8004e00:	4798      	blx	r3
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d0e6      	beq.n	8004dd4 <__ssvfiscanf_r+0x158>
 8004e06:	9848      	ldr	r0, [sp, #288]	; 0x120
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d000      	beq.n	8004e0e <__ssvfiscanf_r+0x192>
 8004e0c:	e099      	b.n	8004f42 <__ssvfiscanf_r+0x2c6>
 8004e0e:	3801      	subs	r0, #1
 8004e10:	23a7      	movs	r3, #167	; 0xa7
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	449d      	add	sp, r3
 8004e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e1a:	9200      	str	r2, [sp, #0]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	9900      	ldr	r1, [sp, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	9245      	str	r2, [sp, #276]	; 0x114
 8004e24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e26:	9200      	str	r2, [sp, #0]
 8004e28:	2280      	movs	r2, #128	; 0x80
 8004e2a:	9900      	ldr	r1, [sp, #0]
 8004e2c:	0092      	lsls	r2, r2, #2
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	9245      	str	r2, [sp, #276]	; 0x114
 8004e32:	2210      	movs	r2, #16
 8004e34:	9246      	str	r2, [sp, #280]	; 0x118
 8004e36:	226e      	movs	r2, #110	; 0x6e
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	419b      	sbcs	r3, r3
 8004e3c:	425b      	negs	r3, r3
 8004e3e:	3303      	adds	r3, #3
 8004e40:	e007      	b.n	8004e52 <__ssvfiscanf_r+0x1d6>
 8004e42:	220a      	movs	r2, #10
 8004e44:	e7f6      	b.n	8004e34 <__ssvfiscanf_r+0x1b8>
 8004e46:	2300      	movs	r3, #0
 8004e48:	9346      	str	r3, [sp, #280]	; 0x118
 8004e4a:	e7f8      	b.n	8004e3e <__ssvfiscanf_r+0x1c2>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	9346      	str	r3, [sp, #280]	; 0x118
 8004e50:	3b04      	subs	r3, #4
 8004e52:	934b      	str	r3, [sp, #300]	; 0x12c
 8004e54:	6863      	ldr	r3, [r4, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	dd3f      	ble.n	8004eda <__ssvfiscanf_r+0x25e>
 8004e5a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	065b      	lsls	r3, r3, #25
 8004e60:	d406      	bmi.n	8004e70 <__ssvfiscanf_r+0x1f4>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	493e      	ldr	r1, [pc, #248]	; (8004f60 <__ssvfiscanf_r+0x2e4>)
 8004e66:	781a      	ldrb	r2, [r3, #0]
 8004e68:	5c8a      	ldrb	r2, [r1, r2]
 8004e6a:	2108      	movs	r1, #8
 8004e6c:	420a      	tst	r2, r1
 8004e6e:	d13e      	bne.n	8004eee <__ssvfiscanf_r+0x272>
 8004e70:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	dc51      	bgt.n	8004f1a <__ssvfiscanf_r+0x29e>
 8004e76:	0022      	movs	r2, r4
 8004e78:	0028      	movs	r0, r5
 8004e7a:	ab04      	add	r3, sp, #16
 8004e7c:	a945      	add	r1, sp, #276	; 0x114
 8004e7e:	f000 f9f7 	bl	8005270 <_scanf_chars>
 8004e82:	2801      	cmp	r0, #1
 8004e84:	d064      	beq.n	8004f50 <__ssvfiscanf_r+0x2d4>
 8004e86:	2802      	cmp	r0, #2
 8004e88:	d000      	beq.n	8004e8c <__ssvfiscanf_r+0x210>
 8004e8a:	e722      	b.n	8004cd2 <__ssvfiscanf_r+0x56>
 8004e8c:	e7bb      	b.n	8004e06 <__ssvfiscanf_r+0x18a>
 8004e8e:	0031      	movs	r1, r6
 8004e90:	a805      	add	r0, sp, #20
 8004e92:	f000 fb4f 	bl	8005534 <__sccl>
 8004e96:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004e98:	0006      	movs	r6, r0
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	2340      	movs	r3, #64	; 0x40
 8004e9e:	9a00      	ldr	r2, [sp, #0]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	9345      	str	r3, [sp, #276]	; 0x114
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e7d4      	b.n	8004e52 <__ssvfiscanf_r+0x1d6>
 8004ea8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	2340      	movs	r3, #64	; 0x40
 8004eae:	9a00      	ldr	r2, [sp, #0]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	9345      	str	r3, [sp, #276]	; 0x114
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e7cc      	b.n	8004e52 <__ssvfiscanf_r+0x1d6>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e7ca      	b.n	8004e52 <__ssvfiscanf_r+0x1d6>
 8004ebc:	9845      	ldr	r0, [sp, #276]	; 0x114
 8004ebe:	06c3      	lsls	r3, r0, #27
 8004ec0:	d500      	bpl.n	8004ec4 <__ssvfiscanf_r+0x248>
 8004ec2:	e706      	b.n	8004cd2 <__ssvfiscanf_r+0x56>
 8004ec4:	9b04      	ldr	r3, [sp, #16]
 8004ec6:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8004ec8:	1d19      	adds	r1, r3, #4
 8004eca:	9104      	str	r1, [sp, #16]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	07c7      	lsls	r7, r0, #31
 8004ed0:	d501      	bpl.n	8004ed6 <__ssvfiscanf_r+0x25a>
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	e6fd      	b.n	8004cd2 <__ssvfiscanf_r+0x56>
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	e6fb      	b.n	8004cd2 <__ssvfiscanf_r+0x56>
 8004eda:	9a01      	ldr	r2, [sp, #4]
 8004edc:	ab45      	add	r3, sp, #276	; 0x114
 8004ede:	589b      	ldr	r3, [r3, r2]
 8004ee0:	0021      	movs	r1, r4
 8004ee2:	0028      	movs	r0, r5
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	4798      	blx	r3
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d0b6      	beq.n	8004e5a <__ssvfiscanf_r+0x1de>
 8004eec:	e78b      	b.n	8004e06 <__ssvfiscanf_r+0x18a>
 8004eee:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8004ef0:	9200      	str	r2, [sp, #0]
 8004ef2:	3201      	adds	r2, #1
 8004ef4:	9249      	str	r2, [sp, #292]	; 0x124
 8004ef6:	6862      	ldr	r2, [r4, #4]
 8004ef8:	3a01      	subs	r2, #1
 8004efa:	6062      	str	r2, [r4, #4]
 8004efc:	2a00      	cmp	r2, #0
 8004efe:	dd02      	ble.n	8004f06 <__ssvfiscanf_r+0x28a>
 8004f00:	3301      	adds	r3, #1
 8004f02:	6023      	str	r3, [r4, #0]
 8004f04:	e7ad      	b.n	8004e62 <__ssvfiscanf_r+0x1e6>
 8004f06:	9a01      	ldr	r2, [sp, #4]
 8004f08:	ab45      	add	r3, sp, #276	; 0x114
 8004f0a:	589b      	ldr	r3, [r3, r2]
 8004f0c:	0021      	movs	r1, r4
 8004f0e:	0028      	movs	r0, r5
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	4798      	blx	r3
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d0a4      	beq.n	8004e62 <__ssvfiscanf_r+0x1e6>
 8004f18:	e775      	b.n	8004e06 <__ssvfiscanf_r+0x18a>
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	dc06      	bgt.n	8004f2c <__ssvfiscanf_r+0x2b0>
 8004f1e:	0022      	movs	r2, r4
 8004f20:	0028      	movs	r0, r5
 8004f22:	ab04      	add	r3, sp, #16
 8004f24:	a945      	add	r1, sp, #276	; 0x114
 8004f26:	f000 fa01 	bl	800532c <_scanf_i>
 8004f2a:	e7aa      	b.n	8004e82 <__ssvfiscanf_r+0x206>
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <__ssvfiscanf_r+0x2ec>)
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d100      	bne.n	8004f34 <__ssvfiscanf_r+0x2b8>
 8004f32:	e6ce      	b.n	8004cd2 <__ssvfiscanf_r+0x56>
 8004f34:	0022      	movs	r2, r4
 8004f36:	0028      	movs	r0, r5
 8004f38:	ab04      	add	r3, sp, #16
 8004f3a:	a945      	add	r1, sp, #276	; 0x114
 8004f3c:	e000      	b.n	8004f40 <__ssvfiscanf_r+0x2c4>
 8004f3e:	bf00      	nop
 8004f40:	e79f      	b.n	8004e82 <__ssvfiscanf_r+0x206>
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	065b      	lsls	r3, r3, #25
 8004f46:	d400      	bmi.n	8004f4a <__ssvfiscanf_r+0x2ce>
 8004f48:	e762      	b.n	8004e10 <__ssvfiscanf_r+0x194>
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	4240      	negs	r0, r0
 8004f4e:	e75f      	b.n	8004e10 <__ssvfiscanf_r+0x194>
 8004f50:	9848      	ldr	r0, [sp, #288]	; 0x120
 8004f52:	e75d      	b.n	8004e10 <__ssvfiscanf_r+0x194>
 8004f54:	fffffd64 	.word	0xfffffd64
 8004f58:	08004bc5 	.word	0x08004bc5
 8004f5c:	08004c3d 	.word	0x08004c3d
 8004f60:	08005c13 	.word	0x08005c13
 8004f64:	08005bca 	.word	0x08005bca
 8004f68:	00000000 	.word	0x00000000

08004f6c <_printf_common>:
 8004f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f6e:	0015      	movs	r5, r2
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	688a      	ldr	r2, [r1, #8]
 8004f74:	690b      	ldr	r3, [r1, #16]
 8004f76:	000c      	movs	r4, r1
 8004f78:	9000      	str	r0, [sp, #0]
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	da00      	bge.n	8004f80 <_printf_common+0x14>
 8004f7e:	0013      	movs	r3, r2
 8004f80:	0022      	movs	r2, r4
 8004f82:	602b      	str	r3, [r5, #0]
 8004f84:	3243      	adds	r2, #67	; 0x43
 8004f86:	7812      	ldrb	r2, [r2, #0]
 8004f88:	2a00      	cmp	r2, #0
 8004f8a:	d001      	beq.n	8004f90 <_printf_common+0x24>
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	069b      	lsls	r3, r3, #26
 8004f94:	d502      	bpl.n	8004f9c <_printf_common+0x30>
 8004f96:	682b      	ldr	r3, [r5, #0]
 8004f98:	3302      	adds	r3, #2
 8004f9a:	602b      	str	r3, [r5, #0]
 8004f9c:	6822      	ldr	r2, [r4, #0]
 8004f9e:	2306      	movs	r3, #6
 8004fa0:	0017      	movs	r7, r2
 8004fa2:	401f      	ands	r7, r3
 8004fa4:	421a      	tst	r2, r3
 8004fa6:	d027      	beq.n	8004ff8 <_printf_common+0x8c>
 8004fa8:	0023      	movs	r3, r4
 8004faa:	3343      	adds	r3, #67	; 0x43
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	1e5a      	subs	r2, r3, #1
 8004fb0:	4193      	sbcs	r3, r2
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	0692      	lsls	r2, r2, #26
 8004fb6:	d430      	bmi.n	800501a <_printf_common+0xae>
 8004fb8:	0022      	movs	r2, r4
 8004fba:	9901      	ldr	r1, [sp, #4]
 8004fbc:	9800      	ldr	r0, [sp, #0]
 8004fbe:	9e08      	ldr	r6, [sp, #32]
 8004fc0:	3243      	adds	r2, #67	; 0x43
 8004fc2:	47b0      	blx	r6
 8004fc4:	1c43      	adds	r3, r0, #1
 8004fc6:	d025      	beq.n	8005014 <_printf_common+0xa8>
 8004fc8:	2306      	movs	r3, #6
 8004fca:	6820      	ldr	r0, [r4, #0]
 8004fcc:	682a      	ldr	r2, [r5, #0]
 8004fce:	68e1      	ldr	r1, [r4, #12]
 8004fd0:	2500      	movs	r5, #0
 8004fd2:	4003      	ands	r3, r0
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d103      	bne.n	8004fe0 <_printf_common+0x74>
 8004fd8:	1a8d      	subs	r5, r1, r2
 8004fda:	43eb      	mvns	r3, r5
 8004fdc:	17db      	asrs	r3, r3, #31
 8004fde:	401d      	ands	r5, r3
 8004fe0:	68a3      	ldr	r3, [r4, #8]
 8004fe2:	6922      	ldr	r2, [r4, #16]
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	dd01      	ble.n	8004fec <_printf_common+0x80>
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	18ed      	adds	r5, r5, r3
 8004fec:	2700      	movs	r7, #0
 8004fee:	42bd      	cmp	r5, r7
 8004ff0:	d120      	bne.n	8005034 <_printf_common+0xc8>
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e010      	b.n	8005018 <_printf_common+0xac>
 8004ff6:	3701      	adds	r7, #1
 8004ff8:	68e3      	ldr	r3, [r4, #12]
 8004ffa:	682a      	ldr	r2, [r5, #0]
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	42bb      	cmp	r3, r7
 8005000:	ddd2      	ble.n	8004fa8 <_printf_common+0x3c>
 8005002:	0022      	movs	r2, r4
 8005004:	2301      	movs	r3, #1
 8005006:	9901      	ldr	r1, [sp, #4]
 8005008:	9800      	ldr	r0, [sp, #0]
 800500a:	9e08      	ldr	r6, [sp, #32]
 800500c:	3219      	adds	r2, #25
 800500e:	47b0      	blx	r6
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d1f0      	bne.n	8004ff6 <_printf_common+0x8a>
 8005014:	2001      	movs	r0, #1
 8005016:	4240      	negs	r0, r0
 8005018:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800501a:	2030      	movs	r0, #48	; 0x30
 800501c:	18e1      	adds	r1, r4, r3
 800501e:	3143      	adds	r1, #67	; 0x43
 8005020:	7008      	strb	r0, [r1, #0]
 8005022:	0021      	movs	r1, r4
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	3145      	adds	r1, #69	; 0x45
 8005028:	7809      	ldrb	r1, [r1, #0]
 800502a:	18a2      	adds	r2, r4, r2
 800502c:	3243      	adds	r2, #67	; 0x43
 800502e:	3302      	adds	r3, #2
 8005030:	7011      	strb	r1, [r2, #0]
 8005032:	e7c1      	b.n	8004fb8 <_printf_common+0x4c>
 8005034:	0022      	movs	r2, r4
 8005036:	2301      	movs	r3, #1
 8005038:	9901      	ldr	r1, [sp, #4]
 800503a:	9800      	ldr	r0, [sp, #0]
 800503c:	9e08      	ldr	r6, [sp, #32]
 800503e:	321a      	adds	r2, #26
 8005040:	47b0      	blx	r6
 8005042:	1c43      	adds	r3, r0, #1
 8005044:	d0e6      	beq.n	8005014 <_printf_common+0xa8>
 8005046:	3701      	adds	r7, #1
 8005048:	e7d1      	b.n	8004fee <_printf_common+0x82>
	...

0800504c <_printf_i>:
 800504c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800504e:	b08b      	sub	sp, #44	; 0x2c
 8005050:	9206      	str	r2, [sp, #24]
 8005052:	000a      	movs	r2, r1
 8005054:	3243      	adds	r2, #67	; 0x43
 8005056:	9307      	str	r3, [sp, #28]
 8005058:	9005      	str	r0, [sp, #20]
 800505a:	9204      	str	r2, [sp, #16]
 800505c:	7e0a      	ldrb	r2, [r1, #24]
 800505e:	000c      	movs	r4, r1
 8005060:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005062:	2a78      	cmp	r2, #120	; 0x78
 8005064:	d806      	bhi.n	8005074 <_printf_i+0x28>
 8005066:	2a62      	cmp	r2, #98	; 0x62
 8005068:	d808      	bhi.n	800507c <_printf_i+0x30>
 800506a:	2a00      	cmp	r2, #0
 800506c:	d100      	bne.n	8005070 <_printf_i+0x24>
 800506e:	e0c0      	b.n	80051f2 <_printf_i+0x1a6>
 8005070:	2a58      	cmp	r2, #88	; 0x58
 8005072:	d052      	beq.n	800511a <_printf_i+0xce>
 8005074:	0026      	movs	r6, r4
 8005076:	3642      	adds	r6, #66	; 0x42
 8005078:	7032      	strb	r2, [r6, #0]
 800507a:	e022      	b.n	80050c2 <_printf_i+0x76>
 800507c:	0010      	movs	r0, r2
 800507e:	3863      	subs	r0, #99	; 0x63
 8005080:	2815      	cmp	r0, #21
 8005082:	d8f7      	bhi.n	8005074 <_printf_i+0x28>
 8005084:	f7fb f848 	bl	8000118 <__gnu_thumb1_case_shi>
 8005088:	001f0016 	.word	0x001f0016
 800508c:	fff6fff6 	.word	0xfff6fff6
 8005090:	fff6fff6 	.word	0xfff6fff6
 8005094:	fff6001f 	.word	0xfff6001f
 8005098:	fff6fff6 	.word	0xfff6fff6
 800509c:	00a8fff6 	.word	0x00a8fff6
 80050a0:	009a0036 	.word	0x009a0036
 80050a4:	fff6fff6 	.word	0xfff6fff6
 80050a8:	fff600b9 	.word	0xfff600b9
 80050ac:	fff60036 	.word	0xfff60036
 80050b0:	009efff6 	.word	0x009efff6
 80050b4:	0026      	movs	r6, r4
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	3642      	adds	r6, #66	; 0x42
 80050ba:	1d11      	adds	r1, r2, #4
 80050bc:	6019      	str	r1, [r3, #0]
 80050be:	6813      	ldr	r3, [r2, #0]
 80050c0:	7033      	strb	r3, [r6, #0]
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0a7      	b.n	8005216 <_printf_i+0x1ca>
 80050c6:	6808      	ldr	r0, [r1, #0]
 80050c8:	6819      	ldr	r1, [r3, #0]
 80050ca:	1d0a      	adds	r2, r1, #4
 80050cc:	0605      	lsls	r5, r0, #24
 80050ce:	d50b      	bpl.n	80050e8 <_printf_i+0x9c>
 80050d0:	680d      	ldr	r5, [r1, #0]
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	2d00      	cmp	r5, #0
 80050d6:	da03      	bge.n	80050e0 <_printf_i+0x94>
 80050d8:	232d      	movs	r3, #45	; 0x2d
 80050da:	9a04      	ldr	r2, [sp, #16]
 80050dc:	426d      	negs	r5, r5
 80050de:	7013      	strb	r3, [r2, #0]
 80050e0:	4b61      	ldr	r3, [pc, #388]	; (8005268 <_printf_i+0x21c>)
 80050e2:	270a      	movs	r7, #10
 80050e4:	9303      	str	r3, [sp, #12]
 80050e6:	e032      	b.n	800514e <_printf_i+0x102>
 80050e8:	680d      	ldr	r5, [r1, #0]
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	0641      	lsls	r1, r0, #25
 80050ee:	d5f1      	bpl.n	80050d4 <_printf_i+0x88>
 80050f0:	b22d      	sxth	r5, r5
 80050f2:	e7ef      	b.n	80050d4 <_printf_i+0x88>
 80050f4:	680d      	ldr	r5, [r1, #0]
 80050f6:	6819      	ldr	r1, [r3, #0]
 80050f8:	1d08      	adds	r0, r1, #4
 80050fa:	6018      	str	r0, [r3, #0]
 80050fc:	062e      	lsls	r6, r5, #24
 80050fe:	d501      	bpl.n	8005104 <_printf_i+0xb8>
 8005100:	680d      	ldr	r5, [r1, #0]
 8005102:	e003      	b.n	800510c <_printf_i+0xc0>
 8005104:	066d      	lsls	r5, r5, #25
 8005106:	d5fb      	bpl.n	8005100 <_printf_i+0xb4>
 8005108:	680d      	ldr	r5, [r1, #0]
 800510a:	b2ad      	uxth	r5, r5
 800510c:	4b56      	ldr	r3, [pc, #344]	; (8005268 <_printf_i+0x21c>)
 800510e:	270a      	movs	r7, #10
 8005110:	9303      	str	r3, [sp, #12]
 8005112:	2a6f      	cmp	r2, #111	; 0x6f
 8005114:	d117      	bne.n	8005146 <_printf_i+0xfa>
 8005116:	2708      	movs	r7, #8
 8005118:	e015      	b.n	8005146 <_printf_i+0xfa>
 800511a:	3145      	adds	r1, #69	; 0x45
 800511c:	700a      	strb	r2, [r1, #0]
 800511e:	4a52      	ldr	r2, [pc, #328]	; (8005268 <_printf_i+0x21c>)
 8005120:	9203      	str	r2, [sp, #12]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	6821      	ldr	r1, [r4, #0]
 8005126:	ca20      	ldmia	r2!, {r5}
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	0608      	lsls	r0, r1, #24
 800512c:	d550      	bpl.n	80051d0 <_printf_i+0x184>
 800512e:	07cb      	lsls	r3, r1, #31
 8005130:	d502      	bpl.n	8005138 <_printf_i+0xec>
 8005132:	2320      	movs	r3, #32
 8005134:	4319      	orrs	r1, r3
 8005136:	6021      	str	r1, [r4, #0]
 8005138:	2710      	movs	r7, #16
 800513a:	2d00      	cmp	r5, #0
 800513c:	d103      	bne.n	8005146 <_printf_i+0xfa>
 800513e:	2320      	movs	r3, #32
 8005140:	6822      	ldr	r2, [r4, #0]
 8005142:	439a      	bics	r2, r3
 8005144:	6022      	str	r2, [r4, #0]
 8005146:	0023      	movs	r3, r4
 8005148:	2200      	movs	r2, #0
 800514a:	3343      	adds	r3, #67	; 0x43
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	6863      	ldr	r3, [r4, #4]
 8005150:	60a3      	str	r3, [r4, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	db03      	blt.n	800515e <_printf_i+0x112>
 8005156:	2204      	movs	r2, #4
 8005158:	6821      	ldr	r1, [r4, #0]
 800515a:	4391      	bics	r1, r2
 800515c:	6021      	str	r1, [r4, #0]
 800515e:	2d00      	cmp	r5, #0
 8005160:	d102      	bne.n	8005168 <_printf_i+0x11c>
 8005162:	9e04      	ldr	r6, [sp, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00c      	beq.n	8005182 <_printf_i+0x136>
 8005168:	9e04      	ldr	r6, [sp, #16]
 800516a:	0028      	movs	r0, r5
 800516c:	0039      	movs	r1, r7
 800516e:	f7fb f863 	bl	8000238 <__aeabi_uidivmod>
 8005172:	9b03      	ldr	r3, [sp, #12]
 8005174:	3e01      	subs	r6, #1
 8005176:	5c5b      	ldrb	r3, [r3, r1]
 8005178:	7033      	strb	r3, [r6, #0]
 800517a:	002b      	movs	r3, r5
 800517c:	0005      	movs	r5, r0
 800517e:	429f      	cmp	r7, r3
 8005180:	d9f3      	bls.n	800516a <_printf_i+0x11e>
 8005182:	2f08      	cmp	r7, #8
 8005184:	d109      	bne.n	800519a <_printf_i+0x14e>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	07db      	lsls	r3, r3, #31
 800518a:	d506      	bpl.n	800519a <_printf_i+0x14e>
 800518c:	6863      	ldr	r3, [r4, #4]
 800518e:	6922      	ldr	r2, [r4, #16]
 8005190:	4293      	cmp	r3, r2
 8005192:	dc02      	bgt.n	800519a <_printf_i+0x14e>
 8005194:	2330      	movs	r3, #48	; 0x30
 8005196:	3e01      	subs	r6, #1
 8005198:	7033      	strb	r3, [r6, #0]
 800519a:	9b04      	ldr	r3, [sp, #16]
 800519c:	1b9b      	subs	r3, r3, r6
 800519e:	6123      	str	r3, [r4, #16]
 80051a0:	9b07      	ldr	r3, [sp, #28]
 80051a2:	0021      	movs	r1, r4
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	9805      	ldr	r0, [sp, #20]
 80051a8:	9b06      	ldr	r3, [sp, #24]
 80051aa:	aa09      	add	r2, sp, #36	; 0x24
 80051ac:	f7ff fede 	bl	8004f6c <_printf_common>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	d135      	bne.n	8005220 <_printf_i+0x1d4>
 80051b4:	2001      	movs	r0, #1
 80051b6:	4240      	negs	r0, r0
 80051b8:	b00b      	add	sp, #44	; 0x2c
 80051ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051bc:	2220      	movs	r2, #32
 80051be:	6809      	ldr	r1, [r1, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	6022      	str	r2, [r4, #0]
 80051c4:	0022      	movs	r2, r4
 80051c6:	2178      	movs	r1, #120	; 0x78
 80051c8:	3245      	adds	r2, #69	; 0x45
 80051ca:	7011      	strb	r1, [r2, #0]
 80051cc:	4a27      	ldr	r2, [pc, #156]	; (800526c <_printf_i+0x220>)
 80051ce:	e7a7      	b.n	8005120 <_printf_i+0xd4>
 80051d0:	0648      	lsls	r0, r1, #25
 80051d2:	d5ac      	bpl.n	800512e <_printf_i+0xe2>
 80051d4:	b2ad      	uxth	r5, r5
 80051d6:	e7aa      	b.n	800512e <_printf_i+0xe2>
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	680d      	ldr	r5, [r1, #0]
 80051dc:	1d10      	adds	r0, r2, #4
 80051de:	6949      	ldr	r1, [r1, #20]
 80051e0:	6018      	str	r0, [r3, #0]
 80051e2:	6813      	ldr	r3, [r2, #0]
 80051e4:	062e      	lsls	r6, r5, #24
 80051e6:	d501      	bpl.n	80051ec <_printf_i+0x1a0>
 80051e8:	6019      	str	r1, [r3, #0]
 80051ea:	e002      	b.n	80051f2 <_printf_i+0x1a6>
 80051ec:	066d      	lsls	r5, r5, #25
 80051ee:	d5fb      	bpl.n	80051e8 <_printf_i+0x19c>
 80051f0:	8019      	strh	r1, [r3, #0]
 80051f2:	2300      	movs	r3, #0
 80051f4:	9e04      	ldr	r6, [sp, #16]
 80051f6:	6123      	str	r3, [r4, #16]
 80051f8:	e7d2      	b.n	80051a0 <_printf_i+0x154>
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	1d11      	adds	r1, r2, #4
 80051fe:	6019      	str	r1, [r3, #0]
 8005200:	6816      	ldr	r6, [r2, #0]
 8005202:	2100      	movs	r1, #0
 8005204:	0030      	movs	r0, r6
 8005206:	6862      	ldr	r2, [r4, #4]
 8005208:	f000 fb32 	bl	8005870 <memchr>
 800520c:	2800      	cmp	r0, #0
 800520e:	d001      	beq.n	8005214 <_printf_i+0x1c8>
 8005210:	1b80      	subs	r0, r0, r6
 8005212:	6060      	str	r0, [r4, #4]
 8005214:	6863      	ldr	r3, [r4, #4]
 8005216:	6123      	str	r3, [r4, #16]
 8005218:	2300      	movs	r3, #0
 800521a:	9a04      	ldr	r2, [sp, #16]
 800521c:	7013      	strb	r3, [r2, #0]
 800521e:	e7bf      	b.n	80051a0 <_printf_i+0x154>
 8005220:	6923      	ldr	r3, [r4, #16]
 8005222:	0032      	movs	r2, r6
 8005224:	9906      	ldr	r1, [sp, #24]
 8005226:	9805      	ldr	r0, [sp, #20]
 8005228:	9d07      	ldr	r5, [sp, #28]
 800522a:	47a8      	blx	r5
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d0c1      	beq.n	80051b4 <_printf_i+0x168>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	079b      	lsls	r3, r3, #30
 8005234:	d415      	bmi.n	8005262 <_printf_i+0x216>
 8005236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005238:	68e0      	ldr	r0, [r4, #12]
 800523a:	4298      	cmp	r0, r3
 800523c:	dabc      	bge.n	80051b8 <_printf_i+0x16c>
 800523e:	0018      	movs	r0, r3
 8005240:	e7ba      	b.n	80051b8 <_printf_i+0x16c>
 8005242:	0022      	movs	r2, r4
 8005244:	2301      	movs	r3, #1
 8005246:	9906      	ldr	r1, [sp, #24]
 8005248:	9805      	ldr	r0, [sp, #20]
 800524a:	9e07      	ldr	r6, [sp, #28]
 800524c:	3219      	adds	r2, #25
 800524e:	47b0      	blx	r6
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d0af      	beq.n	80051b4 <_printf_i+0x168>
 8005254:	3501      	adds	r5, #1
 8005256:	68e3      	ldr	r3, [r4, #12]
 8005258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	42ab      	cmp	r3, r5
 800525e:	dcf0      	bgt.n	8005242 <_printf_i+0x1f6>
 8005260:	e7e9      	b.n	8005236 <_printf_i+0x1ea>
 8005262:	2500      	movs	r5, #0
 8005264:	e7f7      	b.n	8005256 <_printf_i+0x20a>
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	08005bd5 	.word	0x08005bd5
 800526c:	08005be6 	.word	0x08005be6

08005270 <_scanf_chars>:
 8005270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005272:	0015      	movs	r5, r2
 8005274:	688a      	ldr	r2, [r1, #8]
 8005276:	000c      	movs	r4, r1
 8005278:	9001      	str	r0, [sp, #4]
 800527a:	2a00      	cmp	r2, #0
 800527c:	d105      	bne.n	800528a <_scanf_chars+0x1a>
 800527e:	6989      	ldr	r1, [r1, #24]
 8005280:	3201      	adds	r2, #1
 8005282:	2900      	cmp	r1, #0
 8005284:	d000      	beq.n	8005288 <_scanf_chars+0x18>
 8005286:	3a02      	subs	r2, #2
 8005288:	60a2      	str	r2, [r4, #8]
 800528a:	6822      	ldr	r2, [r4, #0]
 800528c:	06d2      	lsls	r2, r2, #27
 800528e:	d403      	bmi.n	8005298 <_scanf_chars+0x28>
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	1d11      	adds	r1, r2, #4
 8005294:	6019      	str	r1, [r3, #0]
 8005296:	6817      	ldr	r7, [r2, #0]
 8005298:	2600      	movs	r6, #0
 800529a:	69a0      	ldr	r0, [r4, #24]
 800529c:	2800      	cmp	r0, #0
 800529e:	d013      	beq.n	80052c8 <_scanf_chars+0x58>
 80052a0:	2801      	cmp	r0, #1
 80052a2:	d108      	bne.n	80052b6 <_scanf_chars+0x46>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	6962      	ldr	r2, [r4, #20]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	5cd3      	ldrb	r3, [r2, r3]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <_scanf_chars+0x58>
 80052b0:	2e00      	cmp	r6, #0
 80052b2:	d127      	bne.n	8005304 <_scanf_chars+0x94>
 80052b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80052b6:	2802      	cmp	r0, #2
 80052b8:	d124      	bne.n	8005304 <_scanf_chars+0x94>
 80052ba:	682b      	ldr	r3, [r5, #0]
 80052bc:	4a1a      	ldr	r2, [pc, #104]	; (8005328 <_scanf_chars+0xb8>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	5cd3      	ldrb	r3, [r2, r3]
 80052c2:	2208      	movs	r2, #8
 80052c4:	4213      	tst	r3, r2
 80052c6:	d11d      	bne.n	8005304 <_scanf_chars+0x94>
 80052c8:	2210      	movs	r2, #16
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	3601      	adds	r6, #1
 80052ce:	4213      	tst	r3, r2
 80052d0:	d103      	bne.n	80052da <_scanf_chars+0x6a>
 80052d2:	682b      	ldr	r3, [r5, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	703b      	strb	r3, [r7, #0]
 80052d8:	3701      	adds	r7, #1
 80052da:	682a      	ldr	r2, [r5, #0]
 80052dc:	686b      	ldr	r3, [r5, #4]
 80052de:	3201      	adds	r2, #1
 80052e0:	602a      	str	r2, [r5, #0]
 80052e2:	68a2      	ldr	r2, [r4, #8]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	3a01      	subs	r2, #1
 80052e8:	606b      	str	r3, [r5, #4]
 80052ea:	60a2      	str	r2, [r4, #8]
 80052ec:	2a00      	cmp	r2, #0
 80052ee:	d009      	beq.n	8005304 <_scanf_chars+0x94>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	dcd2      	bgt.n	800529a <_scanf_chars+0x2a>
 80052f4:	23c0      	movs	r3, #192	; 0xc0
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	0029      	movs	r1, r5
 80052fa:	58e3      	ldr	r3, [r4, r3]
 80052fc:	9801      	ldr	r0, [sp, #4]
 80052fe:	4798      	blx	r3
 8005300:	2800      	cmp	r0, #0
 8005302:	d0ca      	beq.n	800529a <_scanf_chars+0x2a>
 8005304:	6822      	ldr	r2, [r4, #0]
 8005306:	2310      	movs	r3, #16
 8005308:	0011      	movs	r1, r2
 800530a:	4019      	ands	r1, r3
 800530c:	421a      	tst	r2, r3
 800530e:	d106      	bne.n	800531e <_scanf_chars+0xae>
 8005310:	68e3      	ldr	r3, [r4, #12]
 8005312:	3301      	adds	r3, #1
 8005314:	60e3      	str	r3, [r4, #12]
 8005316:	69a3      	ldr	r3, [r4, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d000      	beq.n	800531e <_scanf_chars+0xae>
 800531c:	7039      	strb	r1, [r7, #0]
 800531e:	6923      	ldr	r3, [r4, #16]
 8005320:	2000      	movs	r0, #0
 8005322:	199e      	adds	r6, r3, r6
 8005324:	6126      	str	r6, [r4, #16]
 8005326:	e7c5      	b.n	80052b4 <_scanf_chars+0x44>
 8005328:	08005c13 	.word	0x08005c13

0800532c <_scanf_i>:
 800532c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800532e:	000c      	movs	r4, r1
 8005330:	b08d      	sub	sp, #52	; 0x34
 8005332:	9302      	str	r3, [sp, #8]
 8005334:	4b79      	ldr	r3, [pc, #484]	; (800551c <_scanf_i+0x1f0>)
 8005336:	0016      	movs	r6, r2
 8005338:	9005      	str	r0, [sp, #20]
 800533a:	aa09      	add	r2, sp, #36	; 0x24
 800533c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800533e:	c223      	stmia	r2!, {r0, r1, r5}
 8005340:	4b77      	ldr	r3, [pc, #476]	; (8005520 <_scanf_i+0x1f4>)
 8005342:	9306      	str	r3, [sp, #24]
 8005344:	69a3      	ldr	r3, [r4, #24]
 8005346:	2b03      	cmp	r3, #3
 8005348:	d001      	beq.n	800534e <_scanf_i+0x22>
 800534a:	4b76      	ldr	r3, [pc, #472]	; (8005524 <_scanf_i+0x1f8>)
 800534c:	9306      	str	r3, [sp, #24]
 800534e:	22ae      	movs	r2, #174	; 0xae
 8005350:	2000      	movs	r0, #0
 8005352:	68a3      	ldr	r3, [r4, #8]
 8005354:	0052      	lsls	r2, r2, #1
 8005356:	1e59      	subs	r1, r3, #1
 8005358:	9004      	str	r0, [sp, #16]
 800535a:	4291      	cmp	r1, r2
 800535c:	d905      	bls.n	800536a <_scanf_i+0x3e>
 800535e:	3b5e      	subs	r3, #94	; 0x5e
 8005360:	3bff      	subs	r3, #255	; 0xff
 8005362:	9304      	str	r3, [sp, #16]
 8005364:	235e      	movs	r3, #94	; 0x5e
 8005366:	33ff      	adds	r3, #255	; 0xff
 8005368:	60a3      	str	r3, [r4, #8]
 800536a:	0023      	movs	r3, r4
 800536c:	331c      	adds	r3, #28
 800536e:	9301      	str	r3, [sp, #4]
 8005370:	23d0      	movs	r3, #208	; 0xd0
 8005372:	2700      	movs	r7, #0
 8005374:	6822      	ldr	r2, [r4, #0]
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	4313      	orrs	r3, r2
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	9b01      	ldr	r3, [sp, #4]
 800537e:	9303      	str	r3, [sp, #12]
 8005380:	6833      	ldr	r3, [r6, #0]
 8005382:	a809      	add	r0, sp, #36	; 0x24
 8005384:	7819      	ldrb	r1, [r3, #0]
 8005386:	00bb      	lsls	r3, r7, #2
 8005388:	2202      	movs	r2, #2
 800538a:	5818      	ldr	r0, [r3, r0]
 800538c:	f000 fa70 	bl	8005870 <memchr>
 8005390:	2800      	cmp	r0, #0
 8005392:	d02b      	beq.n	80053ec <_scanf_i+0xc0>
 8005394:	2f01      	cmp	r7, #1
 8005396:	d162      	bne.n	800545e <_scanf_i+0x132>
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <_scanf_i+0x80>
 800539e:	3308      	adds	r3, #8
 80053a0:	6822      	ldr	r2, [r4, #0]
 80053a2:	6063      	str	r3, [r4, #4]
 80053a4:	33f9      	adds	r3, #249	; 0xf9
 80053a6:	33ff      	adds	r3, #255	; 0xff
 80053a8:	4313      	orrs	r3, r2
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	4b5e      	ldr	r3, [pc, #376]	; (8005528 <_scanf_i+0x1fc>)
 80053ae:	6822      	ldr	r2, [r4, #0]
 80053b0:	4013      	ands	r3, r2
 80053b2:	6023      	str	r3, [r4, #0]
 80053b4:	68a3      	ldr	r3, [r4, #8]
 80053b6:	1e5a      	subs	r2, r3, #1
 80053b8:	60a2      	str	r2, [r4, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d016      	beq.n	80053ec <_scanf_i+0xc0>
 80053be:	6833      	ldr	r3, [r6, #0]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	6032      	str	r2, [r6, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	9a03      	ldr	r2, [sp, #12]
 80053c8:	7013      	strb	r3, [r2, #0]
 80053ca:	6873      	ldr	r3, [r6, #4]
 80053cc:	1c55      	adds	r5, r2, #1
 80053ce:	3b01      	subs	r3, #1
 80053d0:	6073      	str	r3, [r6, #4]
 80053d2:	9503      	str	r5, [sp, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	dc09      	bgt.n	80053ec <_scanf_i+0xc0>
 80053d8:	23c0      	movs	r3, #192	; 0xc0
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	58e3      	ldr	r3, [r4, r3]
 80053de:	0031      	movs	r1, r6
 80053e0:	9805      	ldr	r0, [sp, #20]
 80053e2:	9307      	str	r3, [sp, #28]
 80053e4:	4798      	blx	r3
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d000      	beq.n	80053ec <_scanf_i+0xc0>
 80053ea:	e081      	b.n	80054f0 <_scanf_i+0x1c4>
 80053ec:	3701      	adds	r7, #1
 80053ee:	2f03      	cmp	r7, #3
 80053f0:	d1c6      	bne.n	8005380 <_scanf_i+0x54>
 80053f2:	6863      	ldr	r3, [r4, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <_scanf_i+0xd0>
 80053f8:	330a      	adds	r3, #10
 80053fa:	6063      	str	r3, [r4, #4]
 80053fc:	2110      	movs	r1, #16
 80053fe:	2700      	movs	r7, #0
 8005400:	6863      	ldr	r3, [r4, #4]
 8005402:	6960      	ldr	r0, [r4, #20]
 8005404:	1ac9      	subs	r1, r1, r3
 8005406:	4b49      	ldr	r3, [pc, #292]	; (800552c <_scanf_i+0x200>)
 8005408:	18c9      	adds	r1, r1, r3
 800540a:	f000 f893 	bl	8005534 <__sccl>
 800540e:	9d03      	ldr	r5, [sp, #12]
 8005410:	68a3      	ldr	r3, [r4, #8]
 8005412:	6822      	ldr	r2, [r4, #0]
 8005414:	9303      	str	r3, [sp, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d041      	beq.n	800549e <_scanf_i+0x172>
 800541a:	6831      	ldr	r1, [r6, #0]
 800541c:	6963      	ldr	r3, [r4, #20]
 800541e:	7808      	ldrb	r0, [r1, #0]
 8005420:	5c1b      	ldrb	r3, [r3, r0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d03b      	beq.n	800549e <_scanf_i+0x172>
 8005426:	2830      	cmp	r0, #48	; 0x30
 8005428:	d129      	bne.n	800547e <_scanf_i+0x152>
 800542a:	2380      	movs	r3, #128	; 0x80
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	421a      	tst	r2, r3
 8005430:	d025      	beq.n	800547e <_scanf_i+0x152>
 8005432:	9b04      	ldr	r3, [sp, #16]
 8005434:	3701      	adds	r7, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <_scanf_i+0x11a>
 800543a:	001a      	movs	r2, r3
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	3a01      	subs	r2, #1
 8005440:	3301      	adds	r3, #1
 8005442:	9204      	str	r2, [sp, #16]
 8005444:	60a3      	str	r3, [r4, #8]
 8005446:	6873      	ldr	r3, [r6, #4]
 8005448:	3b01      	subs	r3, #1
 800544a:	6073      	str	r3, [r6, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	dd1d      	ble.n	800548c <_scanf_i+0x160>
 8005450:	6833      	ldr	r3, [r6, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	6033      	str	r3, [r6, #0]
 8005456:	68a3      	ldr	r3, [r4, #8]
 8005458:	3b01      	subs	r3, #1
 800545a:	60a3      	str	r3, [r4, #8]
 800545c:	e7d8      	b.n	8005410 <_scanf_i+0xe4>
 800545e:	2f02      	cmp	r7, #2
 8005460:	d1a8      	bne.n	80053b4 <_scanf_i+0x88>
 8005462:	21c0      	movs	r1, #192	; 0xc0
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	6822      	ldr	r2, [r4, #0]
 8005468:	00c9      	lsls	r1, r1, #3
 800546a:	4011      	ands	r1, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4299      	cmp	r1, r3
 8005470:	d1bf      	bne.n	80053f2 <_scanf_i+0xc6>
 8005472:	3bf1      	subs	r3, #241	; 0xf1
 8005474:	3bff      	subs	r3, #255	; 0xff
 8005476:	6063      	str	r3, [r4, #4]
 8005478:	33f0      	adds	r3, #240	; 0xf0
 800547a:	4313      	orrs	r3, r2
 800547c:	e799      	b.n	80053b2 <_scanf_i+0x86>
 800547e:	4b2c      	ldr	r3, [pc, #176]	; (8005530 <_scanf_i+0x204>)
 8005480:	4013      	ands	r3, r2
 8005482:	6023      	str	r3, [r4, #0]
 8005484:	780b      	ldrb	r3, [r1, #0]
 8005486:	702b      	strb	r3, [r5, #0]
 8005488:	3501      	adds	r5, #1
 800548a:	e7dc      	b.n	8005446 <_scanf_i+0x11a>
 800548c:	23c0      	movs	r3, #192	; 0xc0
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	58e3      	ldr	r3, [r4, r3]
 8005492:	0031      	movs	r1, r6
 8005494:	9805      	ldr	r0, [sp, #20]
 8005496:	9303      	str	r3, [sp, #12]
 8005498:	4798      	blx	r3
 800549a:	2800      	cmp	r0, #0
 800549c:	d0db      	beq.n	8005456 <_scanf_i+0x12a>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	05db      	lsls	r3, r3, #23
 80054a2:	d50e      	bpl.n	80054c2 <_scanf_i+0x196>
 80054a4:	9b01      	ldr	r3, [sp, #4]
 80054a6:	429d      	cmp	r5, r3
 80054a8:	d907      	bls.n	80054ba <_scanf_i+0x18e>
 80054aa:	23be      	movs	r3, #190	; 0xbe
 80054ac:	3d01      	subs	r5, #1
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	0032      	movs	r2, r6
 80054b2:	7829      	ldrb	r1, [r5, #0]
 80054b4:	58e3      	ldr	r3, [r4, r3]
 80054b6:	9805      	ldr	r0, [sp, #20]
 80054b8:	4798      	blx	r3
 80054ba:	9b01      	ldr	r3, [sp, #4]
 80054bc:	2001      	movs	r0, #1
 80054be:	429d      	cmp	r5, r3
 80054c0:	d029      	beq.n	8005516 <_scanf_i+0x1ea>
 80054c2:	6821      	ldr	r1, [r4, #0]
 80054c4:	2310      	movs	r3, #16
 80054c6:	000a      	movs	r2, r1
 80054c8:	401a      	ands	r2, r3
 80054ca:	4219      	tst	r1, r3
 80054cc:	d11c      	bne.n	8005508 <_scanf_i+0x1dc>
 80054ce:	702a      	strb	r2, [r5, #0]
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	9901      	ldr	r1, [sp, #4]
 80054d4:	9805      	ldr	r0, [sp, #20]
 80054d6:	9e06      	ldr	r6, [sp, #24]
 80054d8:	47b0      	blx	r6
 80054da:	9b02      	ldr	r3, [sp, #8]
 80054dc:	6821      	ldr	r1, [r4, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	068a      	lsls	r2, r1, #26
 80054e2:	d507      	bpl.n	80054f4 <_scanf_i+0x1c8>
 80054e4:	1d1a      	adds	r2, r3, #4
 80054e6:	9902      	ldr	r1, [sp, #8]
 80054e8:	600a      	str	r2, [r1, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6018      	str	r0, [r3, #0]
 80054ee:	e008      	b.n	8005502 <_scanf_i+0x1d6>
 80054f0:	2700      	movs	r7, #0
 80054f2:	e7d4      	b.n	800549e <_scanf_i+0x172>
 80054f4:	1d1a      	adds	r2, r3, #4
 80054f6:	07ce      	lsls	r6, r1, #31
 80054f8:	d5f5      	bpl.n	80054e6 <_scanf_i+0x1ba>
 80054fa:	9902      	ldr	r1, [sp, #8]
 80054fc:	600a      	str	r2, [r1, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	8018      	strh	r0, [r3, #0]
 8005502:	68e3      	ldr	r3, [r4, #12]
 8005504:	3301      	adds	r3, #1
 8005506:	60e3      	str	r3, [r4, #12]
 8005508:	2000      	movs	r0, #0
 800550a:	9b01      	ldr	r3, [sp, #4]
 800550c:	1aed      	subs	r5, r5, r3
 800550e:	6923      	ldr	r3, [r4, #16]
 8005510:	19ef      	adds	r7, r5, r7
 8005512:	19df      	adds	r7, r3, r7
 8005514:	6127      	str	r7, [r4, #16]
 8005516:	b00d      	add	sp, #52	; 0x34
 8005518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	08005b0c 	.word	0x08005b0c
 8005520:	080056c9 	.word	0x080056c9
 8005524:	080057e9 	.word	0x080057e9
 8005528:	fffffaff 	.word	0xfffffaff
 800552c:	08005c00 	.word	0x08005c00
 8005530:	fffff6ff 	.word	0xfffff6ff

08005534 <__sccl>:
 8005534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005536:	780b      	ldrb	r3, [r1, #0]
 8005538:	0004      	movs	r4, r0
 800553a:	2b5e      	cmp	r3, #94	; 0x5e
 800553c:	d00c      	beq.n	8005558 <__sccl+0x24>
 800553e:	1c48      	adds	r0, r1, #1
 8005540:	2100      	movs	r1, #0
 8005542:	0022      	movs	r2, r4
 8005544:	1c65      	adds	r5, r4, #1
 8005546:	35ff      	adds	r5, #255	; 0xff
 8005548:	7011      	strb	r1, [r2, #0]
 800554a:	3201      	adds	r2, #1
 800554c:	42aa      	cmp	r2, r5
 800554e:	d1fb      	bne.n	8005548 <__sccl+0x14>
 8005550:	2b00      	cmp	r3, #0
 8005552:	d105      	bne.n	8005560 <__sccl+0x2c>
 8005554:	3801      	subs	r0, #1
 8005556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005558:	784b      	ldrb	r3, [r1, #1]
 800555a:	1c88      	adds	r0, r1, #2
 800555c:	2101      	movs	r1, #1
 800555e:	e7f0      	b.n	8005542 <__sccl+0xe>
 8005560:	2201      	movs	r2, #1
 8005562:	262d      	movs	r6, #45	; 0x2d
 8005564:	4051      	eors	r1, r2
 8005566:	0002      	movs	r2, r0
 8005568:	54e1      	strb	r1, [r4, r3]
 800556a:	7815      	ldrb	r5, [r2, #0]
 800556c:	1c50      	adds	r0, r2, #1
 800556e:	2d2d      	cmp	r5, #45	; 0x2d
 8005570:	d009      	beq.n	8005586 <__sccl+0x52>
 8005572:	2d5d      	cmp	r5, #93	; 0x5d
 8005574:	d0ef      	beq.n	8005556 <__sccl+0x22>
 8005576:	2d00      	cmp	r5, #0
 8005578:	d101      	bne.n	800557e <__sccl+0x4a>
 800557a:	0010      	movs	r0, r2
 800557c:	e7eb      	b.n	8005556 <__sccl+0x22>
 800557e:	002b      	movs	r3, r5
 8005580:	e7f1      	b.n	8005566 <__sccl+0x32>
 8005582:	0033      	movs	r3, r6
 8005584:	e7ef      	b.n	8005566 <__sccl+0x32>
 8005586:	7855      	ldrb	r5, [r2, #1]
 8005588:	2d5d      	cmp	r5, #93	; 0x5d
 800558a:	d0fa      	beq.n	8005582 <__sccl+0x4e>
 800558c:	42ab      	cmp	r3, r5
 800558e:	dcf8      	bgt.n	8005582 <__sccl+0x4e>
 8005590:	0018      	movs	r0, r3
 8005592:	3202      	adds	r2, #2
 8005594:	3001      	adds	r0, #1
 8005596:	5421      	strb	r1, [r4, r0]
 8005598:	4285      	cmp	r5, r0
 800559a:	dcfb      	bgt.n	8005594 <__sccl+0x60>
 800559c:	2000      	movs	r0, #0
 800559e:	1c5f      	adds	r7, r3, #1
 80055a0:	42ab      	cmp	r3, r5
 80055a2:	da01      	bge.n	80055a8 <__sccl+0x74>
 80055a4:	1ae8      	subs	r0, r5, r3
 80055a6:	3801      	subs	r0, #1
 80055a8:	183b      	adds	r3, r7, r0
 80055aa:	e7de      	b.n	800556a <__sccl+0x36>

080055ac <_strtol_l.isra.0>:
 80055ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ae:	b087      	sub	sp, #28
 80055b0:	001e      	movs	r6, r3
 80055b2:	9005      	str	r0, [sp, #20]
 80055b4:	9101      	str	r1, [sp, #4]
 80055b6:	9202      	str	r2, [sp, #8]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d045      	beq.n	8005648 <_strtol_l.isra.0+0x9c>
 80055bc:	0008      	movs	r0, r1
 80055be:	2b24      	cmp	r3, #36	; 0x24
 80055c0:	d842      	bhi.n	8005648 <_strtol_l.isra.0+0x9c>
 80055c2:	4b3f      	ldr	r3, [pc, #252]	; (80056c0 <_strtol_l.isra.0+0x114>)
 80055c4:	2208      	movs	r2, #8
 80055c6:	469c      	mov	ip, r3
 80055c8:	0003      	movs	r3, r0
 80055ca:	4661      	mov	r1, ip
 80055cc:	781c      	ldrb	r4, [r3, #0]
 80055ce:	1c45      	adds	r5, r0, #1
 80055d0:	5d09      	ldrb	r1, [r1, r4]
 80055d2:	0028      	movs	r0, r5
 80055d4:	000f      	movs	r7, r1
 80055d6:	4017      	ands	r7, r2
 80055d8:	4211      	tst	r1, r2
 80055da:	d1f5      	bne.n	80055c8 <_strtol_l.isra.0+0x1c>
 80055dc:	2c2d      	cmp	r4, #45	; 0x2d
 80055de:	d13a      	bne.n	8005656 <_strtol_l.isra.0+0xaa>
 80055e0:	2701      	movs	r7, #1
 80055e2:	782c      	ldrb	r4, [r5, #0]
 80055e4:	1c9d      	adds	r5, r3, #2
 80055e6:	2e00      	cmp	r6, #0
 80055e8:	d065      	beq.n	80056b6 <_strtol_l.isra.0+0x10a>
 80055ea:	2e10      	cmp	r6, #16
 80055ec:	d109      	bne.n	8005602 <_strtol_l.isra.0+0x56>
 80055ee:	2c30      	cmp	r4, #48	; 0x30
 80055f0:	d107      	bne.n	8005602 <_strtol_l.isra.0+0x56>
 80055f2:	2220      	movs	r2, #32
 80055f4:	782b      	ldrb	r3, [r5, #0]
 80055f6:	4393      	bics	r3, r2
 80055f8:	2b58      	cmp	r3, #88	; 0x58
 80055fa:	d157      	bne.n	80056ac <_strtol_l.isra.0+0x100>
 80055fc:	2610      	movs	r6, #16
 80055fe:	786c      	ldrb	r4, [r5, #1]
 8005600:	3502      	adds	r5, #2
 8005602:	4b30      	ldr	r3, [pc, #192]	; (80056c4 <_strtol_l.isra.0+0x118>)
 8005604:	0031      	movs	r1, r6
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	0018      	movs	r0, r3
 800560a:	9303      	str	r3, [sp, #12]
 800560c:	f7fa fe14 	bl	8000238 <__aeabi_uidivmod>
 8005610:	2300      	movs	r3, #0
 8005612:	2201      	movs	r2, #1
 8005614:	4684      	mov	ip, r0
 8005616:	0018      	movs	r0, r3
 8005618:	9104      	str	r1, [sp, #16]
 800561a:	4252      	negs	r2, r2
 800561c:	0021      	movs	r1, r4
 800561e:	3930      	subs	r1, #48	; 0x30
 8005620:	2909      	cmp	r1, #9
 8005622:	d81d      	bhi.n	8005660 <_strtol_l.isra.0+0xb4>
 8005624:	000c      	movs	r4, r1
 8005626:	42a6      	cmp	r6, r4
 8005628:	dd28      	ble.n	800567c <_strtol_l.isra.0+0xd0>
 800562a:	2b00      	cmp	r3, #0
 800562c:	db24      	blt.n	8005678 <_strtol_l.isra.0+0xcc>
 800562e:	0013      	movs	r3, r2
 8005630:	4584      	cmp	ip, r0
 8005632:	d306      	bcc.n	8005642 <_strtol_l.isra.0+0x96>
 8005634:	d102      	bne.n	800563c <_strtol_l.isra.0+0x90>
 8005636:	9904      	ldr	r1, [sp, #16]
 8005638:	42a1      	cmp	r1, r4
 800563a:	db02      	blt.n	8005642 <_strtol_l.isra.0+0x96>
 800563c:	2301      	movs	r3, #1
 800563e:	4370      	muls	r0, r6
 8005640:	1820      	adds	r0, r4, r0
 8005642:	782c      	ldrb	r4, [r5, #0]
 8005644:	3501      	adds	r5, #1
 8005646:	e7e9      	b.n	800561c <_strtol_l.isra.0+0x70>
 8005648:	f7ff f8de 	bl	8004808 <__errno>
 800564c:	2316      	movs	r3, #22
 800564e:	6003      	str	r3, [r0, #0]
 8005650:	2000      	movs	r0, #0
 8005652:	b007      	add	sp, #28
 8005654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005656:	2c2b      	cmp	r4, #43	; 0x2b
 8005658:	d1c5      	bne.n	80055e6 <_strtol_l.isra.0+0x3a>
 800565a:	782c      	ldrb	r4, [r5, #0]
 800565c:	1c9d      	adds	r5, r3, #2
 800565e:	e7c2      	b.n	80055e6 <_strtol_l.isra.0+0x3a>
 8005660:	0021      	movs	r1, r4
 8005662:	3941      	subs	r1, #65	; 0x41
 8005664:	2919      	cmp	r1, #25
 8005666:	d801      	bhi.n	800566c <_strtol_l.isra.0+0xc0>
 8005668:	3c37      	subs	r4, #55	; 0x37
 800566a:	e7dc      	b.n	8005626 <_strtol_l.isra.0+0x7a>
 800566c:	0021      	movs	r1, r4
 800566e:	3961      	subs	r1, #97	; 0x61
 8005670:	2919      	cmp	r1, #25
 8005672:	d803      	bhi.n	800567c <_strtol_l.isra.0+0xd0>
 8005674:	3c57      	subs	r4, #87	; 0x57
 8005676:	e7d6      	b.n	8005626 <_strtol_l.isra.0+0x7a>
 8005678:	0013      	movs	r3, r2
 800567a:	e7e2      	b.n	8005642 <_strtol_l.isra.0+0x96>
 800567c:	2b00      	cmp	r3, #0
 800567e:	da09      	bge.n	8005694 <_strtol_l.isra.0+0xe8>
 8005680:	2322      	movs	r3, #34	; 0x22
 8005682:	9a05      	ldr	r2, [sp, #20]
 8005684:	9803      	ldr	r0, [sp, #12]
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	9b02      	ldr	r3, [sp, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0e1      	beq.n	8005652 <_strtol_l.isra.0+0xa6>
 800568e:	1e6b      	subs	r3, r5, #1
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	e007      	b.n	80056a4 <_strtol_l.isra.0+0xf8>
 8005694:	2f00      	cmp	r7, #0
 8005696:	d000      	beq.n	800569a <_strtol_l.isra.0+0xee>
 8005698:	4240      	negs	r0, r0
 800569a:	9a02      	ldr	r2, [sp, #8]
 800569c:	2a00      	cmp	r2, #0
 800569e:	d0d8      	beq.n	8005652 <_strtol_l.isra.0+0xa6>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f4      	bne.n	800568e <_strtol_l.isra.0+0xe2>
 80056a4:	9b02      	ldr	r3, [sp, #8]
 80056a6:	9a01      	ldr	r2, [sp, #4]
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	e7d2      	b.n	8005652 <_strtol_l.isra.0+0xa6>
 80056ac:	2430      	movs	r4, #48	; 0x30
 80056ae:	2e00      	cmp	r6, #0
 80056b0:	d1a7      	bne.n	8005602 <_strtol_l.isra.0+0x56>
 80056b2:	3608      	adds	r6, #8
 80056b4:	e7a5      	b.n	8005602 <_strtol_l.isra.0+0x56>
 80056b6:	2c30      	cmp	r4, #48	; 0x30
 80056b8:	d09b      	beq.n	80055f2 <_strtol_l.isra.0+0x46>
 80056ba:	260a      	movs	r6, #10
 80056bc:	e7a1      	b.n	8005602 <_strtol_l.isra.0+0x56>
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	08005c13 	.word	0x08005c13
 80056c4:	7fffffff 	.word	0x7fffffff

080056c8 <_strtol_r>:
 80056c8:	b510      	push	{r4, lr}
 80056ca:	f7ff ff6f 	bl	80055ac <_strtol_l.isra.0>
 80056ce:	bd10      	pop	{r4, pc}

080056d0 <_strtoul_l.isra.0>:
 80056d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d2:	001e      	movs	r6, r3
 80056d4:	4b43      	ldr	r3, [pc, #268]	; (80057e4 <_strtoul_l.isra.0+0x114>)
 80056d6:	b087      	sub	sp, #28
 80056d8:	000f      	movs	r7, r1
 80056da:	9101      	str	r1, [sp, #4]
 80056dc:	469c      	mov	ip, r3
 80056de:	2108      	movs	r1, #8
 80056e0:	9005      	str	r0, [sp, #20]
 80056e2:	9202      	str	r2, [sp, #8]
 80056e4:	003b      	movs	r3, r7
 80056e6:	4662      	mov	r2, ip
 80056e8:	781c      	ldrb	r4, [r3, #0]
 80056ea:	1c7d      	adds	r5, r7, #1
 80056ec:	5d10      	ldrb	r0, [r2, r4]
 80056ee:	002f      	movs	r7, r5
 80056f0:	0002      	movs	r2, r0
 80056f2:	400a      	ands	r2, r1
 80056f4:	4208      	tst	r0, r1
 80056f6:	d1f5      	bne.n	80056e4 <_strtoul_l.isra.0+0x14>
 80056f8:	2c2d      	cmp	r4, #45	; 0x2d
 80056fa:	d13a      	bne.n	8005772 <_strtoul_l.isra.0+0xa2>
 80056fc:	2701      	movs	r7, #1
 80056fe:	782c      	ldrb	r4, [r5, #0]
 8005700:	1c9d      	adds	r5, r3, #2
 8005702:	2e00      	cmp	r6, #0
 8005704:	d069      	beq.n	80057da <_strtoul_l.isra.0+0x10a>
 8005706:	2e10      	cmp	r6, #16
 8005708:	d109      	bne.n	800571e <_strtoul_l.isra.0+0x4e>
 800570a:	2c30      	cmp	r4, #48	; 0x30
 800570c:	d107      	bne.n	800571e <_strtoul_l.isra.0+0x4e>
 800570e:	2220      	movs	r2, #32
 8005710:	782b      	ldrb	r3, [r5, #0]
 8005712:	4393      	bics	r3, r2
 8005714:	2b58      	cmp	r3, #88	; 0x58
 8005716:	d15b      	bne.n	80057d0 <_strtoul_l.isra.0+0x100>
 8005718:	2610      	movs	r6, #16
 800571a:	786c      	ldrb	r4, [r5, #1]
 800571c:	3502      	adds	r5, #2
 800571e:	2001      	movs	r0, #1
 8005720:	0031      	movs	r1, r6
 8005722:	4240      	negs	r0, r0
 8005724:	f7fa fd02 	bl	800012c <__udivsi3>
 8005728:	9003      	str	r0, [sp, #12]
 800572a:	2001      	movs	r0, #1
 800572c:	0031      	movs	r1, r6
 800572e:	4240      	negs	r0, r0
 8005730:	f7fa fd82 	bl	8000238 <__aeabi_uidivmod>
 8005734:	2300      	movs	r3, #0
 8005736:	9104      	str	r1, [sp, #16]
 8005738:	2101      	movs	r1, #1
 800573a:	2201      	movs	r2, #1
 800573c:	0018      	movs	r0, r3
 800573e:	468c      	mov	ip, r1
 8005740:	4252      	negs	r2, r2
 8005742:	0021      	movs	r1, r4
 8005744:	3930      	subs	r1, #48	; 0x30
 8005746:	2909      	cmp	r1, #9
 8005748:	d81a      	bhi.n	8005780 <_strtoul_l.isra.0+0xb0>
 800574a:	000c      	movs	r4, r1
 800574c:	42a6      	cmp	r6, r4
 800574e:	dd25      	ble.n	800579c <_strtoul_l.isra.0+0xcc>
 8005750:	2b00      	cmp	r3, #0
 8005752:	db21      	blt.n	8005798 <_strtoul_l.isra.0+0xc8>
 8005754:	9903      	ldr	r1, [sp, #12]
 8005756:	0013      	movs	r3, r2
 8005758:	4281      	cmp	r1, r0
 800575a:	d307      	bcc.n	800576c <_strtoul_l.isra.0+0x9c>
 800575c:	d103      	bne.n	8005766 <_strtoul_l.isra.0+0x96>
 800575e:	9904      	ldr	r1, [sp, #16]
 8005760:	0013      	movs	r3, r2
 8005762:	42a1      	cmp	r1, r4
 8005764:	db02      	blt.n	800576c <_strtoul_l.isra.0+0x9c>
 8005766:	4663      	mov	r3, ip
 8005768:	4370      	muls	r0, r6
 800576a:	1820      	adds	r0, r4, r0
 800576c:	782c      	ldrb	r4, [r5, #0]
 800576e:	3501      	adds	r5, #1
 8005770:	e7e7      	b.n	8005742 <_strtoul_l.isra.0+0x72>
 8005772:	2c2b      	cmp	r4, #43	; 0x2b
 8005774:	d001      	beq.n	800577a <_strtoul_l.isra.0+0xaa>
 8005776:	0017      	movs	r7, r2
 8005778:	e7c3      	b.n	8005702 <_strtoul_l.isra.0+0x32>
 800577a:	782c      	ldrb	r4, [r5, #0]
 800577c:	1c9d      	adds	r5, r3, #2
 800577e:	e7fa      	b.n	8005776 <_strtoul_l.isra.0+0xa6>
 8005780:	0021      	movs	r1, r4
 8005782:	3941      	subs	r1, #65	; 0x41
 8005784:	2919      	cmp	r1, #25
 8005786:	d801      	bhi.n	800578c <_strtoul_l.isra.0+0xbc>
 8005788:	3c37      	subs	r4, #55	; 0x37
 800578a:	e7df      	b.n	800574c <_strtoul_l.isra.0+0x7c>
 800578c:	0021      	movs	r1, r4
 800578e:	3961      	subs	r1, #97	; 0x61
 8005790:	2919      	cmp	r1, #25
 8005792:	d803      	bhi.n	800579c <_strtoul_l.isra.0+0xcc>
 8005794:	3c57      	subs	r4, #87	; 0x57
 8005796:	e7d9      	b.n	800574c <_strtoul_l.isra.0+0x7c>
 8005798:	0013      	movs	r3, r2
 800579a:	e7e7      	b.n	800576c <_strtoul_l.isra.0+0x9c>
 800579c:	2b00      	cmp	r3, #0
 800579e:	da09      	bge.n	80057b4 <_strtoul_l.isra.0+0xe4>
 80057a0:	2322      	movs	r3, #34	; 0x22
 80057a2:	2001      	movs	r0, #1
 80057a4:	9a05      	ldr	r2, [sp, #20]
 80057a6:	4240      	negs	r0, r0
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	9b02      	ldr	r3, [sp, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d109      	bne.n	80057c4 <_strtoul_l.isra.0+0xf4>
 80057b0:	b007      	add	sp, #28
 80057b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057b4:	2f00      	cmp	r7, #0
 80057b6:	d000      	beq.n	80057ba <_strtoul_l.isra.0+0xea>
 80057b8:	4240      	negs	r0, r0
 80057ba:	9a02      	ldr	r2, [sp, #8]
 80057bc:	2a00      	cmp	r2, #0
 80057be:	d0f7      	beq.n	80057b0 <_strtoul_l.isra.0+0xe0>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <_strtoul_l.isra.0+0xf8>
 80057c4:	1e6b      	subs	r3, r5, #1
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	9b02      	ldr	r3, [sp, #8]
 80057ca:	9a01      	ldr	r2, [sp, #4]
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e7ef      	b.n	80057b0 <_strtoul_l.isra.0+0xe0>
 80057d0:	2430      	movs	r4, #48	; 0x30
 80057d2:	2e00      	cmp	r6, #0
 80057d4:	d1a3      	bne.n	800571e <_strtoul_l.isra.0+0x4e>
 80057d6:	3608      	adds	r6, #8
 80057d8:	e7a1      	b.n	800571e <_strtoul_l.isra.0+0x4e>
 80057da:	2c30      	cmp	r4, #48	; 0x30
 80057dc:	d097      	beq.n	800570e <_strtoul_l.isra.0+0x3e>
 80057de:	260a      	movs	r6, #10
 80057e0:	e79d      	b.n	800571e <_strtoul_l.isra.0+0x4e>
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	08005c13 	.word	0x08005c13

080057e8 <_strtoul_r>:
 80057e8:	b510      	push	{r4, lr}
 80057ea:	f7ff ff71 	bl	80056d0 <_strtoul_l.isra.0>
 80057ee:	bd10      	pop	{r4, pc}

080057f0 <__submore>:
 80057f0:	000b      	movs	r3, r1
 80057f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057f4:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80057f6:	3344      	adds	r3, #68	; 0x44
 80057f8:	000c      	movs	r4, r1
 80057fa:	429d      	cmp	r5, r3
 80057fc:	d11c      	bne.n	8005838 <__submore+0x48>
 80057fe:	2680      	movs	r6, #128	; 0x80
 8005800:	00f6      	lsls	r6, r6, #3
 8005802:	0031      	movs	r1, r6
 8005804:	f000 f8a6 	bl	8005954 <_malloc_r>
 8005808:	2800      	cmp	r0, #0
 800580a:	d102      	bne.n	8005812 <__submore+0x22>
 800580c:	2001      	movs	r0, #1
 800580e:	4240      	negs	r0, r0
 8005810:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005812:	0023      	movs	r3, r4
 8005814:	6360      	str	r0, [r4, #52]	; 0x34
 8005816:	63a6      	str	r6, [r4, #56]	; 0x38
 8005818:	3346      	adds	r3, #70	; 0x46
 800581a:	781a      	ldrb	r2, [r3, #0]
 800581c:	4b10      	ldr	r3, [pc, #64]	; (8005860 <__submore+0x70>)
 800581e:	54c2      	strb	r2, [r0, r3]
 8005820:	0023      	movs	r3, r4
 8005822:	3345      	adds	r3, #69	; 0x45
 8005824:	781a      	ldrb	r2, [r3, #0]
 8005826:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <__submore+0x74>)
 8005828:	54c2      	strb	r2, [r0, r3]
 800582a:	782a      	ldrb	r2, [r5, #0]
 800582c:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <__submore+0x78>)
 800582e:	54c2      	strb	r2, [r0, r3]
 8005830:	18c0      	adds	r0, r0, r3
 8005832:	6020      	str	r0, [r4, #0]
 8005834:	2000      	movs	r0, #0
 8005836:	e7eb      	b.n	8005810 <__submore+0x20>
 8005838:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800583a:	0029      	movs	r1, r5
 800583c:	0073      	lsls	r3, r6, #1
 800583e:	001a      	movs	r2, r3
 8005840:	9301      	str	r3, [sp, #4]
 8005842:	f000 f8e5 	bl	8005a10 <_realloc_r>
 8005846:	1e05      	subs	r5, r0, #0
 8005848:	d0e0      	beq.n	800580c <__submore+0x1c>
 800584a:	1987      	adds	r7, r0, r6
 800584c:	0001      	movs	r1, r0
 800584e:	0032      	movs	r2, r6
 8005850:	0038      	movs	r0, r7
 8005852:	f000 f818 	bl	8005886 <memcpy>
 8005856:	9b01      	ldr	r3, [sp, #4]
 8005858:	6027      	str	r7, [r4, #0]
 800585a:	6365      	str	r5, [r4, #52]	; 0x34
 800585c:	63a3      	str	r3, [r4, #56]	; 0x38
 800585e:	e7e9      	b.n	8005834 <__submore+0x44>
 8005860:	000003ff 	.word	0x000003ff
 8005864:	000003fe 	.word	0x000003fe
 8005868:	000003fd 	.word	0x000003fd

0800586c <__retarget_lock_acquire_recursive>:
 800586c:	4770      	bx	lr

0800586e <__retarget_lock_release_recursive>:
 800586e:	4770      	bx	lr

08005870 <memchr>:
 8005870:	b2c9      	uxtb	r1, r1
 8005872:	1882      	adds	r2, r0, r2
 8005874:	4290      	cmp	r0, r2
 8005876:	d101      	bne.n	800587c <memchr+0xc>
 8005878:	2000      	movs	r0, #0
 800587a:	4770      	bx	lr
 800587c:	7803      	ldrb	r3, [r0, #0]
 800587e:	428b      	cmp	r3, r1
 8005880:	d0fb      	beq.n	800587a <memchr+0xa>
 8005882:	3001      	adds	r0, #1
 8005884:	e7f6      	b.n	8005874 <memchr+0x4>

08005886 <memcpy>:
 8005886:	2300      	movs	r3, #0
 8005888:	b510      	push	{r4, lr}
 800588a:	429a      	cmp	r2, r3
 800588c:	d100      	bne.n	8005890 <memcpy+0xa>
 800588e:	bd10      	pop	{r4, pc}
 8005890:	5ccc      	ldrb	r4, [r1, r3]
 8005892:	54c4      	strb	r4, [r0, r3]
 8005894:	3301      	adds	r3, #1
 8005896:	e7f8      	b.n	800588a <memcpy+0x4>

08005898 <memmove>:
 8005898:	b510      	push	{r4, lr}
 800589a:	4288      	cmp	r0, r1
 800589c:	d902      	bls.n	80058a4 <memmove+0xc>
 800589e:	188b      	adds	r3, r1, r2
 80058a0:	4298      	cmp	r0, r3
 80058a2:	d303      	bcc.n	80058ac <memmove+0x14>
 80058a4:	2300      	movs	r3, #0
 80058a6:	e007      	b.n	80058b8 <memmove+0x20>
 80058a8:	5c8b      	ldrb	r3, [r1, r2]
 80058aa:	5483      	strb	r3, [r0, r2]
 80058ac:	3a01      	subs	r2, #1
 80058ae:	d2fb      	bcs.n	80058a8 <memmove+0x10>
 80058b0:	bd10      	pop	{r4, pc}
 80058b2:	5ccc      	ldrb	r4, [r1, r3]
 80058b4:	54c4      	strb	r4, [r0, r3]
 80058b6:	3301      	adds	r3, #1
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d1fa      	bne.n	80058b2 <memmove+0x1a>
 80058bc:	e7f8      	b.n	80058b0 <memmove+0x18>
	...

080058c0 <_free_r>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	0005      	movs	r5, r0
 80058c4:	2900      	cmp	r1, #0
 80058c6:	d010      	beq.n	80058ea <_free_r+0x2a>
 80058c8:	1f0c      	subs	r4, r1, #4
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	da00      	bge.n	80058d2 <_free_r+0x12>
 80058d0:	18e4      	adds	r4, r4, r3
 80058d2:	0028      	movs	r0, r5
 80058d4:	f000 f8d4 	bl	8005a80 <__malloc_lock>
 80058d8:	4a1d      	ldr	r2, [pc, #116]	; (8005950 <_free_r+0x90>)
 80058da:	6813      	ldr	r3, [r2, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d105      	bne.n	80058ec <_free_r+0x2c>
 80058e0:	6063      	str	r3, [r4, #4]
 80058e2:	6014      	str	r4, [r2, #0]
 80058e4:	0028      	movs	r0, r5
 80058e6:	f000 f8d3 	bl	8005a90 <__malloc_unlock>
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	42a3      	cmp	r3, r4
 80058ee:	d908      	bls.n	8005902 <_free_r+0x42>
 80058f0:	6821      	ldr	r1, [r4, #0]
 80058f2:	1860      	adds	r0, r4, r1
 80058f4:	4283      	cmp	r3, r0
 80058f6:	d1f3      	bne.n	80058e0 <_free_r+0x20>
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	1841      	adds	r1, r0, r1
 80058fe:	6021      	str	r1, [r4, #0]
 8005900:	e7ee      	b.n	80058e0 <_free_r+0x20>
 8005902:	001a      	movs	r2, r3
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <_free_r+0x4e>
 800590a:	42a3      	cmp	r3, r4
 800590c:	d9f9      	bls.n	8005902 <_free_r+0x42>
 800590e:	6811      	ldr	r1, [r2, #0]
 8005910:	1850      	adds	r0, r2, r1
 8005912:	42a0      	cmp	r0, r4
 8005914:	d10b      	bne.n	800592e <_free_r+0x6e>
 8005916:	6820      	ldr	r0, [r4, #0]
 8005918:	1809      	adds	r1, r1, r0
 800591a:	1850      	adds	r0, r2, r1
 800591c:	6011      	str	r1, [r2, #0]
 800591e:	4283      	cmp	r3, r0
 8005920:	d1e0      	bne.n	80058e4 <_free_r+0x24>
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	1841      	adds	r1, r0, r1
 8005928:	6011      	str	r1, [r2, #0]
 800592a:	6053      	str	r3, [r2, #4]
 800592c:	e7da      	b.n	80058e4 <_free_r+0x24>
 800592e:	42a0      	cmp	r0, r4
 8005930:	d902      	bls.n	8005938 <_free_r+0x78>
 8005932:	230c      	movs	r3, #12
 8005934:	602b      	str	r3, [r5, #0]
 8005936:	e7d5      	b.n	80058e4 <_free_r+0x24>
 8005938:	6821      	ldr	r1, [r4, #0]
 800593a:	1860      	adds	r0, r4, r1
 800593c:	4283      	cmp	r3, r0
 800593e:	d103      	bne.n	8005948 <_free_r+0x88>
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	1841      	adds	r1, r0, r1
 8005946:	6021      	str	r1, [r4, #0]
 8005948:	6063      	str	r3, [r4, #4]
 800594a:	6054      	str	r4, [r2, #4]
 800594c:	e7ca      	b.n	80058e4 <_free_r+0x24>
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	20000090 	.word	0x20000090

08005954 <_malloc_r>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	2303      	movs	r3, #3
 8005958:	1ccd      	adds	r5, r1, #3
 800595a:	439d      	bics	r5, r3
 800595c:	3508      	adds	r5, #8
 800595e:	0006      	movs	r6, r0
 8005960:	2d0c      	cmp	r5, #12
 8005962:	d21f      	bcs.n	80059a4 <_malloc_r+0x50>
 8005964:	250c      	movs	r5, #12
 8005966:	42a9      	cmp	r1, r5
 8005968:	d81e      	bhi.n	80059a8 <_malloc_r+0x54>
 800596a:	0030      	movs	r0, r6
 800596c:	f000 f888 	bl	8005a80 <__malloc_lock>
 8005970:	4925      	ldr	r1, [pc, #148]	; (8005a08 <_malloc_r+0xb4>)
 8005972:	680a      	ldr	r2, [r1, #0]
 8005974:	0014      	movs	r4, r2
 8005976:	2c00      	cmp	r4, #0
 8005978:	d11a      	bne.n	80059b0 <_malloc_r+0x5c>
 800597a:	4f24      	ldr	r7, [pc, #144]	; (8005a0c <_malloc_r+0xb8>)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d104      	bne.n	800598c <_malloc_r+0x38>
 8005982:	0021      	movs	r1, r4
 8005984:	0030      	movs	r0, r6
 8005986:	f000 f869 	bl	8005a5c <_sbrk_r>
 800598a:	6038      	str	r0, [r7, #0]
 800598c:	0029      	movs	r1, r5
 800598e:	0030      	movs	r0, r6
 8005990:	f000 f864 	bl	8005a5c <_sbrk_r>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d12b      	bne.n	80059f0 <_malloc_r+0x9c>
 8005998:	230c      	movs	r3, #12
 800599a:	0030      	movs	r0, r6
 800599c:	6033      	str	r3, [r6, #0]
 800599e:	f000 f877 	bl	8005a90 <__malloc_unlock>
 80059a2:	e003      	b.n	80059ac <_malloc_r+0x58>
 80059a4:	2d00      	cmp	r5, #0
 80059a6:	dade      	bge.n	8005966 <_malloc_r+0x12>
 80059a8:	230c      	movs	r3, #12
 80059aa:	6033      	str	r3, [r6, #0]
 80059ac:	2000      	movs	r0, #0
 80059ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	1b5b      	subs	r3, r3, r5
 80059b4:	d419      	bmi.n	80059ea <_malloc_r+0x96>
 80059b6:	2b0b      	cmp	r3, #11
 80059b8:	d903      	bls.n	80059c2 <_malloc_r+0x6e>
 80059ba:	6023      	str	r3, [r4, #0]
 80059bc:	18e4      	adds	r4, r4, r3
 80059be:	6025      	str	r5, [r4, #0]
 80059c0:	e003      	b.n	80059ca <_malloc_r+0x76>
 80059c2:	6863      	ldr	r3, [r4, #4]
 80059c4:	42a2      	cmp	r2, r4
 80059c6:	d10e      	bne.n	80059e6 <_malloc_r+0x92>
 80059c8:	600b      	str	r3, [r1, #0]
 80059ca:	0030      	movs	r0, r6
 80059cc:	f000 f860 	bl	8005a90 <__malloc_unlock>
 80059d0:	0020      	movs	r0, r4
 80059d2:	2207      	movs	r2, #7
 80059d4:	300b      	adds	r0, #11
 80059d6:	1d23      	adds	r3, r4, #4
 80059d8:	4390      	bics	r0, r2
 80059da:	1ac2      	subs	r2, r0, r3
 80059dc:	4298      	cmp	r0, r3
 80059de:	d0e6      	beq.n	80059ae <_malloc_r+0x5a>
 80059e0:	1a1b      	subs	r3, r3, r0
 80059e2:	50a3      	str	r3, [r4, r2]
 80059e4:	e7e3      	b.n	80059ae <_malloc_r+0x5a>
 80059e6:	6053      	str	r3, [r2, #4]
 80059e8:	e7ef      	b.n	80059ca <_malloc_r+0x76>
 80059ea:	0022      	movs	r2, r4
 80059ec:	6864      	ldr	r4, [r4, #4]
 80059ee:	e7c2      	b.n	8005976 <_malloc_r+0x22>
 80059f0:	2303      	movs	r3, #3
 80059f2:	1cc4      	adds	r4, r0, #3
 80059f4:	439c      	bics	r4, r3
 80059f6:	42a0      	cmp	r0, r4
 80059f8:	d0e1      	beq.n	80059be <_malloc_r+0x6a>
 80059fa:	1a21      	subs	r1, r4, r0
 80059fc:	0030      	movs	r0, r6
 80059fe:	f000 f82d 	bl	8005a5c <_sbrk_r>
 8005a02:	1c43      	adds	r3, r0, #1
 8005a04:	d1db      	bne.n	80059be <_malloc_r+0x6a>
 8005a06:	e7c7      	b.n	8005998 <_malloc_r+0x44>
 8005a08:	20000090 	.word	0x20000090
 8005a0c:	20000094 	.word	0x20000094

08005a10 <_realloc_r>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	0007      	movs	r7, r0
 8005a14:	000d      	movs	r5, r1
 8005a16:	0016      	movs	r6, r2
 8005a18:	2900      	cmp	r1, #0
 8005a1a:	d105      	bne.n	8005a28 <_realloc_r+0x18>
 8005a1c:	0011      	movs	r1, r2
 8005a1e:	f7ff ff99 	bl	8005954 <_malloc_r>
 8005a22:	0004      	movs	r4, r0
 8005a24:	0020      	movs	r0, r4
 8005a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a28:	2a00      	cmp	r2, #0
 8005a2a:	d103      	bne.n	8005a34 <_realloc_r+0x24>
 8005a2c:	f7ff ff48 	bl	80058c0 <_free_r>
 8005a30:	0034      	movs	r4, r6
 8005a32:	e7f7      	b.n	8005a24 <_realloc_r+0x14>
 8005a34:	f000 f834 	bl	8005aa0 <_malloc_usable_size_r>
 8005a38:	002c      	movs	r4, r5
 8005a3a:	42b0      	cmp	r0, r6
 8005a3c:	d2f2      	bcs.n	8005a24 <_realloc_r+0x14>
 8005a3e:	0031      	movs	r1, r6
 8005a40:	0038      	movs	r0, r7
 8005a42:	f7ff ff87 	bl	8005954 <_malloc_r>
 8005a46:	1e04      	subs	r4, r0, #0
 8005a48:	d0ec      	beq.n	8005a24 <_realloc_r+0x14>
 8005a4a:	0029      	movs	r1, r5
 8005a4c:	0032      	movs	r2, r6
 8005a4e:	f7ff ff1a 	bl	8005886 <memcpy>
 8005a52:	0029      	movs	r1, r5
 8005a54:	0038      	movs	r0, r7
 8005a56:	f7ff ff33 	bl	80058c0 <_free_r>
 8005a5a:	e7e3      	b.n	8005a24 <_realloc_r+0x14>

08005a5c <_sbrk_r>:
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	b570      	push	{r4, r5, r6, lr}
 8005a60:	4d06      	ldr	r5, [pc, #24]	; (8005a7c <_sbrk_r+0x20>)
 8005a62:	0004      	movs	r4, r0
 8005a64:	0008      	movs	r0, r1
 8005a66:	602b      	str	r3, [r5, #0]
 8005a68:	f7fb fcd4 	bl	8001414 <_sbrk>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d103      	bne.n	8005a78 <_sbrk_r+0x1c>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d000      	beq.n	8005a78 <_sbrk_r+0x1c>
 8005a76:	6023      	str	r3, [r4, #0]
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	20000190 	.word	0x20000190

08005a80 <__malloc_lock>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	4802      	ldr	r0, [pc, #8]	; (8005a8c <__malloc_lock+0xc>)
 8005a84:	f7ff fef2 	bl	800586c <__retarget_lock_acquire_recursive>
 8005a88:	bd10      	pop	{r4, pc}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	20000198 	.word	0x20000198

08005a90 <__malloc_unlock>:
 8005a90:	b510      	push	{r4, lr}
 8005a92:	4802      	ldr	r0, [pc, #8]	; (8005a9c <__malloc_unlock+0xc>)
 8005a94:	f7ff feeb 	bl	800586e <__retarget_lock_release_recursive>
 8005a98:	bd10      	pop	{r4, pc}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	20000198 	.word	0x20000198

08005aa0 <_malloc_usable_size_r>:
 8005aa0:	1f0b      	subs	r3, r1, #4
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	1f18      	subs	r0, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	da01      	bge.n	8005aae <_malloc_usable_size_r+0xe>
 8005aaa:	580b      	ldr	r3, [r1, r0]
 8005aac:	18c0      	adds	r0, r0, r3
 8005aae:	4770      	bx	lr

08005ab0 <_init>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr

08005abc <_fini>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac2:	bc08      	pop	{r3}
 8005ac4:	469e      	mov	lr, r3
 8005ac6:	4770      	bx	lr
