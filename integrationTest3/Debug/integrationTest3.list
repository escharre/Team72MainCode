
integrationTest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005178  08005178  00015178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005280  08005280  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005280  08005280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005288  08005288  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005288  08005288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800528c  0800528c  0001528c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  08005300  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08005300  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac0f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf9  00000000  00000000  0002aca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011256  00000000  00000000  0002dc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c945  00000000  00000000  0003ee8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b312  00000000  00000000  0004b7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b6ae5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b4  00000000  00000000  000b6b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005160 	.word	0x08005160

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005160 	.word	0x08005160

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c08      	adds	r0, r1, #0
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 f9bb 	bl	80005b8 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 f93f 	bl	80004d0 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f9ad 	bl	80005b8 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f9a3 	bl	80005b8 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f94d 	bl	8000520 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 f943 	bl	8000520 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_uldivmod>:
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d111      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	d10f      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d100      	bne.n	80002b6 <__aeabi_uldivmod+0xe>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d002      	beq.n	80002be <__aeabi_uldivmod+0x16>
 80002b8:	2100      	movs	r1, #0
 80002ba:	43c9      	mvns	r1, r1
 80002bc:	1c08      	adds	r0, r1, #0
 80002be:	b407      	push	{r0, r1, r2}
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <__aeabi_uldivmod+0x24>)
 80002c2:	a102      	add	r1, pc, #8	; (adr r1, 80002cc <__aeabi_uldivmod+0x24>)
 80002c4:	1840      	adds	r0, r0, r1
 80002c6:	9002      	str	r0, [sp, #8]
 80002c8:	bd03      	pop	{r0, r1, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	ffffff65 	.word	0xffffff65
 80002d0:	b403      	push	{r0, r1}
 80002d2:	4668      	mov	r0, sp
 80002d4:	b501      	push	{r0, lr}
 80002d6:	9802      	ldr	r0, [sp, #8]
 80002d8:	f000 f82e 	bl	8000338 <__udivmoddi4>
 80002dc:	9b01      	ldr	r3, [sp, #4]
 80002de:	469e      	mov	lr, r3
 80002e0:	b002      	add	sp, #8
 80002e2:	bc0c      	pop	{r2, r3}
 80002e4:	4770      	bx	lr
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_lmul>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	0415      	lsls	r5, r2, #16
 80002ec:	0c2d      	lsrs	r5, r5, #16
 80002ee:	000f      	movs	r7, r1
 80002f0:	0001      	movs	r1, r0
 80002f2:	002e      	movs	r6, r5
 80002f4:	46c6      	mov	lr, r8
 80002f6:	4684      	mov	ip, r0
 80002f8:	0400      	lsls	r0, r0, #16
 80002fa:	0c14      	lsrs	r4, r2, #16
 80002fc:	0c00      	lsrs	r0, r0, #16
 80002fe:	0c09      	lsrs	r1, r1, #16
 8000300:	4346      	muls	r6, r0
 8000302:	434d      	muls	r5, r1
 8000304:	4360      	muls	r0, r4
 8000306:	4361      	muls	r1, r4
 8000308:	1940      	adds	r0, r0, r5
 800030a:	0c34      	lsrs	r4, r6, #16
 800030c:	1824      	adds	r4, r4, r0
 800030e:	b500      	push	{lr}
 8000310:	42a5      	cmp	r5, r4
 8000312:	d903      	bls.n	800031c <__aeabi_lmul+0x34>
 8000314:	2080      	movs	r0, #128	; 0x80
 8000316:	0240      	lsls	r0, r0, #9
 8000318:	4680      	mov	r8, r0
 800031a:	4441      	add	r1, r8
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	186d      	adds	r5, r5, r1
 8000320:	4661      	mov	r1, ip
 8000322:	4359      	muls	r1, r3
 8000324:	437a      	muls	r2, r7
 8000326:	0430      	lsls	r0, r6, #16
 8000328:	1949      	adds	r1, r1, r5
 800032a:	0424      	lsls	r4, r4, #16
 800032c:	0c00      	lsrs	r0, r0, #16
 800032e:	1820      	adds	r0, r4, r0
 8000330:	1889      	adds	r1, r1, r2
 8000332:	bc80      	pop	{r7}
 8000334:	46b8      	mov	r8, r7
 8000336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000338 <__udivmoddi4>:
 8000338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800033a:	4657      	mov	r7, sl
 800033c:	464e      	mov	r6, r9
 800033e:	4645      	mov	r5, r8
 8000340:	46de      	mov	lr, fp
 8000342:	b5e0      	push	{r5, r6, r7, lr}
 8000344:	0004      	movs	r4, r0
 8000346:	000d      	movs	r5, r1
 8000348:	4692      	mov	sl, r2
 800034a:	4699      	mov	r9, r3
 800034c:	b083      	sub	sp, #12
 800034e:	428b      	cmp	r3, r1
 8000350:	d830      	bhi.n	80003b4 <__udivmoddi4+0x7c>
 8000352:	d02d      	beq.n	80003b0 <__udivmoddi4+0x78>
 8000354:	4649      	mov	r1, r9
 8000356:	4650      	mov	r0, sl
 8000358:	f000 faec 	bl	8000934 <__clzdi2>
 800035c:	0029      	movs	r1, r5
 800035e:	0006      	movs	r6, r0
 8000360:	0020      	movs	r0, r4
 8000362:	f000 fae7 	bl	8000934 <__clzdi2>
 8000366:	1a33      	subs	r3, r6, r0
 8000368:	4698      	mov	r8, r3
 800036a:	3b20      	subs	r3, #32
 800036c:	469b      	mov	fp, r3
 800036e:	d433      	bmi.n	80003d8 <__udivmoddi4+0xa0>
 8000370:	465a      	mov	r2, fp
 8000372:	4653      	mov	r3, sl
 8000374:	4093      	lsls	r3, r2
 8000376:	4642      	mov	r2, r8
 8000378:	001f      	movs	r7, r3
 800037a:	4653      	mov	r3, sl
 800037c:	4093      	lsls	r3, r2
 800037e:	001e      	movs	r6, r3
 8000380:	42af      	cmp	r7, r5
 8000382:	d83a      	bhi.n	80003fa <__udivmoddi4+0xc2>
 8000384:	42af      	cmp	r7, r5
 8000386:	d100      	bne.n	800038a <__udivmoddi4+0x52>
 8000388:	e078      	b.n	800047c <__udivmoddi4+0x144>
 800038a:	465b      	mov	r3, fp
 800038c:	1ba4      	subs	r4, r4, r6
 800038e:	41bd      	sbcs	r5, r7
 8000390:	2b00      	cmp	r3, #0
 8000392:	da00      	bge.n	8000396 <__udivmoddi4+0x5e>
 8000394:	e075      	b.n	8000482 <__udivmoddi4+0x14a>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	2301      	movs	r3, #1
 80003a0:	465a      	mov	r2, fp
 80003a2:	4093      	lsls	r3, r2
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	2301      	movs	r3, #1
 80003a8:	4642      	mov	r2, r8
 80003aa:	4093      	lsls	r3, r2
 80003ac:	9300      	str	r3, [sp, #0]
 80003ae:	e028      	b.n	8000402 <__udivmoddi4+0xca>
 80003b0:	4282      	cmp	r2, r0
 80003b2:	d9cf      	bls.n	8000354 <__udivmoddi4+0x1c>
 80003b4:	2200      	movs	r2, #0
 80003b6:	2300      	movs	r3, #0
 80003b8:	9200      	str	r2, [sp, #0]
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <__udivmoddi4+0x8e>
 80003c2:	601c      	str	r4, [r3, #0]
 80003c4:	605d      	str	r5, [r3, #4]
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	b003      	add	sp, #12
 80003cc:	bcf0      	pop	{r4, r5, r6, r7}
 80003ce:	46bb      	mov	fp, r7
 80003d0:	46b2      	mov	sl, r6
 80003d2:	46a9      	mov	r9, r5
 80003d4:	46a0      	mov	r8, r4
 80003d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	1a9b      	subs	r3, r3, r2
 80003de:	4652      	mov	r2, sl
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	4641      	mov	r1, r8
 80003e4:	0013      	movs	r3, r2
 80003e6:	464a      	mov	r2, r9
 80003e8:	408a      	lsls	r2, r1
 80003ea:	0017      	movs	r7, r2
 80003ec:	4642      	mov	r2, r8
 80003ee:	431f      	orrs	r7, r3
 80003f0:	4653      	mov	r3, sl
 80003f2:	4093      	lsls	r3, r2
 80003f4:	001e      	movs	r6, r3
 80003f6:	42af      	cmp	r7, r5
 80003f8:	d9c4      	bls.n	8000384 <__udivmoddi4+0x4c>
 80003fa:	2200      	movs	r2, #0
 80003fc:	2300      	movs	r3, #0
 80003fe:	9200      	str	r2, [sp, #0]
 8000400:	9301      	str	r3, [sp, #4]
 8000402:	4643      	mov	r3, r8
 8000404:	2b00      	cmp	r3, #0
 8000406:	d0d9      	beq.n	80003bc <__udivmoddi4+0x84>
 8000408:	07fb      	lsls	r3, r7, #31
 800040a:	0872      	lsrs	r2, r6, #1
 800040c:	431a      	orrs	r2, r3
 800040e:	4646      	mov	r6, r8
 8000410:	087b      	lsrs	r3, r7, #1
 8000412:	e00e      	b.n	8000432 <__udivmoddi4+0xfa>
 8000414:	42ab      	cmp	r3, r5
 8000416:	d101      	bne.n	800041c <__udivmoddi4+0xe4>
 8000418:	42a2      	cmp	r2, r4
 800041a:	d80c      	bhi.n	8000436 <__udivmoddi4+0xfe>
 800041c:	1aa4      	subs	r4, r4, r2
 800041e:	419d      	sbcs	r5, r3
 8000420:	2001      	movs	r0, #1
 8000422:	1924      	adds	r4, r4, r4
 8000424:	416d      	adcs	r5, r5
 8000426:	2100      	movs	r1, #0
 8000428:	3e01      	subs	r6, #1
 800042a:	1824      	adds	r4, r4, r0
 800042c:	414d      	adcs	r5, r1
 800042e:	2e00      	cmp	r6, #0
 8000430:	d006      	beq.n	8000440 <__udivmoddi4+0x108>
 8000432:	42ab      	cmp	r3, r5
 8000434:	d9ee      	bls.n	8000414 <__udivmoddi4+0xdc>
 8000436:	3e01      	subs	r6, #1
 8000438:	1924      	adds	r4, r4, r4
 800043a:	416d      	adcs	r5, r5
 800043c:	2e00      	cmp	r6, #0
 800043e:	d1f8      	bne.n	8000432 <__udivmoddi4+0xfa>
 8000440:	9800      	ldr	r0, [sp, #0]
 8000442:	9901      	ldr	r1, [sp, #4]
 8000444:	465b      	mov	r3, fp
 8000446:	1900      	adds	r0, r0, r4
 8000448:	4169      	adcs	r1, r5
 800044a:	2b00      	cmp	r3, #0
 800044c:	db24      	blt.n	8000498 <__udivmoddi4+0x160>
 800044e:	002b      	movs	r3, r5
 8000450:	465a      	mov	r2, fp
 8000452:	4644      	mov	r4, r8
 8000454:	40d3      	lsrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	db2a      	blt.n	80004ba <__udivmoddi4+0x182>
 8000464:	0026      	movs	r6, r4
 8000466:	409e      	lsls	r6, r3
 8000468:	0033      	movs	r3, r6
 800046a:	0026      	movs	r6, r4
 800046c:	4647      	mov	r7, r8
 800046e:	40be      	lsls	r6, r7
 8000470:	0032      	movs	r2, r6
 8000472:	1a80      	subs	r0, r0, r2
 8000474:	4199      	sbcs	r1, r3
 8000476:	9000      	str	r0, [sp, #0]
 8000478:	9101      	str	r1, [sp, #4]
 800047a:	e79f      	b.n	80003bc <__udivmoddi4+0x84>
 800047c:	42a3      	cmp	r3, r4
 800047e:	d8bc      	bhi.n	80003fa <__udivmoddi4+0xc2>
 8000480:	e783      	b.n	800038a <__udivmoddi4+0x52>
 8000482:	4642      	mov	r2, r8
 8000484:	2320      	movs	r3, #32
 8000486:	2100      	movs	r1, #0
 8000488:	1a9b      	subs	r3, r3, r2
 800048a:	2200      	movs	r2, #0
 800048c:	9100      	str	r1, [sp, #0]
 800048e:	9201      	str	r2, [sp, #4]
 8000490:	2201      	movs	r2, #1
 8000492:	40da      	lsrs	r2, r3
 8000494:	9201      	str	r2, [sp, #4]
 8000496:	e786      	b.n	80003a6 <__udivmoddi4+0x6e>
 8000498:	4642      	mov	r2, r8
 800049a:	2320      	movs	r3, #32
 800049c:	1a9b      	subs	r3, r3, r2
 800049e:	002a      	movs	r2, r5
 80004a0:	4646      	mov	r6, r8
 80004a2:	409a      	lsls	r2, r3
 80004a4:	0023      	movs	r3, r4
 80004a6:	40f3      	lsrs	r3, r6
 80004a8:	4644      	mov	r4, r8
 80004aa:	4313      	orrs	r3, r2
 80004ac:	002a      	movs	r2, r5
 80004ae:	40e2      	lsrs	r2, r4
 80004b0:	001c      	movs	r4, r3
 80004b2:	465b      	mov	r3, fp
 80004b4:	0015      	movs	r5, r2
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	dad4      	bge.n	8000464 <__udivmoddi4+0x12c>
 80004ba:	4642      	mov	r2, r8
 80004bc:	002f      	movs	r7, r5
 80004be:	2320      	movs	r3, #32
 80004c0:	0026      	movs	r6, r4
 80004c2:	4097      	lsls	r7, r2
 80004c4:	1a9b      	subs	r3, r3, r2
 80004c6:	40de      	lsrs	r6, r3
 80004c8:	003b      	movs	r3, r7
 80004ca:	4333      	orrs	r3, r6
 80004cc:	e7cd      	b.n	800046a <__udivmoddi4+0x132>
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__eqsf2>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	0042      	lsls	r2, r0, #1
 80004d4:	024e      	lsls	r6, r1, #9
 80004d6:	004c      	lsls	r4, r1, #1
 80004d8:	0245      	lsls	r5, r0, #9
 80004da:	0a6d      	lsrs	r5, r5, #9
 80004dc:	0e12      	lsrs	r2, r2, #24
 80004de:	0fc3      	lsrs	r3, r0, #31
 80004e0:	0a76      	lsrs	r6, r6, #9
 80004e2:	0e24      	lsrs	r4, r4, #24
 80004e4:	0fc9      	lsrs	r1, r1, #31
 80004e6:	2aff      	cmp	r2, #255	; 0xff
 80004e8:	d00f      	beq.n	800050a <__eqsf2+0x3a>
 80004ea:	2cff      	cmp	r4, #255	; 0xff
 80004ec:	d011      	beq.n	8000512 <__eqsf2+0x42>
 80004ee:	2001      	movs	r0, #1
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d000      	beq.n	80004f6 <__eqsf2+0x26>
 80004f4:	bd70      	pop	{r4, r5, r6, pc}
 80004f6:	42b5      	cmp	r5, r6
 80004f8:	d1fc      	bne.n	80004f4 <__eqsf2+0x24>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d00d      	beq.n	800051a <__eqsf2+0x4a>
 80004fe:	2a00      	cmp	r2, #0
 8000500:	d1f8      	bne.n	80004f4 <__eqsf2+0x24>
 8000502:	0028      	movs	r0, r5
 8000504:	1e45      	subs	r5, r0, #1
 8000506:	41a8      	sbcs	r0, r5
 8000508:	e7f4      	b.n	80004f4 <__eqsf2+0x24>
 800050a:	2001      	movs	r0, #1
 800050c:	2d00      	cmp	r5, #0
 800050e:	d1f1      	bne.n	80004f4 <__eqsf2+0x24>
 8000510:	e7eb      	b.n	80004ea <__eqsf2+0x1a>
 8000512:	2001      	movs	r0, #1
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1ed      	bne.n	80004f4 <__eqsf2+0x24>
 8000518:	e7e9      	b.n	80004ee <__eqsf2+0x1e>
 800051a:	2000      	movs	r0, #0
 800051c:	e7ea      	b.n	80004f4 <__eqsf2+0x24>
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__gesf2>:
 8000520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000522:	0042      	lsls	r2, r0, #1
 8000524:	0246      	lsls	r6, r0, #9
 8000526:	024d      	lsls	r5, r1, #9
 8000528:	004c      	lsls	r4, r1, #1
 800052a:	0fc3      	lsrs	r3, r0, #31
 800052c:	0a76      	lsrs	r6, r6, #9
 800052e:	0e12      	lsrs	r2, r2, #24
 8000530:	0a6d      	lsrs	r5, r5, #9
 8000532:	0e24      	lsrs	r4, r4, #24
 8000534:	0fc8      	lsrs	r0, r1, #31
 8000536:	2aff      	cmp	r2, #255	; 0xff
 8000538:	d01f      	beq.n	800057a <__gesf2+0x5a>
 800053a:	2cff      	cmp	r4, #255	; 0xff
 800053c:	d010      	beq.n	8000560 <__gesf2+0x40>
 800053e:	2a00      	cmp	r2, #0
 8000540:	d11f      	bne.n	8000582 <__gesf2+0x62>
 8000542:	4271      	negs	r1, r6
 8000544:	4171      	adcs	r1, r6
 8000546:	2c00      	cmp	r4, #0
 8000548:	d101      	bne.n	800054e <__gesf2+0x2e>
 800054a:	2d00      	cmp	r5, #0
 800054c:	d01e      	beq.n	800058c <__gesf2+0x6c>
 800054e:	2900      	cmp	r1, #0
 8000550:	d10e      	bne.n	8000570 <__gesf2+0x50>
 8000552:	4283      	cmp	r3, r0
 8000554:	d01e      	beq.n	8000594 <__gesf2+0x74>
 8000556:	2102      	movs	r1, #2
 8000558:	1e58      	subs	r0, r3, #1
 800055a:	4008      	ands	r0, r1
 800055c:	3801      	subs	r0, #1
 800055e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000560:	2d00      	cmp	r5, #0
 8000562:	d126      	bne.n	80005b2 <__gesf2+0x92>
 8000564:	2a00      	cmp	r2, #0
 8000566:	d1f4      	bne.n	8000552 <__gesf2+0x32>
 8000568:	4271      	negs	r1, r6
 800056a:	4171      	adcs	r1, r6
 800056c:	2900      	cmp	r1, #0
 800056e:	d0f0      	beq.n	8000552 <__gesf2+0x32>
 8000570:	2800      	cmp	r0, #0
 8000572:	d1f4      	bne.n	800055e <__gesf2+0x3e>
 8000574:	2001      	movs	r0, #1
 8000576:	4240      	negs	r0, r0
 8000578:	e7f1      	b.n	800055e <__gesf2+0x3e>
 800057a:	2e00      	cmp	r6, #0
 800057c:	d119      	bne.n	80005b2 <__gesf2+0x92>
 800057e:	2cff      	cmp	r4, #255	; 0xff
 8000580:	d0ee      	beq.n	8000560 <__gesf2+0x40>
 8000582:	2c00      	cmp	r4, #0
 8000584:	d1e5      	bne.n	8000552 <__gesf2+0x32>
 8000586:	2d00      	cmp	r5, #0
 8000588:	d1e3      	bne.n	8000552 <__gesf2+0x32>
 800058a:	e7e4      	b.n	8000556 <__gesf2+0x36>
 800058c:	2000      	movs	r0, #0
 800058e:	2e00      	cmp	r6, #0
 8000590:	d0e5      	beq.n	800055e <__gesf2+0x3e>
 8000592:	e7e0      	b.n	8000556 <__gesf2+0x36>
 8000594:	42a2      	cmp	r2, r4
 8000596:	dc05      	bgt.n	80005a4 <__gesf2+0x84>
 8000598:	dbea      	blt.n	8000570 <__gesf2+0x50>
 800059a:	42ae      	cmp	r6, r5
 800059c:	d802      	bhi.n	80005a4 <__gesf2+0x84>
 800059e:	d3e7      	bcc.n	8000570 <__gesf2+0x50>
 80005a0:	2000      	movs	r0, #0
 80005a2:	e7dc      	b.n	800055e <__gesf2+0x3e>
 80005a4:	4241      	negs	r1, r0
 80005a6:	4141      	adcs	r1, r0
 80005a8:	4248      	negs	r0, r1
 80005aa:	2102      	movs	r1, #2
 80005ac:	4008      	ands	r0, r1
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7d5      	b.n	800055e <__gesf2+0x3e>
 80005b2:	2002      	movs	r0, #2
 80005b4:	4240      	negs	r0, r0
 80005b6:	e7d2      	b.n	800055e <__gesf2+0x3e>

080005b8 <__lesf2>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	0042      	lsls	r2, r0, #1
 80005bc:	0246      	lsls	r6, r0, #9
 80005be:	024d      	lsls	r5, r1, #9
 80005c0:	004c      	lsls	r4, r1, #1
 80005c2:	0fc3      	lsrs	r3, r0, #31
 80005c4:	0a76      	lsrs	r6, r6, #9
 80005c6:	0e12      	lsrs	r2, r2, #24
 80005c8:	0a6d      	lsrs	r5, r5, #9
 80005ca:	0e24      	lsrs	r4, r4, #24
 80005cc:	0fc8      	lsrs	r0, r1, #31
 80005ce:	2aff      	cmp	r2, #255	; 0xff
 80005d0:	d00d      	beq.n	80005ee <__lesf2+0x36>
 80005d2:	2cff      	cmp	r4, #255	; 0xff
 80005d4:	d00f      	beq.n	80005f6 <__lesf2+0x3e>
 80005d6:	2a00      	cmp	r2, #0
 80005d8:	d123      	bne.n	8000622 <__lesf2+0x6a>
 80005da:	4271      	negs	r1, r6
 80005dc:	4171      	adcs	r1, r6
 80005de:	2c00      	cmp	r4, #0
 80005e0:	d10f      	bne.n	8000602 <__lesf2+0x4a>
 80005e2:	2d00      	cmp	r5, #0
 80005e4:	d10d      	bne.n	8000602 <__lesf2+0x4a>
 80005e6:	2000      	movs	r0, #0
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d014      	beq.n	8000616 <__lesf2+0x5e>
 80005ec:	e00d      	b.n	800060a <__lesf2+0x52>
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d110      	bne.n	8000614 <__lesf2+0x5c>
 80005f2:	2cff      	cmp	r4, #255	; 0xff
 80005f4:	d115      	bne.n	8000622 <__lesf2+0x6a>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d10c      	bne.n	8000614 <__lesf2+0x5c>
 80005fa:	2a00      	cmp	r2, #0
 80005fc:	d103      	bne.n	8000606 <__lesf2+0x4e>
 80005fe:	4271      	negs	r1, r6
 8000600:	4171      	adcs	r1, r6
 8000602:	2900      	cmp	r1, #0
 8000604:	d108      	bne.n	8000618 <__lesf2+0x60>
 8000606:	4283      	cmp	r3, r0
 8000608:	d010      	beq.n	800062c <__lesf2+0x74>
 800060a:	2102      	movs	r1, #2
 800060c:	1e58      	subs	r0, r3, #1
 800060e:	4008      	ands	r0, r1
 8000610:	3801      	subs	r0, #1
 8000612:	e000      	b.n	8000616 <__lesf2+0x5e>
 8000614:	2002      	movs	r0, #2
 8000616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000618:	2800      	cmp	r0, #0
 800061a:	d1fc      	bne.n	8000616 <__lesf2+0x5e>
 800061c:	2001      	movs	r0, #1
 800061e:	4240      	negs	r0, r0
 8000620:	e7f9      	b.n	8000616 <__lesf2+0x5e>
 8000622:	2c00      	cmp	r4, #0
 8000624:	d1ef      	bne.n	8000606 <__lesf2+0x4e>
 8000626:	2d00      	cmp	r5, #0
 8000628:	d1ed      	bne.n	8000606 <__lesf2+0x4e>
 800062a:	e7ee      	b.n	800060a <__lesf2+0x52>
 800062c:	42a2      	cmp	r2, r4
 800062e:	dc05      	bgt.n	800063c <__lesf2+0x84>
 8000630:	dbf2      	blt.n	8000618 <__lesf2+0x60>
 8000632:	42ae      	cmp	r6, r5
 8000634:	d802      	bhi.n	800063c <__lesf2+0x84>
 8000636:	d3ef      	bcc.n	8000618 <__lesf2+0x60>
 8000638:	2000      	movs	r0, #0
 800063a:	e7ec      	b.n	8000616 <__lesf2+0x5e>
 800063c:	4241      	negs	r1, r0
 800063e:	4141      	adcs	r1, r0
 8000640:	4248      	negs	r0, r1
 8000642:	2102      	movs	r1, #2
 8000644:	4008      	ands	r0, r1
 8000646:	3801      	subs	r0, #1
 8000648:	e7e5      	b.n	8000616 <__lesf2+0x5e>
 800064a:	46c0      	nop			; (mov r8, r8)

0800064c <__aeabi_fmul>:
 800064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064e:	4657      	mov	r7, sl
 8000650:	464e      	mov	r6, r9
 8000652:	4645      	mov	r5, r8
 8000654:	46de      	mov	lr, fp
 8000656:	0244      	lsls	r4, r0, #9
 8000658:	b5e0      	push	{r5, r6, r7, lr}
 800065a:	0045      	lsls	r5, r0, #1
 800065c:	1c0f      	adds	r7, r1, #0
 800065e:	0a64      	lsrs	r4, r4, #9
 8000660:	0e2d      	lsrs	r5, r5, #24
 8000662:	0fc6      	lsrs	r6, r0, #31
 8000664:	2d00      	cmp	r5, #0
 8000666:	d047      	beq.n	80006f8 <__aeabi_fmul+0xac>
 8000668:	2dff      	cmp	r5, #255	; 0xff
 800066a:	d04d      	beq.n	8000708 <__aeabi_fmul+0xbc>
 800066c:	2300      	movs	r3, #0
 800066e:	2080      	movs	r0, #128	; 0x80
 8000670:	469a      	mov	sl, r3
 8000672:	469b      	mov	fp, r3
 8000674:	00e4      	lsls	r4, r4, #3
 8000676:	04c0      	lsls	r0, r0, #19
 8000678:	4304      	orrs	r4, r0
 800067a:	3d7f      	subs	r5, #127	; 0x7f
 800067c:	0278      	lsls	r0, r7, #9
 800067e:	0a43      	lsrs	r3, r0, #9
 8000680:	4699      	mov	r9, r3
 8000682:	007a      	lsls	r2, r7, #1
 8000684:	0ffb      	lsrs	r3, r7, #31
 8000686:	4698      	mov	r8, r3
 8000688:	0e12      	lsrs	r2, r2, #24
 800068a:	464b      	mov	r3, r9
 800068c:	d044      	beq.n	8000718 <__aeabi_fmul+0xcc>
 800068e:	2aff      	cmp	r2, #255	; 0xff
 8000690:	d011      	beq.n	80006b6 <__aeabi_fmul+0x6a>
 8000692:	00d8      	lsls	r0, r3, #3
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	04db      	lsls	r3, r3, #19
 8000698:	4303      	orrs	r3, r0
 800069a:	4699      	mov	r9, r3
 800069c:	2000      	movs	r0, #0
 800069e:	3a7f      	subs	r2, #127	; 0x7f
 80006a0:	18ad      	adds	r5, r5, r2
 80006a2:	4647      	mov	r7, r8
 80006a4:	4653      	mov	r3, sl
 80006a6:	4077      	eors	r7, r6
 80006a8:	1c69      	adds	r1, r5, #1
 80006aa:	2b0f      	cmp	r3, #15
 80006ac:	d83f      	bhi.n	800072e <__aeabi_fmul+0xe2>
 80006ae:	4a72      	ldr	r2, [pc, #456]	; (8000878 <__aeabi_fmul+0x22c>)
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	58d3      	ldr	r3, [r2, r3]
 80006b4:	469f      	mov	pc, r3
 80006b6:	35ff      	adds	r5, #255	; 0xff
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d000      	beq.n	80006be <__aeabi_fmul+0x72>
 80006bc:	e079      	b.n	80007b2 <__aeabi_fmul+0x166>
 80006be:	4652      	mov	r2, sl
 80006c0:	2302      	movs	r3, #2
 80006c2:	431a      	orrs	r2, r3
 80006c4:	4692      	mov	sl, r2
 80006c6:	2002      	movs	r0, #2
 80006c8:	e7eb      	b.n	80006a2 <__aeabi_fmul+0x56>
 80006ca:	4647      	mov	r7, r8
 80006cc:	464c      	mov	r4, r9
 80006ce:	4683      	mov	fp, r0
 80006d0:	465b      	mov	r3, fp
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d028      	beq.n	8000728 <__aeabi_fmul+0xdc>
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d100      	bne.n	80006dc <__aeabi_fmul+0x90>
 80006da:	e0c6      	b.n	800086a <__aeabi_fmul+0x21e>
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d14f      	bne.n	8000780 <__aeabi_fmul+0x134>
 80006e0:	2000      	movs	r0, #0
 80006e2:	2400      	movs	r4, #0
 80006e4:	05c0      	lsls	r0, r0, #23
 80006e6:	07ff      	lsls	r7, r7, #31
 80006e8:	4320      	orrs	r0, r4
 80006ea:	4338      	orrs	r0, r7
 80006ec:	bcf0      	pop	{r4, r5, r6, r7}
 80006ee:	46bb      	mov	fp, r7
 80006f0:	46b2      	mov	sl, r6
 80006f2:	46a9      	mov	r9, r5
 80006f4:	46a0      	mov	r8, r4
 80006f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006f8:	2c00      	cmp	r4, #0
 80006fa:	d171      	bne.n	80007e0 <__aeabi_fmul+0x194>
 80006fc:	2304      	movs	r3, #4
 80006fe:	469a      	mov	sl, r3
 8000700:	3b03      	subs	r3, #3
 8000702:	2500      	movs	r5, #0
 8000704:	469b      	mov	fp, r3
 8000706:	e7b9      	b.n	800067c <__aeabi_fmul+0x30>
 8000708:	2c00      	cmp	r4, #0
 800070a:	d163      	bne.n	80007d4 <__aeabi_fmul+0x188>
 800070c:	2308      	movs	r3, #8
 800070e:	469a      	mov	sl, r3
 8000710:	3b06      	subs	r3, #6
 8000712:	25ff      	movs	r5, #255	; 0xff
 8000714:	469b      	mov	fp, r3
 8000716:	e7b1      	b.n	800067c <__aeabi_fmul+0x30>
 8000718:	2b00      	cmp	r3, #0
 800071a:	d150      	bne.n	80007be <__aeabi_fmul+0x172>
 800071c:	4652      	mov	r2, sl
 800071e:	3301      	adds	r3, #1
 8000720:	431a      	orrs	r2, r3
 8000722:	4692      	mov	sl, r2
 8000724:	2001      	movs	r0, #1
 8000726:	e7bc      	b.n	80006a2 <__aeabi_fmul+0x56>
 8000728:	20ff      	movs	r0, #255	; 0xff
 800072a:	2400      	movs	r4, #0
 800072c:	e7da      	b.n	80006e4 <__aeabi_fmul+0x98>
 800072e:	4648      	mov	r0, r9
 8000730:	0c26      	lsrs	r6, r4, #16
 8000732:	0424      	lsls	r4, r4, #16
 8000734:	0c22      	lsrs	r2, r4, #16
 8000736:	0404      	lsls	r4, r0, #16
 8000738:	0c24      	lsrs	r4, r4, #16
 800073a:	464b      	mov	r3, r9
 800073c:	0020      	movs	r0, r4
 800073e:	0c1b      	lsrs	r3, r3, #16
 8000740:	4350      	muls	r0, r2
 8000742:	4374      	muls	r4, r6
 8000744:	435a      	muls	r2, r3
 8000746:	435e      	muls	r6, r3
 8000748:	1912      	adds	r2, r2, r4
 800074a:	0c03      	lsrs	r3, r0, #16
 800074c:	189b      	adds	r3, r3, r2
 800074e:	429c      	cmp	r4, r3
 8000750:	d903      	bls.n	800075a <__aeabi_fmul+0x10e>
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	0252      	lsls	r2, r2, #9
 8000756:	4694      	mov	ip, r2
 8000758:	4466      	add	r6, ip
 800075a:	0400      	lsls	r0, r0, #16
 800075c:	041a      	lsls	r2, r3, #16
 800075e:	0c00      	lsrs	r0, r0, #16
 8000760:	1812      	adds	r2, r2, r0
 8000762:	0194      	lsls	r4, r2, #6
 8000764:	1e60      	subs	r0, r4, #1
 8000766:	4184      	sbcs	r4, r0
 8000768:	0c1b      	lsrs	r3, r3, #16
 800076a:	0e92      	lsrs	r2, r2, #26
 800076c:	199b      	adds	r3, r3, r6
 800076e:	4314      	orrs	r4, r2
 8000770:	019b      	lsls	r3, r3, #6
 8000772:	431c      	orrs	r4, r3
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	d572      	bpl.n	800085e <__aeabi_fmul+0x212>
 8000778:	2001      	movs	r0, #1
 800077a:	0863      	lsrs	r3, r4, #1
 800077c:	4004      	ands	r4, r0
 800077e:	431c      	orrs	r4, r3
 8000780:	0008      	movs	r0, r1
 8000782:	307f      	adds	r0, #127	; 0x7f
 8000784:	2800      	cmp	r0, #0
 8000786:	dd3c      	ble.n	8000802 <__aeabi_fmul+0x1b6>
 8000788:	0763      	lsls	r3, r4, #29
 800078a:	d004      	beq.n	8000796 <__aeabi_fmul+0x14a>
 800078c:	230f      	movs	r3, #15
 800078e:	4023      	ands	r3, r4
 8000790:	2b04      	cmp	r3, #4
 8000792:	d000      	beq.n	8000796 <__aeabi_fmul+0x14a>
 8000794:	3404      	adds	r4, #4
 8000796:	0123      	lsls	r3, r4, #4
 8000798:	d503      	bpl.n	80007a2 <__aeabi_fmul+0x156>
 800079a:	3180      	adds	r1, #128	; 0x80
 800079c:	0008      	movs	r0, r1
 800079e:	4b37      	ldr	r3, [pc, #220]	; (800087c <__aeabi_fmul+0x230>)
 80007a0:	401c      	ands	r4, r3
 80007a2:	28fe      	cmp	r0, #254	; 0xfe
 80007a4:	dcc0      	bgt.n	8000728 <__aeabi_fmul+0xdc>
 80007a6:	01a4      	lsls	r4, r4, #6
 80007a8:	0a64      	lsrs	r4, r4, #9
 80007aa:	b2c0      	uxtb	r0, r0
 80007ac:	e79a      	b.n	80006e4 <__aeabi_fmul+0x98>
 80007ae:	0037      	movs	r7, r6
 80007b0:	e78e      	b.n	80006d0 <__aeabi_fmul+0x84>
 80007b2:	4652      	mov	r2, sl
 80007b4:	2303      	movs	r3, #3
 80007b6:	431a      	orrs	r2, r3
 80007b8:	4692      	mov	sl, r2
 80007ba:	2003      	movs	r0, #3
 80007bc:	e771      	b.n	80006a2 <__aeabi_fmul+0x56>
 80007be:	4648      	mov	r0, r9
 80007c0:	f000 f89a 	bl	80008f8 <__clzsi2>
 80007c4:	464a      	mov	r2, r9
 80007c6:	1f43      	subs	r3, r0, #5
 80007c8:	409a      	lsls	r2, r3
 80007ca:	1a2d      	subs	r5, r5, r0
 80007cc:	4691      	mov	r9, r2
 80007ce:	2000      	movs	r0, #0
 80007d0:	3d76      	subs	r5, #118	; 0x76
 80007d2:	e766      	b.n	80006a2 <__aeabi_fmul+0x56>
 80007d4:	230c      	movs	r3, #12
 80007d6:	469a      	mov	sl, r3
 80007d8:	3b09      	subs	r3, #9
 80007da:	25ff      	movs	r5, #255	; 0xff
 80007dc:	469b      	mov	fp, r3
 80007de:	e74d      	b.n	800067c <__aeabi_fmul+0x30>
 80007e0:	0020      	movs	r0, r4
 80007e2:	f000 f889 	bl	80008f8 <__clzsi2>
 80007e6:	2576      	movs	r5, #118	; 0x76
 80007e8:	1f43      	subs	r3, r0, #5
 80007ea:	409c      	lsls	r4, r3
 80007ec:	2300      	movs	r3, #0
 80007ee:	426d      	negs	r5, r5
 80007f0:	469a      	mov	sl, r3
 80007f2:	469b      	mov	fp, r3
 80007f4:	1a2d      	subs	r5, r5, r0
 80007f6:	e741      	b.n	800067c <__aeabi_fmul+0x30>
 80007f8:	2480      	movs	r4, #128	; 0x80
 80007fa:	2700      	movs	r7, #0
 80007fc:	20ff      	movs	r0, #255	; 0xff
 80007fe:	03e4      	lsls	r4, r4, #15
 8000800:	e770      	b.n	80006e4 <__aeabi_fmul+0x98>
 8000802:	2301      	movs	r3, #1
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	2b1b      	cmp	r3, #27
 8000808:	dd00      	ble.n	800080c <__aeabi_fmul+0x1c0>
 800080a:	e769      	b.n	80006e0 <__aeabi_fmul+0x94>
 800080c:	319e      	adds	r1, #158	; 0x9e
 800080e:	0020      	movs	r0, r4
 8000810:	408c      	lsls	r4, r1
 8000812:	40d8      	lsrs	r0, r3
 8000814:	1e63      	subs	r3, r4, #1
 8000816:	419c      	sbcs	r4, r3
 8000818:	4304      	orrs	r4, r0
 800081a:	0763      	lsls	r3, r4, #29
 800081c:	d004      	beq.n	8000828 <__aeabi_fmul+0x1dc>
 800081e:	230f      	movs	r3, #15
 8000820:	4023      	ands	r3, r4
 8000822:	2b04      	cmp	r3, #4
 8000824:	d000      	beq.n	8000828 <__aeabi_fmul+0x1dc>
 8000826:	3404      	adds	r4, #4
 8000828:	0163      	lsls	r3, r4, #5
 800082a:	d51a      	bpl.n	8000862 <__aeabi_fmul+0x216>
 800082c:	2001      	movs	r0, #1
 800082e:	2400      	movs	r4, #0
 8000830:	e758      	b.n	80006e4 <__aeabi_fmul+0x98>
 8000832:	2080      	movs	r0, #128	; 0x80
 8000834:	03c0      	lsls	r0, r0, #15
 8000836:	4204      	tst	r4, r0
 8000838:	d009      	beq.n	800084e <__aeabi_fmul+0x202>
 800083a:	464b      	mov	r3, r9
 800083c:	4203      	tst	r3, r0
 800083e:	d106      	bne.n	800084e <__aeabi_fmul+0x202>
 8000840:	464c      	mov	r4, r9
 8000842:	4304      	orrs	r4, r0
 8000844:	0264      	lsls	r4, r4, #9
 8000846:	4647      	mov	r7, r8
 8000848:	20ff      	movs	r0, #255	; 0xff
 800084a:	0a64      	lsrs	r4, r4, #9
 800084c:	e74a      	b.n	80006e4 <__aeabi_fmul+0x98>
 800084e:	2080      	movs	r0, #128	; 0x80
 8000850:	03c0      	lsls	r0, r0, #15
 8000852:	4304      	orrs	r4, r0
 8000854:	0264      	lsls	r4, r4, #9
 8000856:	0037      	movs	r7, r6
 8000858:	20ff      	movs	r0, #255	; 0xff
 800085a:	0a64      	lsrs	r4, r4, #9
 800085c:	e742      	b.n	80006e4 <__aeabi_fmul+0x98>
 800085e:	0029      	movs	r1, r5
 8000860:	e78e      	b.n	8000780 <__aeabi_fmul+0x134>
 8000862:	01a4      	lsls	r4, r4, #6
 8000864:	2000      	movs	r0, #0
 8000866:	0a64      	lsrs	r4, r4, #9
 8000868:	e73c      	b.n	80006e4 <__aeabi_fmul+0x98>
 800086a:	2080      	movs	r0, #128	; 0x80
 800086c:	03c0      	lsls	r0, r0, #15
 800086e:	4304      	orrs	r4, r0
 8000870:	0264      	lsls	r4, r4, #9
 8000872:	20ff      	movs	r0, #255	; 0xff
 8000874:	0a64      	lsrs	r4, r4, #9
 8000876:	e735      	b.n	80006e4 <__aeabi_fmul+0x98>
 8000878:	080051a0 	.word	0x080051a0
 800087c:	f7ffffff 	.word	0xf7ffffff

08000880 <__aeabi_ui2f>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	1e05      	subs	r5, r0, #0
 8000884:	d00e      	beq.n	80008a4 <__aeabi_ui2f+0x24>
 8000886:	f000 f837 	bl	80008f8 <__clzsi2>
 800088a:	239e      	movs	r3, #158	; 0x9e
 800088c:	0004      	movs	r4, r0
 800088e:	1a1b      	subs	r3, r3, r0
 8000890:	2b96      	cmp	r3, #150	; 0x96
 8000892:	dc0c      	bgt.n	80008ae <__aeabi_ui2f+0x2e>
 8000894:	2808      	cmp	r0, #8
 8000896:	dd01      	ble.n	800089c <__aeabi_ui2f+0x1c>
 8000898:	3c08      	subs	r4, #8
 800089a:	40a5      	lsls	r5, r4
 800089c:	026d      	lsls	r5, r5, #9
 800089e:	0a6d      	lsrs	r5, r5, #9
 80008a0:	b2d8      	uxtb	r0, r3
 80008a2:	e001      	b.n	80008a8 <__aeabi_ui2f+0x28>
 80008a4:	2000      	movs	r0, #0
 80008a6:	2500      	movs	r5, #0
 80008a8:	05c0      	lsls	r0, r0, #23
 80008aa:	4328      	orrs	r0, r5
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	2b99      	cmp	r3, #153	; 0x99
 80008b0:	dd09      	ble.n	80008c6 <__aeabi_ui2f+0x46>
 80008b2:	0002      	movs	r2, r0
 80008b4:	0029      	movs	r1, r5
 80008b6:	321b      	adds	r2, #27
 80008b8:	4091      	lsls	r1, r2
 80008ba:	1e4a      	subs	r2, r1, #1
 80008bc:	4191      	sbcs	r1, r2
 80008be:	2205      	movs	r2, #5
 80008c0:	1a12      	subs	r2, r2, r0
 80008c2:	40d5      	lsrs	r5, r2
 80008c4:	430d      	orrs	r5, r1
 80008c6:	2c05      	cmp	r4, #5
 80008c8:	dd01      	ble.n	80008ce <__aeabi_ui2f+0x4e>
 80008ca:	1f62      	subs	r2, r4, #5
 80008cc:	4095      	lsls	r5, r2
 80008ce:	0029      	movs	r1, r5
 80008d0:	4e08      	ldr	r6, [pc, #32]	; (80008f4 <__aeabi_ui2f+0x74>)
 80008d2:	4031      	ands	r1, r6
 80008d4:	076a      	lsls	r2, r5, #29
 80008d6:	d009      	beq.n	80008ec <__aeabi_ui2f+0x6c>
 80008d8:	200f      	movs	r0, #15
 80008da:	4028      	ands	r0, r5
 80008dc:	2804      	cmp	r0, #4
 80008de:	d005      	beq.n	80008ec <__aeabi_ui2f+0x6c>
 80008e0:	3104      	adds	r1, #4
 80008e2:	014a      	lsls	r2, r1, #5
 80008e4:	d502      	bpl.n	80008ec <__aeabi_ui2f+0x6c>
 80008e6:	239f      	movs	r3, #159	; 0x9f
 80008e8:	4031      	ands	r1, r6
 80008ea:	1b1b      	subs	r3, r3, r4
 80008ec:	0189      	lsls	r1, r1, #6
 80008ee:	0a4d      	lsrs	r5, r1, #9
 80008f0:	b2d8      	uxtb	r0, r3
 80008f2:	e7d9      	b.n	80008a8 <__aeabi_ui2f+0x28>
 80008f4:	fbffffff 	.word	0xfbffffff

080008f8 <__clzsi2>:
 80008f8:	211c      	movs	r1, #28
 80008fa:	2301      	movs	r3, #1
 80008fc:	041b      	lsls	r3, r3, #16
 80008fe:	4298      	cmp	r0, r3
 8000900:	d301      	bcc.n	8000906 <__clzsi2+0xe>
 8000902:	0c00      	lsrs	r0, r0, #16
 8000904:	3910      	subs	r1, #16
 8000906:	0a1b      	lsrs	r3, r3, #8
 8000908:	4298      	cmp	r0, r3
 800090a:	d301      	bcc.n	8000910 <__clzsi2+0x18>
 800090c:	0a00      	lsrs	r0, r0, #8
 800090e:	3908      	subs	r1, #8
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	4298      	cmp	r0, r3
 8000914:	d301      	bcc.n	800091a <__clzsi2+0x22>
 8000916:	0900      	lsrs	r0, r0, #4
 8000918:	3904      	subs	r1, #4
 800091a:	a202      	add	r2, pc, #8	; (adr r2, 8000924 <__clzsi2+0x2c>)
 800091c:	5c10      	ldrb	r0, [r2, r0]
 800091e:	1840      	adds	r0, r0, r1
 8000920:	4770      	bx	lr
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	02020304 	.word	0x02020304
 8000928:	01010101 	.word	0x01010101
	...

08000934 <__clzdi2>:
 8000934:	b510      	push	{r4, lr}
 8000936:	2900      	cmp	r1, #0
 8000938:	d103      	bne.n	8000942 <__clzdi2+0xe>
 800093a:	f7ff ffdd 	bl	80008f8 <__clzsi2>
 800093e:	3020      	adds	r0, #32
 8000940:	e002      	b.n	8000948 <__clzdi2+0x14>
 8000942:	1c08      	adds	r0, r1, #0
 8000944:	f7ff ffd8 	bl	80008f8 <__clzsi2>
 8000948:	bd10      	pop	{r4, pc}
 800094a:	46c0      	nop			; (mov r8, r8)

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b5b0      	push	{r4, r5, r7, lr}
 800094e:	b09e      	sub	sp, #120	; 0x78
 8000950:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000952:	f000 fd87 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000956:	f000 f945 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095a:	f000 fa97 	bl	8000e8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800095e:	f000 fa65 	bl	8000e2c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000962:	f000 f9bb 	bl	8000cdc <MX_I2C1_Init>
  MX_RTC_Init();
 8000966:	f000 f9f9 	bl	8000d5c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //Local Variables
    int mois;
    int basil = 1;
 800096a:	2301      	movs	r3, #1
 800096c:	66fb      	str	r3, [r7, #108]	; 0x6c
    int rosemary = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	66bb      	str	r3, [r7, #104]	; 0x68
    int thyme = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	667b      	str	r3, [r7, #100]	; 0x64
    float light;
    int dec;
    int days;
    int days2;
    RTC_TimeTypeDef currTime = {0};
 8000976:	242c      	movs	r4, #44	; 0x2c
 8000978:	193b      	adds	r3, r7, r4
 800097a:	0018      	movs	r0, r3
 800097c:	2314      	movs	r3, #20
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f003 ffbf 	bl	8004904 <memset>
    RTC_TimeTypeDef currDate = {0};
 8000986:	2518      	movs	r5, #24
 8000988:	197b      	adds	r3, r7, r5
 800098a:	0018      	movs	r0, r3
 800098c:	2314      	movs	r3, #20
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f003 ffb7 	bl	8004904 <memset>
    int timeCon;
    int hourtosmecs, mintosmecs, secstosmecs;

    HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8000996:	1939      	adds	r1, r7, r4
 8000998:	4b8d      	ldr	r3, [pc, #564]	; (8000bd0 <main+0x284>)
 800099a:	2200      	movs	r2, #0
 800099c:	0018      	movs	r0, r3
 800099e:	f003 f8c1 	bl	8003b24 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 80009a2:	1979      	adds	r1, r7, r5
 80009a4:	4b8a      	ldr	r3, [pc, #552]	; (8000bd0 <main+0x284>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	0018      	movs	r0, r3
 80009aa:	f003 f9c5 	bl	8003d38 <HAL_RTC_GetDate>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //Get Time from RTC
	  	    HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80009ae:	252c      	movs	r5, #44	; 0x2c
 80009b0:	1979      	adds	r1, r7, r5
 80009b2:	4b87      	ldr	r3, [pc, #540]	; (8000bd0 <main+0x284>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f003 f8b4 	bl	8003b24 <HAL_RTC_GetTime>
	        char timeBuff[20];
	        sprintf(timeBuff,"%d,,,%d...%d\n", currTime.Hours, currTime.Minutes, currTime.Seconds);
 80009bc:	197b      	adds	r3, r7, r5
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	001a      	movs	r2, r3
 80009c2:	197b      	adds	r3, r7, r5
 80009c4:	785b      	ldrb	r3, [r3, #1]
 80009c6:	001c      	movs	r4, r3
 80009c8:	197b      	adds	r3, r7, r5
 80009ca:	789b      	ldrb	r3, [r3, #2]
 80009cc:	4981      	ldr	r1, [pc, #516]	; (8000bd4 <main+0x288>)
 80009ce:	1d38      	adds	r0, r7, #4
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	0023      	movs	r3, r4
 80009d4:	f003 ff9e 	bl	8004914 <siprintf>
	        HAL_UART_Transmit(&huart2, timeBuff, sizeof(timeBuff), 100);
 80009d8:	1d39      	adds	r1, r7, #4
 80009da:	487f      	ldr	r0, [pc, #508]	; (8000bd8 <main+0x28c>)
 80009dc:	2364      	movs	r3, #100	; 0x64
 80009de:	2214      	movs	r2, #20
 80009e0:	f003 fae2 	bl	8003fa8 <HAL_UART_Transmit>

	         //time conversion
	         hourtosmecs = currTime.Hours * 3600000000;
 80009e4:	0028      	movs	r0, r5
 80009e6:	183b      	adds	r3, r7, r0
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	0019      	movs	r1, r3
 80009ec:	000a      	movs	r2, r1
 80009ee:	0152      	lsls	r2, r2, #5
 80009f0:	1a52      	subs	r2, r2, r1
 80009f2:	0193      	lsls	r3, r2, #6
 80009f4:	1a9b      	subs	r3, r3, r2
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	185b      	adds	r3, r3, r1
 80009fa:	011a      	lsls	r2, r3, #4
 80009fc:	1ad2      	subs	r2, r2, r3
 80009fe:	0113      	lsls	r3, r2, #4
 8000a00:	1a9b      	subs	r3, r3, r2
 8000a02:	029b      	lsls	r3, r3, #10
 8000a04:	663b      	str	r3, [r7, #96]	; 0x60
	         mintosmecs = currTime.Minutes * 60000000;
 8000a06:	183b      	adds	r3, r7, r0
 8000a08:	785b      	ldrb	r3, [r3, #1]
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	000a      	movs	r2, r1
 8000a0e:	0152      	lsls	r2, r2, #5
 8000a10:	1a52      	subs	r2, r2, r1
 8000a12:	0193      	lsls	r3, r2, #6
 8000a14:	1a9b      	subs	r3, r3, r2
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	185b      	adds	r3, r3, r1
 8000a1a:	011a      	lsls	r2, r3, #4
 8000a1c:	1ad2      	subs	r2, r2, r3
 8000a1e:	0213      	lsls	r3, r2, #8
 8000a20:	001a      	movs	r2, r3
 8000a22:	65fa      	str	r2, [r7, #92]	; 0x5c
	         secstosmecs = currTime.Seconds * 1000000;
 8000a24:	183b      	adds	r3, r7, r0
 8000a26:	789b      	ldrb	r3, [r3, #2]
 8000a28:	0019      	movs	r1, r3
 8000a2a:	000a      	movs	r2, r1
 8000a2c:	0152      	lsls	r2, r2, #5
 8000a2e:	1a52      	subs	r2, r2, r1
 8000a30:	0193      	lsls	r3, r2, #6
 8000a32:	1a9b      	subs	r3, r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	185b      	adds	r3, r3, r1
 8000a38:	019b      	lsls	r3, r3, #6
 8000a3a:	65bb      	str	r3, [r7, #88]	; 0x58
	         timeCon = hourtosmecs + mintosmecs + secstosmecs;
 8000a3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a40:	18d3      	adds	r3, r2, r3
 8000a42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a44:	18d3      	adds	r3, r2, r3
 8000a46:	657b      	str	r3, [r7, #84]	; 0x54
	         //Day counter for thyme
	         if (timeCon == 86400000000 && days <= 10){
	             	days = days + 1;
	             }
	             else {
	             	days = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	653b      	str	r3, [r7, #80]	; 0x50
	         //Day counter for rosemary
	             if (timeCon == 86400000000 && days2 <= 14){
	                 	days2 = days2 + 1;
	                 }
	                 else {
	                 	days2 = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
	                 }

	         //Sensor Function Calls
	         light = lightSensor();	//Light Sensor Function Call
 8000a50:	f000 fa88 	bl	8000f64 <lightSensor>
 8000a54:	1c03      	adds	r3, r0, #0
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
	         mois = moistureSensor(); //Moisture Sensor Function Call
 8000a58:	f000 fb06 	bl	8001068 <moistureSensor>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44

	         //Sensor Decisions
	         //Sensor Decision Basil
	         if (basil == 1 && thyme == 0 && rosemary == 0){
 8000a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d133      	bne.n	8000ace <main+0x182>
 8000a66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d130      	bne.n	8000ace <main+0x182>
 8000a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d12d      	bne.n	8000ace <main+0x182>
	           	if (light <3000 && timeCon < 28800000000){
 8000a72:	495a      	ldr	r1, [pc, #360]	; (8000bdc <main+0x290>)
 8000a74:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000a76:	f7ff fbef 	bl	8000258 <__aeabi_fcmplt>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d005      	beq.n	8000a8a <main+0x13e>
	            		dec = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	643b      	str	r3, [r7, #64]	; 0x40
	            		LightOutput(dec); //Light Output Function Call- ON
 8000a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 fb49 	bl	800111c <LightOutput>
	            	}
	            	if (light >=3000 && timeCon < 28800000000){
 8000a8a:	4954      	ldr	r1, [pc, #336]	; (8000bdc <main+0x290>)
 8000a8c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000a8e:	f7ff fc01 	bl	8000294 <__aeabi_fcmpge>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d005      	beq.n	8000aa2 <main+0x156>
	            	    dec = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	643b      	str	r3, [r7, #64]	; 0x40
	            	    LightOutput(dec); //Light Output Function Call- OFF
 8000a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 fb3d 	bl	800111c <LightOutput>
	            	}
	            	if (mois <350){
 8000aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000aa4:	23af      	movs	r3, #175	; 0xaf
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	da05      	bge.n	8000ab8 <main+0x16c>
	            	    dec = 1;
 8000aac:	2301      	movs	r3, #1
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
	            	    WaterOutput(dec); //Water Output Function Call- ON
 8000ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fb50 	bl	8001158 <WaterOutput>
	            	}
	            	if (mois >=350){
 8000ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000aba:	23af      	movs	r3, #175	; 0xaf
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	db05      	blt.n	8000ace <main+0x182>
	            	    dec = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	643b      	str	r3, [r7, #64]	; 0x40
	            	    WaterOutput(dec); //Water Output Function Call- OFF
 8000ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f000 fb45 	bl	8001158 <WaterOutput>
	            	}
	         }

	         //Sensor Decision Thyme
	         if (basil == 0 && thyme == 1 && rosemary == 0){
 8000ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d139      	bne.n	8000b48 <main+0x1fc>
 8000ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d136      	bne.n	8000b48 <main+0x1fc>
 8000ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d133      	bne.n	8000b48 <main+0x1fc>
	            	if (light <9000 && timeCon < 28800000000){
 8000ae0:	493f      	ldr	r1, [pc, #252]	; (8000be0 <main+0x294>)
 8000ae2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000ae4:	f7ff fbb8 	bl	8000258 <__aeabi_fcmplt>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d005      	beq.n	8000af8 <main+0x1ac>
	            	    dec = 1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	643b      	str	r3, [r7, #64]	; 0x40
	            	    LightOutput(dec); //Light Output Function Call- ON
 8000af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 fb12 	bl	800111c <LightOutput>
	            	}
	            	if (light >=9000 && timeCon < 28800000000){
 8000af8:	4939      	ldr	r1, [pc, #228]	; (8000be0 <main+0x294>)
 8000afa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000afc:	f7ff fbca 	bl	8000294 <__aeabi_fcmpge>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d005      	beq.n	8000b10 <main+0x1c4>
	            	    dec = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	643b      	str	r3, [r7, #64]	; 0x40
	            	    LightOutput(dec); //Light Output Function Call- OFF
 8000b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 fb06 	bl	800111c <LightOutput>
	            	}

	            	if (mois <350 && days >= 10){
 8000b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b12:	23af      	movs	r3, #175	; 0xaf
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	429a      	cmp	r2, r3
 8000b18:	da08      	bge.n	8000b2c <main+0x1e0>
 8000b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b1c:	2b09      	cmp	r3, #9
 8000b1e:	dd05      	ble.n	8000b2c <main+0x1e0>
	                 dec = 1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	643b      	str	r3, [r7, #64]	; 0x40
	                 WaterOutput(dec); //Water Output Function Call- ON
 8000b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fb16 	bl	8001158 <WaterOutput>
	             }
	             if (mois >=350 && days <= 10){
 8000b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b2e:	23af      	movs	r3, #175	; 0xaf
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	429a      	cmp	r2, r3
 8000b34:	db08      	blt.n	8000b48 <main+0x1fc>
 8000b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b38:	2b0a      	cmp	r3, #10
 8000b3a:	dc05      	bgt.n	8000b48 <main+0x1fc>
	                 dec = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	643b      	str	r3, [r7, #64]	; 0x40
	                 WaterOutput(dec); //Water Output Function Call- OFF
 8000b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 fb08 	bl	8001158 <WaterOutput>
	             }
	         }

	         //Sensor Decision Rosemary
	         if (basil == 0 && thyme == 0 && rosemary == 1){
 8000b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d000      	beq.n	8000b50 <main+0x204>
 8000b4e:	e72e      	b.n	80009ae <main+0x62>
 8000b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d000      	beq.n	8000b58 <main+0x20c>
 8000b56:	e72a      	b.n	80009ae <main+0x62>
 8000b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d000      	beq.n	8000b60 <main+0x214>
 8000b5e:	e726      	b.n	80009ae <main+0x62>
	             if (light <9000 && timeCon < 28800000000){
 8000b60:	491f      	ldr	r1, [pc, #124]	; (8000be0 <main+0x294>)
 8000b62:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000b64:	f7ff fb78 	bl	8000258 <__aeabi_fcmplt>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d005      	beq.n	8000b78 <main+0x22c>
	             	dec = 1;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
	                 LightOutput(dec); //Light Output Function Call- ON
 8000b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 fad2 	bl	800111c <LightOutput>
	             }
	             if (light >=9000 && timeCon < 28800000000){
 8000b78:	4919      	ldr	r1, [pc, #100]	; (8000be0 <main+0x294>)
 8000b7a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000b7c:	f7ff fb8a 	bl	8000294 <__aeabi_fcmpge>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d005      	beq.n	8000b90 <main+0x244>
	                	dec = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	643b      	str	r3, [r7, #64]	; 0x40
	                 LightOutput(dec); //Light Output Function Call- OFF
 8000b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 fac6 	bl	800111c <LightOutput>
	             }

	             if (mois <350 && days2 <= 183){
 8000b90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b92:	23af      	movs	r3, #175	; 0xaf
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	429a      	cmp	r2, r3
 8000b98:	da08      	bge.n	8000bac <main+0x260>
 8000b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b9c:	2bb7      	cmp	r3, #183	; 0xb7
 8000b9e:	dc05      	bgt.n	8000bac <main+0x260>
	                	dec = 1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	643b      	str	r3, [r7, #64]	; 0x40
	                 WaterOutput(dec); //Water Output Function Call- ON
 8000ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 fad6 	bl	8001158 <WaterOutput>
	             }
	             if (mois >=350 && days2 >= 14){
 8000bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000bae:	23af      	movs	r3, #175	; 0xaf
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	da00      	bge.n	8000bb8 <main+0x26c>
 8000bb6:	e6fa      	b.n	80009ae <main+0x62>
 8000bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bba:	2b0d      	cmp	r3, #13
 8000bbc:	dc00      	bgt.n	8000bc0 <main+0x274>
 8000bbe:	e6f6      	b.n	80009ae <main+0x62>
	                	dec = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	643b      	str	r3, [r7, #64]	; 0x40
	                	WaterOutput(dec); //Water Output Function Call- OFF
 8000bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 fac6 	bl	8001158 <WaterOutput>
  {
 8000bcc:	e6ef      	b.n	80009ae <main+0x62>
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	200000e4 	.word	0x200000e4
 8000bd4:	08005178 	.word	0x08005178
 8000bd8:	20000108 	.word	0x20000108
 8000bdc:	453b8000 	.word	0x453b8000
 8000be0:	460ca000 	.word	0x460ca000

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b099      	sub	sp, #100	; 0x64
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	242c      	movs	r4, #44	; 0x2c
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	0018      	movs	r0, r3
 8000bf0:	2334      	movs	r3, #52	; 0x34
 8000bf2:	001a      	movs	r2, r3
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	f003 fe85 	bl	8004904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfa:	2318      	movs	r3, #24
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2314      	movs	r3, #20
 8000c02:	001a      	movs	r2, r3
 8000c04:	2100      	movs	r1, #0
 8000c06:	f003 fe7d 	bl	8004904 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	2318      	movs	r3, #24
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f003 fe76 	bl	8004904 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c18:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <SystemClock_Config+0xf0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a2e      	ldr	r2, [pc, #184]	; (8000cd8 <SystemClock_Config+0xf4>)
 8000c1e:	401a      	ands	r2, r3
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <SystemClock_Config+0xf0>)
 8000c22:	2180      	movs	r1, #128	; 0x80
 8000c24:	0109      	lsls	r1, r1, #4
 8000c26:	430a      	orrs	r2, r1
 8000c28:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c2a:	0021      	movs	r1, r4
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	220a      	movs	r2, #10
 8000c30:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2201      	movs	r2, #1
 8000c36:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2201      	movs	r2, #1
 8000c42:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2202      	movs	r2, #2
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	02d2      	lsls	r2, r2, #11
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	03d2      	lsls	r2, r2, #15
 8000c5e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	0018      	movs	r0, r3
 8000c64:	f001 ff36 	bl	8002ad4 <HAL_RCC_OscConfig>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c6c:	f000 fac0 	bl	80011f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c70:	2118      	movs	r1, #24
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	220f      	movs	r2, #15
 8000c76:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2101      	movs	r1, #1
 8000c94:	0018      	movs	r0, r3
 8000c96:	f002 fa99 	bl	80031cc <HAL_RCC_ClockConfig>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000c9e:	f000 faa7 	bl	80011f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000ca2:	003b      	movs	r3, r7
 8000ca4:	222a      	movs	r2, #42	; 0x2a
 8000ca6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ca8:	003b      	movs	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cae:	003b      	movs	r3, r7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cb4:	003b      	movs	r3, r7
 8000cb6:	2280      	movs	r2, #128	; 0x80
 8000cb8:	0292      	lsls	r2, r2, #10
 8000cba:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbc:	003b      	movs	r3, r7
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f002 fca8 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000cc8:	f000 fa92 	bl	80011f0 <Error_Handler>
  }
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b019      	add	sp, #100	; 0x64
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	40007000 	.word	0x40007000
 8000cd8:	ffffe7ff 	.word	0xffffe7ff

08000cdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <MX_I2C1_Init+0x78>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <MX_I2C1_Init+0x7c>)
 8000cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 fe91 	bl	8001a40 <HAL_I2C_Init>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d22:	f000 fa65 	bl	80011f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f001 fe3a 	bl	80029a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f000 fa5c 	bl	80011f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <MX_I2C1_Init+0x74>)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f001 fe7d 	bl	8002a3c <HAL_I2CEx_ConfigDigitalFilter>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 fa53 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000098 	.word	0x20000098
 8000d54:	40005400 	.word	0x40005400
 8000d58:	00707cbb 	.word	0x00707cbb

08000d5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */
	RTC_TimeTypeDef sTime = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	0018      	movs	r0, r3
 8000d66:	2314      	movs	r3, #20
 8000d68:	001a      	movs	r2, r3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f003 fdca 	bl	8004904 <memset>
	RTC_DateTypeDef sDate = {0};
 8000d70:	003b      	movs	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <MX_RTC_Init+0xc8>)
 8000d78:	4a2b      	ldr	r2, [pc, #172]	; (8000e28 <MX_RTC_Init+0xcc>)
 8000d7a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d7c:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <MX_RTC_Init+0xc8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d82:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <MX_RTC_Init+0xc8>)
 8000d84:	227f      	movs	r2, #127	; 0x7f
 8000d86:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d88:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <MX_RTC_Init+0xc8>)
 8000d8a:	22ff      	movs	r2, #255	; 0xff
 8000d8c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <MX_RTC_Init+0xc8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d94:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <MX_RTC_Init+0xc8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d9a:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <MX_RTC_Init+0xc8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <MX_RTC_Init+0xc8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MX_RTC_Init+0xc8>)
 8000da8:	0018      	movs	r0, r3
 8000daa:	f002 fd59 	bl	8003860 <HAL_RTC_Init>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000db2:	f000 fa1d 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
   sTime.Hours = 10;
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	220a      	movs	r2, #10
 8000dba:	701a      	strb	r2, [r3, #0]
   sTime.Minutes = 15;
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	705a      	strb	r2, [r3, #1]
   sTime.Seconds = 0;
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	709a      	strb	r2, [r3, #2]
   sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2240      	movs	r2, #64	; 0x40
 8000dcc:	70da      	strb	r2, [r3, #3]
   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000dda:	1d39      	adds	r1, r7, #4
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_RTC_Init+0xc8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	0018      	movs	r0, r3
 8000de2:	f002 fddb 	bl	800399c <HAL_RTC_SetTime>
 8000de6:	1e03      	subs	r3, r0, #0
 8000de8:	d001      	beq.n	8000dee <MX_RTC_Init+0x92>
   {
     Error_Handler();
 8000dea:	f000 fa01 	bl	80011f0 <Error_Handler>
   }
   sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2206      	movs	r2, #6
 8000df2:	701a      	strb	r2, [r3, #0]
   sDate.Month = RTC_MONTH_MAY;
 8000df4:	003b      	movs	r3, r7
 8000df6:	2205      	movs	r2, #5
 8000df8:	705a      	strb	r2, [r3, #1]
   sDate.Date = 25;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2219      	movs	r2, #25
 8000dfe:	709a      	strb	r2, [r3, #2]
   sDate.Year = 19;
 8000e00:	003b      	movs	r3, r7
 8000e02:	2213      	movs	r2, #19
 8000e04:	70da      	strb	r2, [r3, #3]

   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000e06:	0039      	movs	r1, r7
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_RTC_Init+0xc8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f002 fee5 	bl	8003bdc <HAL_RTC_SetDate>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <MX_RTC_Init+0xbe>
   {
     Error_Handler();
 8000e16:	f000 f9eb 	bl	80011f0 <Error_Handler>
   }
  /* USER CODE END RTC_Init 2 */

}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b006      	add	sp, #24
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	200000e4 	.word	0x200000e4
 8000e28:	40002800 	.word	0x40002800

08000e2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e32:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <MX_USART2_UART_Init+0x5c>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e38:	22e1      	movs	r2, #225	; 0xe1
 8000e3a:	0252      	lsls	r2, r2, #9
 8000e3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e70:	0018      	movs	r0, r3
 8000e72:	f003 f845 	bl	8003f00 <HAL_UART_Init>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e7a:	f000 f9b9 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000108 	.word	0x20000108
 8000e88:	40004400 	.word	0x40004400

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	240c      	movs	r4, #12
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	0018      	movs	r0, r3
 8000e98:	2314      	movs	r3, #20
 8000e9a:	001a      	movs	r2, r3
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	f003 fd31 	bl	8004904 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eae:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4013      	ands	r3, r2
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ed8:	2102      	movs	r1, #2
 8000eda:	430a      	orrs	r2, r1
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	0159      	lsls	r1, r3, #5
 8000eee:	23a0      	movs	r3, #160	; 0xa0
 8000ef0:	05db      	lsls	r3, r3, #23
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 fd6b 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <MX_GPIO_Init+0xd4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	2108      	movs	r1, #8
 8000f00:	0018      	movs	r0, r3
 8000f02:	f000 fd65 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	0152      	lsls	r2, r2, #5
 8000f0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	193b      	adds	r3, r7, r4
 8000f10:	2201      	movs	r2, #1
 8000f12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	193b      	adds	r3, r7, r4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	193a      	adds	r2, r7, r4
 8000f22:	23a0      	movs	r3, #160	; 0xa0
 8000f24:	05db      	lsls	r3, r3, #23
 8000f26:	0011      	movs	r1, r2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f000 fbe3 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000f2e:	0021      	movs	r1, r4
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2208      	movs	r2, #8
 8000f34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2201      	movs	r2, #1
 8000f3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <MX_GPIO_Init+0xd4>)
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	0010      	movs	r0, r2
 8000f50:	f000 fbd0 	bl	80016f4 <HAL_GPIO_Init>

}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b009      	add	sp, #36	; 0x24
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	50000400 	.word	0x50000400

08000f64 <lightSensor>:

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */
float lightSensor(void){
 8000f64:	b5b0      	push	{r4, r5, r7, lr}
 8000f66:	b08c      	sub	sp, #48	; 0x30
 8000f68:	af04      	add	r7, sp, #16
	 *Date Updated: 3/30/21
	 *Inputs: None
	 *Outputs: float ambient light value in lux*/

	 //local variables
	 const uint8_t sensorAddress = 0x10;
 8000f6a:	241f      	movs	r4, #31
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	2210      	movs	r2, #16
 8000f70:	701a      	strb	r2, [r3, #0]
	 const uint16_t CONFIG_VALUE = 0x0000;
 8000f72:	250a      	movs	r5, #10
 8000f74:	197b      	adds	r3, r7, r5
 8000f76:	2200      	movs	r2, #0
 8000f78:	801a      	strh	r2, [r3, #0]
	 float out;
	 float gain = 1.8432; //Gain for 1/8 gain & 25ms IT (lower resolution but more range)
 8000f7a:	4b39      	ldr	r3, [pc, #228]	; (8001060 <lightSensor+0xfc>)
 8000f7c:	61bb      	str	r3, [r7, #24]
	 float WC;
	 uint8_t lightResolutionData[2];
	 uint8_t WhiteChannelData[2];

	 //Process
	 HAL_I2C_Mem_Write(&hi2c1, (sensorAddress<<1), 0x00, 1, &CONFIG_VALUE, 2, 50);
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	18db      	adds	r3, r3, r3
 8000f86:	b299      	uxth	r1, r3
 8000f88:	4836      	ldr	r0, [pc, #216]	; (8001064 <lightSensor+0x100>)
 8000f8a:	2332      	movs	r3, #50	; 0x32
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	2302      	movs	r3, #2
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	197b      	adds	r3, r7, r5
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f000 fff7 	bl	8001f8c <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&hi2c1, (sensorAddress<<1), 0x03, 1, &CONFIG_VALUE, 2, 50);
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	18db      	adds	r3, r3, r3
 8000fa6:	b299      	uxth	r1, r3
 8000fa8:	482e      	ldr	r0, [pc, #184]	; (8001064 <lightSensor+0x100>)
 8000faa:	2332      	movs	r3, #50	; 0x32
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2302      	movs	r3, #2
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	197b      	adds	r3, r7, r5
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	f000 ffe7 	bl	8001f8c <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Read(&hi2c1, (sensorAddress << 1) | 0x01, 0x04, 1, &lightResolutionData, 2, 50);
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	b299      	uxth	r1, r3
 8000fce:	4825      	ldr	r0, [pc, #148]	; (8001064 <lightSensor+0x100>)
 8000fd0:	2332      	movs	r3, #50	; 0x32
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	2508      	movs	r5, #8
 8000fda:	197b      	adds	r3, r7, r5
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	f001 f901 	bl	80021e8 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(&hi2c1, (sensorAddress << 1) | 0x01, 0x05, 1, &WhiteChannelData, 2, 50);
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	481b      	ldr	r0, [pc, #108]	; (8001064 <lightSensor+0x100>)
 8000ff8:	2332      	movs	r3, #50	; 0x32
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	2205      	movs	r2, #5
 8001008:	f001 f8ee 	bl	80021e8 <HAL_I2C_Mem_Read>
	 Resolution = (lightResolutionData[1]<<8) | lightResolutionData[0];
 800100c:	197b      	adds	r3, r7, r5
 800100e:	785b      	ldrb	r3, [r3, #1]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	197b      	adds	r3, r7, r5
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b21a      	sxth	r2, r3
 800101e:	2316      	movs	r3, #22
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	801a      	strh	r2, [r3, #0]
	 WhiteChannel = (WhiteChannelData[1]<<8) | WhiteChannelData[0];
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	785b      	ldrb	r3, [r3, #1]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21a      	sxth	r2, r3
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21a      	sxth	r2, r3
 8001036:	2114      	movs	r1, #20
 8001038:	187b      	adds	r3, r7, r1
 800103a:	801a      	strh	r2, [r3, #0]

	 //Conversion
	 WC = WhiteChannel; //Int to float conversion
 800103c:	187b      	adds	r3, r7, r1
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff fc1d 	bl	8000880 <__aeabi_ui2f>
 8001046:	1c03      	adds	r3, r0, #0
 8001048:	613b      	str	r3, [r7, #16]

	 out = gain * WC; //Ambient light calculation
 800104a:	6939      	ldr	r1, [r7, #16]
 800104c:	69b8      	ldr	r0, [r7, #24]
 800104e:	f7ff fafd 	bl	800064c <__aeabi_fmul>
 8001052:	1c03      	adds	r3, r0, #0
 8001054:	60fb      	str	r3, [r7, #12]

	 return out;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	1c18      	adds	r0, r3, #0
 800105a:	46bd      	mov	sp, r7
 800105c:	b008      	add	sp, #32
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	3febedfa 	.word	0x3febedfa
 8001064:	20000098 	.word	0x20000098

08001068 <moistureSensor>:

int moistureSensor(void){
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
	 *Outputs: float moisture value and int cap*/

	 //local variables
	 HAL_StatusTypeDef ret;
	 uint8_t buf[12];
	 uint16_t capac = 0;
 800106e:	230e      	movs	r3, #14
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	2200      	movs	r2, #0
 8001074:	801a      	strh	r2, [r3, #0]

	 //Process
	 buf[0] = 0x00;
 8001076:	003b      	movs	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
	 buf[1] = 0x04;
 800107c:	003b      	movs	r3, r7
 800107e:	2204      	movs	r2, #4
 8001080:	705a      	strb	r2, [r3, #1]
	 ret = HAL_I2C_Master_Transmit(&hi2c1,0x36<<1, buf, 2, HAL_MAX_DELAY);
 8001082:	250d      	movs	r5, #13
 8001084:	197c      	adds	r4, r7, r5
 8001086:	003a      	movs	r2, r7
 8001088:	4821      	ldr	r0, [pc, #132]	; (8001110 <moistureSensor+0xa8>)
 800108a:	2301      	movs	r3, #1
 800108c:	425b      	negs	r3, r3
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2302      	movs	r3, #2
 8001092:	216c      	movs	r1, #108	; 0x6c
 8001094:	f000 fd6a 	bl	8001b6c <HAL_I2C_Master_Transmit>
 8001098:	0003      	movs	r3, r0
 800109a:	7023      	strb	r3, [r4, #0]
	 if ( ret != HAL_OK ) {
 800109c:	197b      	adds	r3, r7, r5
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d008      	beq.n	80010b6 <moistureSensor+0x4e>
		 strcpy((char*)buf, "Error Tx\r\n");
 80010a4:	003b      	movs	r3, r7
 80010a6:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <moistureSensor+0xac>)
 80010a8:	ca03      	ldmia	r2!, {r0, r1}
 80010aa:	c303      	stmia	r3!, {r0, r1}
 80010ac:	8811      	ldrh	r1, [r2, #0]
 80010ae:	8019      	strh	r1, [r3, #0]
 80010b0:	7892      	ldrb	r2, [r2, #2]
 80010b2:	709a      	strb	r2, [r3, #2]
 80010b4:	e025      	b.n	8001102 <moistureSensor+0x9a>
	 	 } else {
	 		 ret = HAL_I2C_Master_Receive(&hi2c1, 0x36<<1, buf, 4, HAL_MAX_DELAY); //previously 2
 80010b6:	250d      	movs	r5, #13
 80010b8:	197c      	adds	r4, r7, r5
 80010ba:	003a      	movs	r2, r7
 80010bc:	4814      	ldr	r0, [pc, #80]	; (8001110 <moistureSensor+0xa8>)
 80010be:	2301      	movs	r3, #1
 80010c0:	425b      	negs	r3, r3
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2304      	movs	r3, #4
 80010c6:	216c      	movs	r1, #108	; 0x6c
 80010c8:	f000 fe58 	bl	8001d7c <HAL_I2C_Master_Receive>
 80010cc:	0003      	movs	r3, r0
 80010ce:	7023      	strb	r3, [r4, #0]

	 		 if ( ret != HAL_OK ) {
 80010d0:	197b      	adds	r3, r7, r5
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d008      	beq.n	80010ea <moistureSensor+0x82>
	 			 strcpy((char*)buf, "Error Rx\r\n");
 80010d8:	003b      	movs	r3, r7
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <moistureSensor+0xb0>)
 80010dc:	ca03      	ldmia	r2!, {r0, r1}
 80010de:	c303      	stmia	r3!, {r0, r1}
 80010e0:	8811      	ldrh	r1, [r2, #0]
 80010e2:	8019      	strh	r1, [r3, #0]
 80010e4:	7892      	ldrb	r2, [r2, #2]
 80010e6:	709a      	strb	r2, [r3, #2]
 80010e8:	e00b      	b.n	8001102 <moistureSensor+0x9a>
	 		 	 } else {

	 		 		 //Combine the bytes
	 		 		 capac = ((uint16_t)buf[0] <<8) | buf[1];
 80010ea:	003b      	movs	r3, r7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	003b      	movs	r3, r7
 80010f4:	785b      	ldrb	r3, [r3, #1]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	230e      	movs	r3, #14
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	801a      	strh	r2, [r3, #0]

	 		 	 }
	 	 }


	 return capac;
 8001102:	230e      	movs	r3, #14
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	881b      	ldrh	r3, [r3, #0]
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b004      	add	sp, #16
 800110e:	bdb0      	pop	{r4, r5, r7, pc}
 8001110:	20000098 	.word	0x20000098
 8001114:	08005188 	.word	0x08005188
 8001118:	08005194 	.word	0x08005194

0800111c <LightOutput>:

void LightOutput(int decision){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	 //local variables


	 //Toggle Light On/Off

		if (decision == 1){
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d107      	bne.n	800113a <LightOutput+0x1e>
			HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_12); //Pin assigned to GPIO Output by IDE
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	015a      	lsls	r2, r3, #5
 800112e:	23a0      	movs	r3, #160	; 0xa0
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	0011      	movs	r1, r2
 8001134:	0018      	movs	r0, r3
 8001136:	f000 fc68 	bl	8001a0a <HAL_GPIO_TogglePin>
		}
		if (decision == 0){
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d104      	bne.n	800114a <LightOutput+0x2e>
			HAL_Delay (1800000);   /*Insert delay 30 minutes*/
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <LightOutput+0x38>)
 8001142:	0018      	movs	r0, r3
 8001144:	f000 f9fe 	bl	8001544 <HAL_Delay>
		}

		 return;
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46c0      	nop			; (mov r8, r8)
}
 800114c:	46bd      	mov	sp, r7
 800114e:	b002      	add	sp, #8
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	001b7740 	.word	0x001b7740

08001158 <WaterOutput>:

void WaterOutput(int decision){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

	 //local variables

	 //Toggle water on/off

		if (decision == 1){
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d120      	bne.n	80011a8 <WaterOutput+0x50>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);      //Turning the motor on (all 4 signal pins
 8001166:	23a0      	movs	r3, #160	; 0xa0
 8001168:	05db      	lsls	r3, r3, #23
 800116a:	2201      	movs	r2, #1
 800116c:	2108      	movs	r1, #8
 800116e:	0018      	movs	r0, r3
 8001170:	f000 fc2e 	bl	80019d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET); 	   //are turned on here)
 8001174:	23a0      	movs	r3, #160	; 0xa0
 8001176:	05db      	lsls	r3, r3, #23
 8001178:	2201      	movs	r2, #1
 800117a:	2110      	movs	r1, #16
 800117c:	0018      	movs	r0, r3
 800117e:	f000 fc27 	bl	80019d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8001182:	23a0      	movs	r3, #160	; 0xa0
 8001184:	05db      	lsls	r3, r3, #23
 8001186:	2201      	movs	r2, #1
 8001188:	2120      	movs	r1, #32
 800118a:	0018      	movs	r0, r3
 800118c:	f000 fc20 	bl	80019d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8001190:	23a0      	movs	r3, #160	; 0xa0
 8001192:	05db      	lsls	r3, r3, #23
 8001194:	2201      	movs	r2, #1
 8001196:	2140      	movs	r1, #64	; 0x40
 8001198:	0018      	movs	r0, r3
 800119a:	f000 fc19 	bl	80019d0 <HAL_GPIO_WritePin>

			HAL_Delay(2000);
 800119e:	23fa      	movs	r3, #250	; 0xfa
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 f9ce 	bl	8001544 <HAL_Delay>
		}
		if (decision == 0){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d11c      	bne.n	80011e8 <WaterOutput+0x90>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);   //Turning all 4 motor pins off
 80011ae:	23a0      	movs	r3, #160	; 0xa0
 80011b0:	05db      	lsls	r3, r3, #23
 80011b2:	2200      	movs	r2, #0
 80011b4:	2108      	movs	r1, #8
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 fc0a 	bl	80019d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);   //The motor will only be hooked up to two of them
 80011bc:	23a0      	movs	r3, #160	; 0xa0
 80011be:	05db      	lsls	r3, r3, #23
 80011c0:	2200      	movs	r2, #0
 80011c2:	2110      	movs	r1, #16
 80011c4:	0018      	movs	r0, r3
 80011c6:	f000 fc03 	bl	80019d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 80011ca:	23a0      	movs	r3, #160	; 0xa0
 80011cc:	05db      	lsls	r3, r3, #23
 80011ce:	2200      	movs	r2, #0
 80011d0:	2120      	movs	r1, #32
 80011d2:	0018      	movs	r0, r3
 80011d4:	f000 fbfc 	bl	80019d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80011d8:	23a0      	movs	r3, #160	; 0xa0
 80011da:	05db      	lsls	r3, r3, #23
 80011dc:	2200      	movs	r2, #0
 80011de:	2140      	movs	r1, #64	; 0x40
 80011e0:	0018      	movs	r0, r3
 80011e2:	f000 fbf5 	bl	80019d0 <HAL_GPIO_WritePin>

		}

	 return;
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46c0      	nop			; (mov r8, r8)
}
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <HAL_MspInit+0x24>)
 8001202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_MspInit+0x24>)
 8001206:	2101      	movs	r1, #1
 8001208:	430a      	orrs	r2, r1
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_MspInit+0x24>)
 800120e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_MspInit+0x24>)
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	0549      	lsls	r1, r1, #21
 8001216:	430a      	orrs	r2, r1
 8001218:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	240c      	movs	r4, #12
 800122e:	193b      	adds	r3, r7, r4
 8001230:	0018      	movs	r0, r3
 8001232:	2314      	movs	r3, #20
 8001234:	001a      	movs	r2, r3
 8001236:	2100      	movs	r1, #0
 8001238:	f003 fb64 	bl	8004904 <memset>
  if(hi2c->Instance==I2C1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <HAL_I2C_MspInit+0x80>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12a      	bne.n	800129c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_I2C_MspInit+0x84>)
 8001248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_I2C_MspInit+0x84>)
 800124c:	2101      	movs	r1, #1
 800124e:	430a      	orrs	r2, r1
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_I2C_MspInit+0x84>)
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	2201      	movs	r2, #1
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800125e:	193b      	adds	r3, r7, r4
 8001260:	22c0      	movs	r2, #192	; 0xc0
 8001262:	00d2      	lsls	r2, r2, #3
 8001264:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001266:	0021      	movs	r1, r4
 8001268:	187b      	adds	r3, r7, r1
 800126a:	2212      	movs	r2, #18
 800126c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126e:	187b      	adds	r3, r7, r1
 8001270:	2201      	movs	r2, #1
 8001272:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	187b      	adds	r3, r7, r1
 8001276:	2203      	movs	r2, #3
 8001278:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800127a:	187b      	adds	r3, r7, r1
 800127c:	2201      	movs	r2, #1
 800127e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	187a      	adds	r2, r7, r1
 8001282:	23a0      	movs	r3, #160	; 0xa0
 8001284:	05db      	lsls	r3, r3, #23
 8001286:	0011      	movs	r1, r2
 8001288:	0018      	movs	r0, r3
 800128a:	f000 fa33 	bl	80016f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_I2C_MspInit+0x84>)
 8001290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_I2C_MspInit+0x84>)
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	0389      	lsls	r1, r1, #14
 8001298:	430a      	orrs	r2, r1
 800129a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b009      	add	sp, #36	; 0x24
 80012a2:	bd90      	pop	{r4, r7, pc}
 80012a4:	40005400 	.word	0x40005400
 80012a8:	40021000 	.word	0x40021000

080012ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <HAL_RTC_MspInit+0x28>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d106      	bne.n	80012cc <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_RTC_MspInit+0x2c>)
 80012c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <HAL_RTC_MspInit+0x2c>)
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	02c9      	lsls	r1, r1, #11
 80012c8:	430a      	orrs	r2, r1
 80012ca:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40002800 	.word	0x40002800
 80012d8:	40021000 	.word	0x40021000

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	240c      	movs	r4, #12
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	0018      	movs	r0, r3
 80012ea:	2314      	movs	r3, #20
 80012ec:	001a      	movs	r2, r3
 80012ee:	2100      	movs	r1, #0
 80012f0:	f003 fb08 	bl	8004904 <memset>
  if(huart->Instance==USART2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a18      	ldr	r2, [pc, #96]	; (800135c <HAL_UART_MspInit+0x80>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d129      	bne.n	8001352 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_UART_MspInit+0x84>)
 8001300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_UART_MspInit+0x84>)
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	0289      	lsls	r1, r1, #10
 8001308:	430a      	orrs	r2, r1
 800130a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_UART_MspInit+0x84>)
 800130e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_UART_MspInit+0x84>)
 8001312:	2101      	movs	r1, #1
 8001314:	430a      	orrs	r2, r1
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_UART_MspInit+0x84>)
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	2201      	movs	r2, #1
 800131e:	4013      	ands	r3, r2
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001324:	0021      	movs	r1, r4
 8001326:	187b      	adds	r3, r7, r1
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_UART_MspInit+0x88>)
 800132a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	187b      	adds	r3, r7, r1
 800132e:	2202      	movs	r2, #2
 8001330:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2203      	movs	r2, #3
 800133c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2204      	movs	r2, #4
 8001342:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	187a      	adds	r2, r7, r1
 8001346:	23a0      	movs	r3, #160	; 0xa0
 8001348:	05db      	lsls	r3, r3, #23
 800134a:	0011      	movs	r1, r2
 800134c:	0018      	movs	r0, r3
 800134e:	f000 f9d1 	bl	80016f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b009      	add	sp, #36	; 0x24
 8001358:	bd90      	pop	{r4, r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	40004400 	.word	0x40004400
 8001360:	40021000 	.word	0x40021000
 8001364:	00008004 	.word	0x00008004

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800136c:	e7fe      	b.n	800136c <NMI_Handler+0x4>

0800136e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <HardFault_Handler+0x4>

08001374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 f8be 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	18d3      	adds	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f003 fa72 	bl	80048b0 <__errno>
 80013cc:	0003      	movs	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	2301      	movs	r3, #1
 80013d4:	425b      	negs	r3, r3
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	18d2      	adds	r2, r2, r3
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b006      	add	sp, #24
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20002000 	.word	0x20002000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	2000008c 	.word	0x2000008c
 8001400:	200001a0 	.word	0x200001a0

08001404 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001412:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <LoopForever+0x6>)
  ldr r1, =_edata
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001418:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <LoopForever+0xe>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <LoopForever+0x12>)
  ldr r4, =_ebss
 800142c:	4c0b      	ldr	r4, [pc, #44]	; (800145c <LoopForever+0x16>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800143a:	f7ff ffe3 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f003 fa3d 	bl	80048bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff fa83 	bl	800094c <main>

08001446 <LoopForever>:

LoopForever:
    b LoopForever
 8001446:	e7fe      	b.n	8001446 <LoopForever>
   ldr   r0, =_estack
 8001448:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001454:	08005290 	.word	0x08005290
  ldr r2, =_sbss
 8001458:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800145c:	200001a0 	.word	0x200001a0

08001460 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC1_COMP_IRQHandler>
	...

08001464 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_Init+0x3c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_Init+0x3c>)
 8001476:	2140      	movs	r1, #64	; 0x40
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147c:	2000      	movs	r0, #0
 800147e:	f000 f811 	bl	80014a4 <HAL_InitTick>
 8001482:	1e03      	subs	r3, r0, #0
 8001484:	d003      	beq.n	800148e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e001      	b.n	8001492 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800148e:	f7ff feb5 	bl	80011fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	781b      	ldrb	r3, [r3, #0]
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b002      	add	sp, #8
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_InitTick+0x5c>)
 80014ae:	681c      	ldr	r4, [r3, #0]
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_InitTick+0x60>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	0019      	movs	r1, r3
 80014b6:	23fa      	movs	r3, #250	; 0xfa
 80014b8:	0098      	lsls	r0, r3, #2
 80014ba:	f7fe fe2f 	bl	800011c <__udivsi3>
 80014be:	0003      	movs	r3, r0
 80014c0:	0019      	movs	r1, r3
 80014c2:	0020      	movs	r0, r4
 80014c4:	f7fe fe2a 	bl	800011c <__udivsi3>
 80014c8:	0003      	movs	r3, r0
 80014ca:	0018      	movs	r0, r3
 80014cc:	f000 f905 	bl	80016da <HAL_SYSTICK_Config>
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e00f      	b.n	80014f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d80b      	bhi.n	80014f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	2301      	movs	r3, #1
 80014e2:	425b      	negs	r3, r3
 80014e4:	2200      	movs	r2, #0
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 f8e2 	bl	80016b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_InitTick+0x64>)
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b003      	add	sp, #12
 80014fe:	bd90      	pop	{r4, r7, pc}
 8001500:	20000000 	.word	0x20000000
 8001504:	20000008 	.word	0x20000008
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_IncTick+0x1c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	001a      	movs	r2, r3
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_IncTick+0x20>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	18d2      	adds	r2, r2, r3
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_IncTick+0x20>)
 800151e:	601a      	str	r2, [r3, #0]
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	20000008 	.word	0x20000008
 800152c:	2000018c 	.word	0x2000018c

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b02      	ldr	r3, [pc, #8]	; (8001540 <HAL_GetTick+0x10>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	2000018c 	.word	0x2000018c

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff fff0 	bl	8001530 <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3301      	adds	r3, #1
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_Delay+0x44>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	001a      	movs	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	189b      	adds	r3, r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	f7ff ffe0 	bl	8001530 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8f7      	bhi.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b004      	add	sp, #16
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	20000008 	.word	0x20000008

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	0002      	movs	r2, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b7f      	cmp	r3, #127	; 0x7f
 80015a0:	d828      	bhi.n	80015f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a2:	4a2f      	ldr	r2, [pc, #188]	; (8001660 <__NVIC_SetPriority+0xd4>)
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	33c0      	adds	r3, #192	; 0xc0
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	589b      	ldr	r3, [r3, r2]
 80015b2:	1dfa      	adds	r2, r7, #7
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	0011      	movs	r1, r2
 80015b8:	2203      	movs	r2, #3
 80015ba:	400a      	ands	r2, r1
 80015bc:	00d2      	lsls	r2, r2, #3
 80015be:	21ff      	movs	r1, #255	; 0xff
 80015c0:	4091      	lsls	r1, r2
 80015c2:	000a      	movs	r2, r1
 80015c4:	43d2      	mvns	r2, r2
 80015c6:	401a      	ands	r2, r3
 80015c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	22ff      	movs	r2, #255	; 0xff
 80015d0:	401a      	ands	r2, r3
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	0018      	movs	r0, r3
 80015d8:	2303      	movs	r3, #3
 80015da:	4003      	ands	r3, r0
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e0:	481f      	ldr	r0, [pc, #124]	; (8001660 <__NVIC_SetPriority+0xd4>)
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	430a      	orrs	r2, r1
 80015ec:	33c0      	adds	r3, #192	; 0xc0
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015f2:	e031      	b.n	8001658 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <__NVIC_SetPriority+0xd8>)
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	0019      	movs	r1, r3
 80015fc:	230f      	movs	r3, #15
 80015fe:	400b      	ands	r3, r1
 8001600:	3b08      	subs	r3, #8
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3306      	adds	r3, #6
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	18d3      	adds	r3, r2, r3
 800160a:	3304      	adds	r3, #4
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	1dfa      	adds	r2, r7, #7
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	0011      	movs	r1, r2
 8001614:	2203      	movs	r2, #3
 8001616:	400a      	ands	r2, r1
 8001618:	00d2      	lsls	r2, r2, #3
 800161a:	21ff      	movs	r1, #255	; 0xff
 800161c:	4091      	lsls	r1, r2
 800161e:	000a      	movs	r2, r1
 8001620:	43d2      	mvns	r2, r2
 8001622:	401a      	ands	r2, r3
 8001624:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	22ff      	movs	r2, #255	; 0xff
 800162c:	401a      	ands	r2, r3
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	0018      	movs	r0, r3
 8001634:	2303      	movs	r3, #3
 8001636:	4003      	ands	r3, r0
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <__NVIC_SetPriority+0xd8>)
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	001c      	movs	r4, r3
 8001644:	230f      	movs	r3, #15
 8001646:	4023      	ands	r3, r4
 8001648:	3b08      	subs	r3, #8
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	430a      	orrs	r2, r1
 800164e:	3306      	adds	r3, #6
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	18c3      	adds	r3, r0, r3
 8001654:	3304      	adds	r3, #4
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b003      	add	sp, #12
 800165e:	bd90      	pop	{r4, r7, pc}
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	1e5a      	subs	r2, r3, #1
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	045b      	lsls	r3, r3, #17
 8001678:	429a      	cmp	r2, r3
 800167a:	d301      	bcc.n	8001680 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167c:	2301      	movs	r3, #1
 800167e:	e010      	b.n	80016a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <SysTick_Config+0x44>)
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	3a01      	subs	r2, #1
 8001686:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001688:	2301      	movs	r3, #1
 800168a:	425b      	negs	r3, r3
 800168c:	2103      	movs	r1, #3
 800168e:	0018      	movs	r0, r3
 8001690:	f7ff ff7c 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x44>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x44>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b002      	add	sp, #8
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	210f      	movs	r1, #15
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	1c02      	adds	r2, r0, #0
 80016c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	0011      	movs	r1, r2
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff ffbf 	bl	8001668 <SysTick_Config>
 80016ea:	0003      	movs	r3, r0
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800170a:	e149      	b.n	80019a0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2101      	movs	r1, #1
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4091      	lsls	r1, r2
 8001716:	000a      	movs	r2, r1
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d100      	bne.n	8001724 <HAL_GPIO_Init+0x30>
 8001722:	e13a      	b.n	800199a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d00b      	beq.n	8001744 <HAL_GPIO_Init+0x50>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d007      	beq.n	8001744 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001738:	2b11      	cmp	r3, #17
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b12      	cmp	r3, #18
 8001742:	d130      	bne.n	80017a6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	409a      	lsls	r2, r3
 8001752:	0013      	movs	r3, r2
 8001754:	43da      	mvns	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	0013      	movs	r3, r2
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800177a:	2201      	movs	r2, #1
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	43da      	mvns	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	2201      	movs	r2, #1
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	409a      	lsls	r2, r3
 80017b4:	0013      	movs	r3, r2
 80017b6:	43da      	mvns	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0xf2>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b12      	cmp	r3, #18
 80017e4:	d123      	bne.n	800182e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	08da      	lsrs	r2, r3, #3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3208      	adds	r2, #8
 80017ee:	0092      	lsls	r2, r2, #2
 80017f0:	58d3      	ldr	r3, [r2, r3]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2207      	movs	r2, #7
 80017f8:	4013      	ands	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	220f      	movs	r2, #15
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	43da      	mvns	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2107      	movs	r1, #7
 8001812:	400b      	ands	r3, r1
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	409a      	lsls	r2, r3
 8001818:	0013      	movs	r3, r2
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	0092      	lsls	r2, r2, #2
 800182a:	6939      	ldr	r1, [r7, #16]
 800182c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	409a      	lsls	r2, r3
 800183c:	0013      	movs	r3, r2
 800183e:	43da      	mvns	r2, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2203      	movs	r2, #3
 800184c:	401a      	ands	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	409a      	lsls	r2, r3
 8001854:	0013      	movs	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	055b      	lsls	r3, r3, #21
 800186a:	4013      	ands	r3, r2
 800186c:	d100      	bne.n	8001870 <HAL_GPIO_Init+0x17c>
 800186e:	e094      	b.n	800199a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001870:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <HAL_GPIO_Init+0x2c4>)
 8001872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001874:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <HAL_GPIO_Init+0x2c4>)
 8001876:	2101      	movs	r1, #1
 8001878:	430a      	orrs	r2, r1
 800187a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800187c:	4a4f      	ldr	r2, [pc, #316]	; (80019bc <HAL_GPIO_Init+0x2c8>)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	589b      	ldr	r3, [r3, r2]
 8001888:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2203      	movs	r2, #3
 800188e:	4013      	ands	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	409a      	lsls	r2, r3
 8001896:	0013      	movs	r3, r2
 8001898:	43da      	mvns	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	23a0      	movs	r3, #160	; 0xa0
 80018a4:	05db      	lsls	r3, r3, #23
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x1de>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a44      	ldr	r2, [pc, #272]	; (80019c0 <HAL_GPIO_Init+0x2cc>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x1da>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <HAL_GPIO_Init+0x2d0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x1d6>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a42      	ldr	r2, [pc, #264]	; (80019c8 <HAL_GPIO_Init+0x2d4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x1d2>
 80018c2:	2305      	movs	r3, #5
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x1e0>
 80018c6:	2306      	movs	r3, #6
 80018c8:	e004      	b.n	80018d4 <HAL_GPIO_Init+0x1e0>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e002      	b.n	80018d4 <HAL_GPIO_Init+0x1e0>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x1e0>
 80018d2:	2300      	movs	r3, #0
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	2103      	movs	r1, #3
 80018d8:	400a      	ands	r2, r1
 80018da:	0092      	lsls	r2, r2, #2
 80018dc:	4093      	lsls	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e4:	4935      	ldr	r1, [pc, #212]	; (80019bc <HAL_GPIO_Init+0x2c8>)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3302      	adds	r3, #2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f2:	4b36      	ldr	r3, [pc, #216]	; (80019cc <HAL_GPIO_Init+0x2d8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43da      	mvns	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	4013      	ands	r3, r2
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_GPIO_Init+0x2d8>)
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800191c:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <HAL_GPIO_Init+0x2d8>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43da      	mvns	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	029b      	lsls	r3, r3, #10
 8001934:	4013      	ands	r3, r2
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_GPIO_Init+0x2d8>)
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <HAL_GPIO_Init+0x2d8>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43da      	mvns	r2, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	035b      	lsls	r3, r3, #13
 800195e:	4013      	ands	r3, r2
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_GPIO_Init+0x2d8>)
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <HAL_GPIO_Init+0x2d8>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	43da      	mvns	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	039b      	lsls	r3, r3, #14
 8001988:	4013      	ands	r3, r2
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_GPIO_Init+0x2d8>)
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	40da      	lsrs	r2, r3
 80019a8:	1e13      	subs	r3, r2, #0
 80019aa:	d000      	beq.n	80019ae <HAL_GPIO_Init+0x2ba>
 80019ac:	e6ae      	b.n	800170c <HAL_GPIO_Init+0x18>
  }
}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b006      	add	sp, #24
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010000 	.word	0x40010000
 80019c0:	50000400 	.word	0x50000400
 80019c4:	50000800 	.word	0x50000800
 80019c8:	50001c00 	.word	0x50001c00
 80019cc:	40010400 	.word	0x40010400

080019d0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	0008      	movs	r0, r1
 80019da:	0011      	movs	r1, r2
 80019dc:	1cbb      	adds	r3, r7, #2
 80019de:	1c02      	adds	r2, r0, #0
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	1c7b      	adds	r3, r7, #1
 80019e4:	1c0a      	adds	r2, r1, #0
 80019e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e8:	1c7b      	adds	r3, r7, #1
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f0:	1cbb      	adds	r3, r7, #2
 80019f2:	881a      	ldrh	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80019f8:	e003      	b.n	8001a02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80019fa:	1cbb      	adds	r3, r7, #2
 80019fc:	881a      	ldrh	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b002      	add	sp, #8
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	000a      	movs	r2, r1
 8001a14:	1cbb      	adds	r3, r7, #2
 8001a16:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a1e:	1cbb      	adds	r3, r7, #2
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	041a      	lsls	r2, r3, #16
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	1cb9      	adds	r1, r7, #2
 8001a2e:	8809      	ldrh	r1, [r1, #0]
 8001a30:	400b      	ands	r3, r1
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	619a      	str	r2, [r3, #24]
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b004      	add	sp, #16
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e082      	b.n	8001b58 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2241      	movs	r2, #65	; 0x41
 8001a56:	5c9b      	ldrb	r3, [r3, r2]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d107      	bne.n	8001a6e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2240      	movs	r2, #64	; 0x40
 8001a62:	2100      	movs	r1, #0
 8001a64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff fbdb 	bl	8001224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2241      	movs	r2, #65	; 0x41
 8001a72:	2124      	movs	r1, #36	; 0x24
 8001a74:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2101      	movs	r1, #1
 8001a82:	438a      	bics	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4934      	ldr	r1, [pc, #208]	; (8001b60 <HAL_I2C_Init+0x120>)
 8001a90:	400a      	ands	r2, r1
 8001a92:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4931      	ldr	r1, [pc, #196]	; (8001b64 <HAL_I2C_Init+0x124>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d108      	bne.n	8001abe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	0209      	lsls	r1, r1, #8
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	e007      	b.n	8001ace <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2184      	movs	r1, #132	; 0x84
 8001ac8:	0209      	lsls	r1, r1, #8
 8001aca:	430a      	orrs	r2, r1
 8001acc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d104      	bne.n	8001ae0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	491f      	ldr	r1, [pc, #124]	; (8001b68 <HAL_I2C_Init+0x128>)
 8001aec:	430a      	orrs	r2, r1
 8001aee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	491a      	ldr	r1, [pc, #104]	; (8001b64 <HAL_I2C_Init+0x124>)
 8001afc:	400a      	ands	r2, r1
 8001afe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	021a      	lsls	r2, r3, #8
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69d9      	ldr	r1, [r3, #28]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1a      	ldr	r2, [r3, #32]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2241      	movs	r2, #65	; 0x41
 8001b44:	2120      	movs	r1, #32
 8001b46:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2242      	movs	r2, #66	; 0x42
 8001b52:	2100      	movs	r1, #0
 8001b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	f0ffffff 	.word	0xf0ffffff
 8001b64:	ffff7fff 	.word	0xffff7fff
 8001b68:	02008000 	.word	0x02008000

08001b6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	0008      	movs	r0, r1
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	0019      	movs	r1, r3
 8001b7a:	230a      	movs	r3, #10
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	1c02      	adds	r2, r0, #0
 8001b80:	801a      	strh	r2, [r3, #0]
 8001b82:	2308      	movs	r3, #8
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	1c0a      	adds	r2, r1, #0
 8001b88:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2241      	movs	r2, #65	; 0x41
 8001b8e:	5c9b      	ldrb	r3, [r3, r2]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d000      	beq.n	8001b98 <HAL_I2C_Master_Transmit+0x2c>
 8001b96:	e0e7      	b.n	8001d68 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2240      	movs	r2, #64	; 0x40
 8001b9c:	5c9b      	ldrb	r3, [r3, r2]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_I2C_Master_Transmit+0x3a>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e0e1      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1fe>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2240      	movs	r2, #64	; 0x40
 8001baa:	2101      	movs	r1, #1
 8001bac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bae:	f7ff fcbf 	bl	8001530 <HAL_GetTick>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	0219      	lsls	r1, r3, #8
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	2319      	movs	r3, #25
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f000 fd2c 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 8001bc8:	1e03      	subs	r3, r0, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0cc      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2241      	movs	r2, #65	; 0x41
 8001bd4:	2121      	movs	r1, #33	; 0x21
 8001bd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2242      	movs	r2, #66	; 0x42
 8001bdc:	2110      	movs	r1, #16
 8001bde:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2208      	movs	r2, #8
 8001bf0:	18ba      	adds	r2, r7, r2
 8001bf2:	8812      	ldrh	r2, [r2, #0]
 8001bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2bff      	cmp	r3, #255	; 0xff
 8001c04:	d911      	bls.n	8001c2a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	22ff      	movs	r2, #255	; 0xff
 8001c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	045c      	lsls	r4, r3, #17
 8001c16:	230a      	movs	r3, #10
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	8819      	ldrh	r1, [r3, #0]
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	4b55      	ldr	r3, [pc, #340]	; (8001d74 <HAL_I2C_Master_Transmit+0x208>)
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	0023      	movs	r3, r4
 8001c24:	f000 fe88 	bl	8002938 <I2C_TransferConfig>
 8001c28:	e075      	b.n	8001d16 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	049c      	lsls	r4, r3, #18
 8001c3e:	230a      	movs	r3, #10
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	8819      	ldrh	r1, [r3, #0]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	4b4b      	ldr	r3, [pc, #300]	; (8001d74 <HAL_I2C_Master_Transmit+0x208>)
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	0023      	movs	r3, r4
 8001c4c:	f000 fe74 	bl	8002938 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001c50:	e061      	b.n	8001d16 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f000 fd20 	bl	800269e <I2C_WaitOnTXISFlagUntilTimeout>
 8001c5e:	1e03      	subs	r3, r0, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e081      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d03a      	beq.n	8001d16 <HAL_I2C_Master_Transmit+0x1aa>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d136      	bne.n	8001d16 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2180      	movs	r1, #128	; 0x80
 8001cb6:	f000 fcb3 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 8001cba:	1e03      	subs	r3, r0, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e053      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	2bff      	cmp	r3, #255	; 0xff
 8001cca:	d911      	bls.n	8001cf0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	22ff      	movs	r2, #255	; 0xff
 8001cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	045c      	lsls	r4, r3, #17
 8001cdc:	230a      	movs	r3, #10
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	8819      	ldrh	r1, [r3, #0]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	0023      	movs	r3, r4
 8001cea:	f000 fe25 	bl	8002938 <I2C_TransferConfig>
 8001cee:	e012      	b.n	8001d16 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	049c      	lsls	r4, r3, #18
 8001d04:	230a      	movs	r3, #10
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	8819      	ldrh	r1, [r3, #0]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	0023      	movs	r3, r4
 8001d12:	f000 fe11 	bl	8002938 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d198      	bne.n	8001c52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	0018      	movs	r0, r3
 8001d28:	f000 fcf8 	bl	800271c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d2c:	1e03      	subs	r3, r0, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e01a      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	490c      	ldr	r1, [pc, #48]	; (8001d78 <HAL_I2C_Master_Transmit+0x20c>)
 8001d48:	400a      	ands	r2, r1
 8001d4a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2241      	movs	r2, #65	; 0x41
 8001d50:	2120      	movs	r1, #32
 8001d52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2242      	movs	r2, #66	; 0x42
 8001d58:	2100      	movs	r1, #0
 8001d5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2240      	movs	r2, #64	; 0x40
 8001d60:	2100      	movs	r1, #0
 8001d62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e000      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
  }
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b007      	add	sp, #28
 8001d70:	bd90      	pop	{r4, r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	80002000 	.word	0x80002000
 8001d78:	fe00e800 	.word	0xfe00e800

08001d7c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	0008      	movs	r0, r1
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	0019      	movs	r1, r3
 8001d8a:	230a      	movs	r3, #10
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	1c02      	adds	r2, r0, #0
 8001d90:	801a      	strh	r2, [r3, #0]
 8001d92:	2308      	movs	r3, #8
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	1c0a      	adds	r2, r1, #0
 8001d98:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2241      	movs	r2, #65	; 0x41
 8001d9e:	5c9b      	ldrb	r3, [r3, r2]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d000      	beq.n	8001da8 <HAL_I2C_Master_Receive+0x2c>
 8001da6:	e0e8      	b.n	8001f7a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2240      	movs	r2, #64	; 0x40
 8001dac:	5c9b      	ldrb	r3, [r3, r2]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_I2C_Master_Receive+0x3a>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e0e2      	b.n	8001f7c <HAL_I2C_Master_Receive+0x200>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2240      	movs	r2, #64	; 0x40
 8001dba:	2101      	movs	r1, #1
 8001dbc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dbe:	f7ff fbb7 	bl	8001530 <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	0219      	lsls	r1, r3, #8
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	2319      	movs	r3, #25
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f000 fc24 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 8001dd8:	1e03      	subs	r3, r0, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0cd      	b.n	8001f7c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2241      	movs	r2, #65	; 0x41
 8001de4:	2122      	movs	r1, #34	; 0x22
 8001de6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2242      	movs	r2, #66	; 0x42
 8001dec:	2110      	movs	r1, #16
 8001dee:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2208      	movs	r2, #8
 8001e00:	18ba      	adds	r2, r7, r2
 8001e02:	8812      	ldrh	r2, [r2, #0]
 8001e04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2bff      	cmp	r3, #255	; 0xff
 8001e14:	d911      	bls.n	8001e3a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	22ff      	movs	r2, #255	; 0xff
 8001e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	045c      	lsls	r4, r3, #17
 8001e26:	230a      	movs	r3, #10
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	8819      	ldrh	r1, [r3, #0]
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	4b55      	ldr	r3, [pc, #340]	; (8001f84 <HAL_I2C_Master_Receive+0x208>)
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	0023      	movs	r3, r4
 8001e34:	f000 fd80 	bl	8002938 <I2C_TransferConfig>
 8001e38:	e076      	b.n	8001f28 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	049c      	lsls	r4, r3, #18
 8001e4e:	230a      	movs	r3, #10
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	8819      	ldrh	r1, [r3, #0]
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	4b4b      	ldr	r3, [pc, #300]	; (8001f84 <HAL_I2C_Master_Receive+0x208>)
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	0023      	movs	r3, r4
 8001e5c:	f000 fd6c 	bl	8002938 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001e60:	e062      	b.n	8001f28 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f000 fc93 	bl	8002794 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e6e:	1e03      	subs	r3, r0, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e082      	b.n	8001f7c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d03a      	beq.n	8001f28 <HAL_I2C_Master_Receive+0x1ac>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d136      	bne.n	8001f28 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	0013      	movs	r3, r2
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	f000 fbaa 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	1e03      	subs	r3, r0, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e053      	b.n	8001f7c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2bff      	cmp	r3, #255	; 0xff
 8001edc:	d911      	bls.n	8001f02 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	22ff      	movs	r2, #255	; 0xff
 8001ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	045c      	lsls	r4, r3, #17
 8001eee:	230a      	movs	r3, #10
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	8819      	ldrh	r1, [r3, #0]
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	0023      	movs	r3, r4
 8001efc:	f000 fd1c 	bl	8002938 <I2C_TransferConfig>
 8001f00:	e012      	b.n	8001f28 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	049c      	lsls	r4, r3, #18
 8001f16:	230a      	movs	r3, #10
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	8819      	ldrh	r1, [r3, #0]
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	0023      	movs	r3, r4
 8001f24:	f000 fd08 	bl	8002938 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d197      	bne.n	8001e62 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f000 fbef 	bl	800271c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f3e:	1e03      	subs	r3, r0, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e01a      	b.n	8001f7c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	490b      	ldr	r1, [pc, #44]	; (8001f88 <HAL_I2C_Master_Receive+0x20c>)
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2241      	movs	r2, #65	; 0x41
 8001f62:	2120      	movs	r1, #32
 8001f64:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2242      	movs	r2, #66	; 0x42
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2240      	movs	r2, #64	; 0x40
 8001f72:	2100      	movs	r1, #0
 8001f74:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
  }
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b007      	add	sp, #28
 8001f82:	bd90      	pop	{r4, r7, pc}
 8001f84:	80002400 	.word	0x80002400
 8001f88:	fe00e800 	.word	0xfe00e800

08001f8c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	000c      	movs	r4, r1
 8001f96:	0010      	movs	r0, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	230a      	movs	r3, #10
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	1c22      	adds	r2, r4, #0
 8001fa0:	801a      	strh	r2, [r3, #0]
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	1c02      	adds	r2, r0, #0
 8001fa8:	801a      	strh	r2, [r3, #0]
 8001faa:	1dbb      	adds	r3, r7, #6
 8001fac:	1c0a      	adds	r2, r1, #0
 8001fae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2241      	movs	r2, #65	; 0x41
 8001fb4:	5c9b      	ldrb	r3, [r3, r2]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d000      	beq.n	8001fbe <HAL_I2C_Mem_Write+0x32>
 8001fbc:	e10c      	b.n	80021d8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <HAL_I2C_Mem_Write+0x42>
 8001fc4:	232c      	movs	r3, #44	; 0x2c
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	0092      	lsls	r2, r2, #2
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0ff      	b.n	80021da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	5c9b      	ldrb	r3, [r3, r2]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_I2C_Mem_Write+0x5c>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e0f8      	b.n	80021da <HAL_I2C_Mem_Write+0x24e>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2240      	movs	r2, #64	; 0x40
 8001fec:	2101      	movs	r1, #1
 8001fee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ff0:	f7ff fa9e 	bl	8001530 <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	0219      	lsls	r1, r3, #8
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2319      	movs	r3, #25
 8002004:	2201      	movs	r2, #1
 8002006:	f000 fb0b 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 800200a:	1e03      	subs	r3, r0, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0e3      	b.n	80021da <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2241      	movs	r2, #65	; 0x41
 8002016:	2121      	movs	r1, #33	; 0x21
 8002018:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2242      	movs	r2, #66	; 0x42
 800201e:	2140      	movs	r1, #64	; 0x40
 8002020:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	222c      	movs	r2, #44	; 0x2c
 8002032:	18ba      	adds	r2, r7, r2
 8002034:	8812      	ldrh	r2, [r2, #0]
 8002036:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800203e:	1dbb      	adds	r3, r7, #6
 8002040:	881c      	ldrh	r4, [r3, #0]
 8002042:	2308      	movs	r3, #8
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	881a      	ldrh	r2, [r3, #0]
 8002048:	230a      	movs	r3, #10
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	8819      	ldrh	r1, [r3, #0]
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	0023      	movs	r3, r4
 800205a:	f000 f9f9 	bl	8002450 <I2C_RequestMemoryWrite>
 800205e:	1e03      	subs	r3, r0, #0
 8002060:	d005      	beq.n	800206e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2240      	movs	r2, #64	; 0x40
 8002066:	2100      	movs	r1, #0
 8002068:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0b5      	b.n	80021da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	2bff      	cmp	r3, #255	; 0xff
 8002076:	d911      	bls.n	800209c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	22ff      	movs	r2, #255	; 0xff
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	b2da      	uxtb	r2, r3
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	045c      	lsls	r4, r3, #17
 8002088:	230a      	movs	r3, #10
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	8819      	ldrh	r1, [r3, #0]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	2300      	movs	r3, #0
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	0023      	movs	r3, r4
 8002096:	f000 fc4f 	bl	8002938 <I2C_TransferConfig>
 800209a:	e012      	b.n	80020c2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	049c      	lsls	r4, r3, #18
 80020b0:	230a      	movs	r3, #10
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	8819      	ldrh	r1, [r3, #0]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	2300      	movs	r3, #0
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	0023      	movs	r3, r4
 80020be:	f000 fc3b 	bl	8002938 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 fae8 	bl	800269e <I2C_WaitOnTXISFlagUntilTimeout>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e081      	b.n	80021da <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d03a      	beq.n	8002186 <HAL_I2C_Mem_Write+0x1fa>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	d136      	bne.n	8002186 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	0013      	movs	r3, r2
 8002122:	2200      	movs	r2, #0
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	f000 fa7b 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 800212a:	1e03      	subs	r3, r0, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e053      	b.n	80021da <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	2bff      	cmp	r3, #255	; 0xff
 800213a:	d911      	bls.n	8002160 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	22ff      	movs	r2, #255	; 0xff
 8002140:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002146:	b2da      	uxtb	r2, r3
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	045c      	lsls	r4, r3, #17
 800214c:	230a      	movs	r3, #10
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	8819      	ldrh	r1, [r3, #0]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	2300      	movs	r3, #0
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	0023      	movs	r3, r4
 800215a:	f000 fbed 	bl	8002938 <I2C_TransferConfig>
 800215e:	e012      	b.n	8002186 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	b2da      	uxtb	r2, r3
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	049c      	lsls	r4, r3, #18
 8002174:	230a      	movs	r3, #10
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	8819      	ldrh	r1, [r3, #0]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	2300      	movs	r3, #0
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	0023      	movs	r3, r4
 8002182:	f000 fbd9 	bl	8002938 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d198      	bne.n	80020c2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	0018      	movs	r0, r3
 8002198:	f000 fac0 	bl	800271c <I2C_WaitOnSTOPFlagUntilTimeout>
 800219c:	1e03      	subs	r3, r0, #0
 800219e:	d001      	beq.n	80021a4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e01a      	b.n	80021da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2220      	movs	r2, #32
 80021aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	490b      	ldr	r1, [pc, #44]	; (80021e4 <HAL_I2C_Mem_Write+0x258>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2241      	movs	r2, #65	; 0x41
 80021c0:	2120      	movs	r1, #32
 80021c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2242      	movs	r2, #66	; 0x42
 80021c8:	2100      	movs	r1, #0
 80021ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2240      	movs	r2, #64	; 0x40
 80021d0:	2100      	movs	r1, #0
 80021d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e000      	b.n	80021da <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80021d8:	2302      	movs	r3, #2
  }
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b007      	add	sp, #28
 80021e0:	bd90      	pop	{r4, r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	fe00e800 	.word	0xfe00e800

080021e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	000c      	movs	r4, r1
 80021f2:	0010      	movs	r0, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	230a      	movs	r3, #10
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	1c22      	adds	r2, r4, #0
 80021fc:	801a      	strh	r2, [r3, #0]
 80021fe:	2308      	movs	r3, #8
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	1c02      	adds	r2, r0, #0
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	1dbb      	adds	r3, r7, #6
 8002208:	1c0a      	adds	r2, r1, #0
 800220a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2241      	movs	r2, #65	; 0x41
 8002210:	5c9b      	ldrb	r3, [r3, r2]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b20      	cmp	r3, #32
 8002216:	d000      	beq.n	800221a <HAL_I2C_Mem_Read+0x32>
 8002218:	e110      	b.n	800243c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HAL_I2C_Mem_Read+0x42>
 8002220:	232c      	movs	r3, #44	; 0x2c
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2280      	movs	r2, #128	; 0x80
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e103      	b.n	800243e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2240      	movs	r2, #64	; 0x40
 800223a:	5c9b      	ldrb	r3, [r3, r2]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_I2C_Mem_Read+0x5c>
 8002240:	2302      	movs	r3, #2
 8002242:	e0fc      	b.n	800243e <HAL_I2C_Mem_Read+0x256>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	2101      	movs	r1, #1
 800224a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800224c:	f7ff f970 	bl	8001530 <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	0219      	lsls	r1, r3, #8
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	2319      	movs	r3, #25
 8002260:	2201      	movs	r2, #1
 8002262:	f000 f9dd 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 8002266:	1e03      	subs	r3, r0, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0e7      	b.n	800243e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2241      	movs	r2, #65	; 0x41
 8002272:	2122      	movs	r1, #34	; 0x22
 8002274:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2242      	movs	r2, #66	; 0x42
 800227a:	2140      	movs	r1, #64	; 0x40
 800227c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	222c      	movs	r2, #44	; 0x2c
 800228e:	18ba      	adds	r2, r7, r2
 8002290:	8812      	ldrh	r2, [r2, #0]
 8002292:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800229a:	1dbb      	adds	r3, r7, #6
 800229c:	881c      	ldrh	r4, [r3, #0]
 800229e:	2308      	movs	r3, #8
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	881a      	ldrh	r2, [r3, #0]
 80022a4:	230a      	movs	r3, #10
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	8819      	ldrh	r1, [r3, #0]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	0023      	movs	r3, r4
 80022b6:	f000 f92f 	bl	8002518 <I2C_RequestMemoryRead>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d005      	beq.n	80022ca <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2240      	movs	r2, #64	; 0x40
 80022c2:	2100      	movs	r1, #0
 80022c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0b9      	b.n	800243e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2bff      	cmp	r3, #255	; 0xff
 80022d2:	d911      	bls.n	80022f8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	22ff      	movs	r2, #255	; 0xff
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	045c      	lsls	r4, r3, #17
 80022e4:	230a      	movs	r3, #10
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	8819      	ldrh	r1, [r3, #0]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	4b56      	ldr	r3, [pc, #344]	; (8002448 <HAL_I2C_Mem_Read+0x260>)
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	0023      	movs	r3, r4
 80022f2:	f000 fb21 	bl	8002938 <I2C_TransferConfig>
 80022f6:	e012      	b.n	800231e <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	b2da      	uxtb	r2, r3
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	049c      	lsls	r4, r3, #18
 800230c:	230a      	movs	r3, #10
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	8819      	ldrh	r1, [r3, #0]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	4b4c      	ldr	r3, [pc, #304]	; (8002448 <HAL_I2C_Mem_Read+0x260>)
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	0023      	movs	r3, r4
 800231a:	f000 fb0d 	bl	8002938 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800231e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	0013      	movs	r3, r2
 8002328:	2200      	movs	r2, #0
 800232a:	2104      	movs	r1, #4
 800232c:	f000 f978 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 8002330:	1e03      	subs	r3, r0, #0
 8002332:	d001      	beq.n	8002338 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e082      	b.n	800243e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d03a      	beq.n	80023ea <HAL_I2C_Mem_Read+0x202>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	d136      	bne.n	80023ea <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800237c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	0013      	movs	r3, r2
 8002386:	2200      	movs	r2, #0
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	f000 f949 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 800238e:	1e03      	subs	r3, r0, #0
 8002390:	d001      	beq.n	8002396 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e053      	b.n	800243e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	2bff      	cmp	r3, #255	; 0xff
 800239e:	d911      	bls.n	80023c4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	22ff      	movs	r2, #255	; 0xff
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	045c      	lsls	r4, r3, #17
 80023b0:	230a      	movs	r3, #10
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	8819      	ldrh	r1, [r3, #0]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	2300      	movs	r3, #0
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	0023      	movs	r3, r4
 80023be:	f000 fabb 	bl	8002938 <I2C_TransferConfig>
 80023c2:	e012      	b.n	80023ea <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	049c      	lsls	r4, r3, #18
 80023d8:	230a      	movs	r3, #10
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	8819      	ldrh	r1, [r3, #0]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	2300      	movs	r3, #0
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	0023      	movs	r3, r4
 80023e6:	f000 faa7 	bl	8002938 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d194      	bne.n	800231e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 f98e 	bl	800271c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002400:	1e03      	subs	r3, r0, #0
 8002402:	d001      	beq.n	8002408 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e01a      	b.n	800243e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2220      	movs	r2, #32
 800240e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	490c      	ldr	r1, [pc, #48]	; (800244c <HAL_I2C_Mem_Read+0x264>)
 800241c:	400a      	ands	r2, r1
 800241e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2241      	movs	r2, #65	; 0x41
 8002424:	2120      	movs	r1, #32
 8002426:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2242      	movs	r2, #66	; 0x42
 800242c:	2100      	movs	r1, #0
 800242e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2240      	movs	r2, #64	; 0x40
 8002434:	2100      	movs	r1, #0
 8002436:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	e000      	b.n	800243e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800243c:	2302      	movs	r3, #2
  }
}
 800243e:	0018      	movs	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	b007      	add	sp, #28
 8002444:	bd90      	pop	{r4, r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	80002400 	.word	0x80002400
 800244c:	fe00e800 	.word	0xfe00e800

08002450 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002450:	b5b0      	push	{r4, r5, r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af02      	add	r7, sp, #8
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	000c      	movs	r4, r1
 800245a:	0010      	movs	r0, r2
 800245c:	0019      	movs	r1, r3
 800245e:	250a      	movs	r5, #10
 8002460:	197b      	adds	r3, r7, r5
 8002462:	1c22      	adds	r2, r4, #0
 8002464:	801a      	strh	r2, [r3, #0]
 8002466:	2308      	movs	r3, #8
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	1c02      	adds	r2, r0, #0
 800246c:	801a      	strh	r2, [r3, #0]
 800246e:	1dbb      	adds	r3, r7, #6
 8002470:	1c0a      	adds	r2, r1, #0
 8002472:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002474:	1dbb      	adds	r3, r7, #6
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	045c      	lsls	r4, r3, #17
 800247e:	197b      	adds	r3, r7, r5
 8002480:	8819      	ldrh	r1, [r3, #0]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	4b23      	ldr	r3, [pc, #140]	; (8002514 <I2C_RequestMemoryWrite+0xc4>)
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	0023      	movs	r3, r4
 800248a:	f000 fa55 	bl	8002938 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800248e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002490:	6a39      	ldr	r1, [r7, #32]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	0018      	movs	r0, r3
 8002496:	f000 f902 	bl	800269e <I2C_WaitOnTXISFlagUntilTimeout>
 800249a:	1e03      	subs	r3, r0, #0
 800249c:	d001      	beq.n	80024a2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e033      	b.n	800250a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024a2:	1dbb      	adds	r3, r7, #6
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d107      	bne.n	80024ba <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024aa:	2308      	movs	r3, #8
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
 80024b8:	e019      	b.n	80024ee <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024ba:	2308      	movs	r3, #8
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ce:	6a39      	ldr	r1, [r7, #32]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 f8e3 	bl	800269e <I2C_WaitOnTXISFlagUntilTimeout>
 80024d8:	1e03      	subs	r3, r0, #0
 80024da:	d001      	beq.n	80024e0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e014      	b.n	800250a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024e0:	2308      	movs	r3, #8
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024ee:	6a3a      	ldr	r2, [r7, #32]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	0013      	movs	r3, r2
 80024f8:	2200      	movs	r2, #0
 80024fa:	2180      	movs	r1, #128	; 0x80
 80024fc:	f000 f890 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 8002500:	1e03      	subs	r3, r0, #0
 8002502:	d001      	beq.n	8002508 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	0018      	movs	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	b004      	add	sp, #16
 8002510:	bdb0      	pop	{r4, r5, r7, pc}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	80002000 	.word	0x80002000

08002518 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	000c      	movs	r4, r1
 8002522:	0010      	movs	r0, r2
 8002524:	0019      	movs	r1, r3
 8002526:	250a      	movs	r5, #10
 8002528:	197b      	adds	r3, r7, r5
 800252a:	1c22      	adds	r2, r4, #0
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	2308      	movs	r3, #8
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	1c02      	adds	r2, r0, #0
 8002534:	801a      	strh	r2, [r3, #0]
 8002536:	1dbb      	adds	r3, r7, #6
 8002538:	1c0a      	adds	r2, r1, #0
 800253a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800253c:	1dbb      	adds	r3, r7, #6
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	197b      	adds	r3, r7, r5
 8002544:	8819      	ldrh	r1, [r3, #0]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <I2C_RequestMemoryRead+0xc0>)
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2300      	movs	r3, #0
 800254e:	f000 f9f3 	bl	8002938 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002554:	6a39      	ldr	r1, [r7, #32]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f8a0 	bl	800269e <I2C_WaitOnTXISFlagUntilTimeout>
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d001      	beq.n	8002566 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e033      	b.n	80025ce <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002566:	1dbb      	adds	r3, r7, #6
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d107      	bne.n	800257e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800256e:	2308      	movs	r3, #8
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
 800257c:	e019      	b.n	80025b2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800257e:	2308      	movs	r3, #8
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	b29b      	uxth	r3, r3
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002592:	6a39      	ldr	r1, [r7, #32]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	0018      	movs	r0, r3
 8002598:	f000 f881 	bl	800269e <I2C_WaitOnTXISFlagUntilTimeout>
 800259c:	1e03      	subs	r3, r0, #0
 800259e:	d001      	beq.n	80025a4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e014      	b.n	80025ce <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025a4:	2308      	movs	r3, #8
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80025b2:	6a3a      	ldr	r2, [r7, #32]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	0013      	movs	r3, r2
 80025bc:	2200      	movs	r2, #0
 80025be:	2140      	movs	r1, #64	; 0x40
 80025c0:	f000 f82e 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 80025c4:	1e03      	subs	r3, r0, #0
 80025c6:	d001      	beq.n	80025cc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	0018      	movs	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b004      	add	sp, #16
 80025d4:	bdb0      	pop	{r4, r5, r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	80002000 	.word	0x80002000

080025dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2202      	movs	r2, #2
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d103      	bne.n	80025fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2201      	movs	r2, #1
 8002602:	4013      	ands	r3, r2
 8002604:	2b01      	cmp	r3, #1
 8002606:	d007      	beq.n	8002618 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2101      	movs	r1, #1
 8002614:	430a      	orrs	r2, r1
 8002616:	619a      	str	r2, [r3, #24]
  }
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}

08002620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	1dfb      	adds	r3, r7, #7
 800262e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002630:	e021      	b.n	8002676 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	d01e      	beq.n	8002676 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002638:	f7fe ff7a 	bl	8001530 <HAL_GetTick>
 800263c:	0002      	movs	r2, r0
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d302      	bcc.n	800264e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d113      	bne.n	8002676 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	2220      	movs	r2, #32
 8002654:	431a      	orrs	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2241      	movs	r2, #65	; 0x41
 800265e:	2120      	movs	r1, #32
 8002660:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2242      	movs	r2, #66	; 0x42
 8002666:	2100      	movs	r1, #0
 8002668:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2240      	movs	r2, #64	; 0x40
 800266e:	2100      	movs	r1, #0
 8002670:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e00f      	b.n	8002696 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	4013      	ands	r3, r2
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	425a      	negs	r2, r3
 8002686:	4153      	adcs	r3, r2
 8002688:	b2db      	uxtb	r3, r3
 800268a:	001a      	movs	r2, r3
 800268c:	1dfb      	adds	r3, r7, #7
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d0ce      	beq.n	8002632 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}

0800269e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026aa:	e02b      	b.n	8002704 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	0018      	movs	r0, r3
 80026b4:	f000 f8da 	bl	800286c <I2C_IsAcknowledgeFailed>
 80026b8:	1e03      	subs	r3, r0, #0
 80026ba:	d001      	beq.n	80026c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e029      	b.n	8002714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	3301      	adds	r3, #1
 80026c4:	d01e      	beq.n	8002704 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c6:	f7fe ff33 	bl	8001530 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d302      	bcc.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d113      	bne.n	8002704 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	2220      	movs	r2, #32
 80026e2:	431a      	orrs	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2241      	movs	r2, #65	; 0x41
 80026ec:	2120      	movs	r1, #32
 80026ee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2242      	movs	r2, #66	; 0x42
 80026f4:	2100      	movs	r1, #0
 80026f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2240      	movs	r2, #64	; 0x40
 80026fc:	2100      	movs	r1, #0
 80026fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e007      	b.n	8002714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2202      	movs	r2, #2
 800270c:	4013      	ands	r3, r2
 800270e:	2b02      	cmp	r3, #2
 8002710:	d1cc      	bne.n	80026ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b004      	add	sp, #16
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002728:	e028      	b.n	800277c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	0018      	movs	r0, r3
 8002732:	f000 f89b 	bl	800286c <I2C_IsAcknowledgeFailed>
 8002736:	1e03      	subs	r3, r0, #0
 8002738:	d001      	beq.n	800273e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e026      	b.n	800278c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273e:	f7fe fef7 	bl	8001530 <HAL_GetTick>
 8002742:	0002      	movs	r2, r0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	429a      	cmp	r2, r3
 800274c:	d302      	bcc.n	8002754 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d113      	bne.n	800277c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	2220      	movs	r2, #32
 800275a:	431a      	orrs	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2241      	movs	r2, #65	; 0x41
 8002764:	2120      	movs	r1, #32
 8002766:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2242      	movs	r2, #66	; 0x42
 800276c:	2100      	movs	r1, #0
 800276e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2240      	movs	r2, #64	; 0x40
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e007      	b.n	800278c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2220      	movs	r2, #32
 8002784:	4013      	ands	r3, r2
 8002786:	2b20      	cmp	r3, #32
 8002788:	d1cf      	bne.n	800272a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b004      	add	sp, #16
 8002792:	bd80      	pop	{r7, pc}

08002794 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027a0:	e055      	b.n	800284e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 f85f 	bl	800286c <I2C_IsAcknowledgeFailed>
 80027ae:	1e03      	subs	r3, r0, #0
 80027b0:	d001      	beq.n	80027b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e053      	b.n	800285e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2220      	movs	r2, #32
 80027be:	4013      	ands	r3, r2
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d129      	bne.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2204      	movs	r2, #4
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d105      	bne.n	80027de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e03f      	b.n	800285e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2220      	movs	r2, #32
 80027e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	491d      	ldr	r1, [pc, #116]	; (8002868 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80027f2:	400a      	ands	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2241      	movs	r2, #65	; 0x41
 8002800:	2120      	movs	r1, #32
 8002802:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2242      	movs	r2, #66	; 0x42
 8002808:	2100      	movs	r1, #0
 800280a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	2100      	movs	r1, #0
 8002812:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e022      	b.n	800285e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002818:	f7fe fe8a 	bl	8001530 <HAL_GetTick>
 800281c:	0002      	movs	r2, r0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	429a      	cmp	r2, r3
 8002826:	d302      	bcc.n	800282e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10f      	bne.n	800284e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	2220      	movs	r2, #32
 8002834:	431a      	orrs	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2241      	movs	r2, #65	; 0x41
 800283e:	2120      	movs	r1, #32
 8002840:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2240      	movs	r2, #64	; 0x40
 8002846:	2100      	movs	r1, #0
 8002848:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e007      	b.n	800285e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2204      	movs	r2, #4
 8002856:	4013      	ands	r3, r2
 8002858:	2b04      	cmp	r3, #4
 800285a:	d1a2      	bne.n	80027a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b004      	add	sp, #16
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	fe00e800 	.word	0xfe00e800

0800286c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2210      	movs	r2, #16
 8002880:	4013      	ands	r3, r2
 8002882:	2b10      	cmp	r3, #16
 8002884:	d151      	bne.n	800292a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002886:	e021      	b.n	80028cc <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	3301      	adds	r3, #1
 800288c:	d01e      	beq.n	80028cc <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288e:	f7fe fe4f 	bl	8001530 <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	429a      	cmp	r2, r3
 800289c:	d302      	bcc.n	80028a4 <I2C_IsAcknowledgeFailed+0x38>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d113      	bne.n	80028cc <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a8:	2220      	movs	r2, #32
 80028aa:	431a      	orrs	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2241      	movs	r2, #65	; 0x41
 80028b4:	2120      	movs	r1, #32
 80028b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2242      	movs	r2, #66	; 0x42
 80028bc:	2100      	movs	r1, #0
 80028be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2240      	movs	r2, #64	; 0x40
 80028c4:	2100      	movs	r1, #0
 80028c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e02f      	b.n	800292c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2220      	movs	r2, #32
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d1d6      	bne.n	8002888 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2210      	movs	r2, #16
 80028e0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2220      	movs	r2, #32
 80028e8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7ff fe75 	bl	80025dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	490d      	ldr	r1, [pc, #52]	; (8002934 <I2C_IsAcknowledgeFailed+0xc8>)
 80028fe:	400a      	ands	r2, r1
 8002900:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	2204      	movs	r2, #4
 8002908:	431a      	orrs	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2241      	movs	r2, #65	; 0x41
 8002912:	2120      	movs	r1, #32
 8002914:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2242      	movs	r2, #66	; 0x42
 800291a:	2100      	movs	r1, #0
 800291c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2240      	movs	r2, #64	; 0x40
 8002922:	2100      	movs	r1, #0
 8002924:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b004      	add	sp, #16
 8002932:	bd80      	pop	{r7, pc}
 8002934:	fe00e800 	.word	0xfe00e800

08002938 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	0008      	movs	r0, r1
 8002942:	0011      	movs	r1, r2
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	240a      	movs	r4, #10
 8002948:	193b      	adds	r3, r7, r4
 800294a:	1c02      	adds	r2, r0, #0
 800294c:	801a      	strh	r2, [r3, #0]
 800294e:	2009      	movs	r0, #9
 8002950:	183b      	adds	r3, r7, r0
 8002952:	1c0a      	adds	r2, r1, #0
 8002954:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	6a3a      	ldr	r2, [r7, #32]
 800295e:	0d51      	lsrs	r1, r2, #21
 8002960:	2280      	movs	r2, #128	; 0x80
 8002962:	00d2      	lsls	r2, r2, #3
 8002964:	400a      	ands	r2, r1
 8002966:	490e      	ldr	r1, [pc, #56]	; (80029a0 <I2C_TransferConfig+0x68>)
 8002968:	430a      	orrs	r2, r1
 800296a:	43d2      	mvns	r2, r2
 800296c:	401a      	ands	r2, r3
 800296e:	0011      	movs	r1, r2
 8002970:	193b      	adds	r3, r7, r4
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	059b      	lsls	r3, r3, #22
 8002976:	0d9a      	lsrs	r2, r3, #22
 8002978:	183b      	adds	r3, r7, r0
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	0418      	lsls	r0, r3, #16
 800297e:	23ff      	movs	r3, #255	; 0xff
 8002980:	041b      	lsls	r3, r3, #16
 8002982:	4003      	ands	r3, r0
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	431a      	orrs	r2, r3
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	431a      	orrs	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	b005      	add	sp, #20
 800299c:	bd90      	pop	{r4, r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	03ff63ff 	.word	0x03ff63ff

080029a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2241      	movs	r2, #65	; 0x41
 80029b2:	5c9b      	ldrb	r3, [r3, r2]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d138      	bne.n	8002a2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2240      	movs	r2, #64	; 0x40
 80029be:	5c9b      	ldrb	r3, [r3, r2]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e032      	b.n	8002a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2240      	movs	r2, #64	; 0x40
 80029cc:	2101      	movs	r1, #1
 80029ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2241      	movs	r2, #65	; 0x41
 80029d4:	2124      	movs	r1, #36	; 0x24
 80029d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2101      	movs	r1, #1
 80029e4:	438a      	bics	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4911      	ldr	r1, [pc, #68]	; (8002a38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80029f4:	400a      	ands	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6819      	ldr	r1, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2101      	movs	r1, #1
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2241      	movs	r2, #65	; 0x41
 8002a1c:	2120      	movs	r1, #32
 8002a1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2240      	movs	r2, #64	; 0x40
 8002a24:	2100      	movs	r1, #0
 8002a26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e000      	b.n	8002a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
  }
}
 8002a2e:	0018      	movs	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b002      	add	sp, #8
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	ffffefff 	.word	0xffffefff

08002a3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2241      	movs	r2, #65	; 0x41
 8002a4a:	5c9b      	ldrb	r3, [r3, r2]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d139      	bne.n	8002ac6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2240      	movs	r2, #64	; 0x40
 8002a56:	5c9b      	ldrb	r3, [r3, r2]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e033      	b.n	8002ac8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	2101      	movs	r1, #1
 8002a66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2241      	movs	r2, #65	; 0x41
 8002a6c:	2124      	movs	r1, #36	; 0x24
 8002a6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	438a      	bics	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a11      	ldr	r2, [pc, #68]	; (8002ad0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2241      	movs	r2, #65	; 0x41
 8002ab6:	2120      	movs	r1, #32
 8002ab8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2240      	movs	r2, #64	; 0x40
 8002abe:	2100      	movs	r1, #0
 8002ac0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b004      	add	sp, #16
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	fffff0ff 	.word	0xfffff0ff

08002ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad4:	b5b0      	push	{r4, r5, r7, lr}
 8002ad6:	b08a      	sub	sp, #40	; 0x28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d102      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f000 fb6c 	bl	80031c0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae8:	4bc8      	ldr	r3, [pc, #800]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	220c      	movs	r2, #12
 8002aee:	4013      	ands	r3, r2
 8002af0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af2:	4bc6      	ldr	r3, [pc, #792]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	025b      	lsls	r3, r3, #9
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2201      	movs	r2, #1
 8002b04:	4013      	ands	r3, r2
 8002b06:	d100      	bne.n	8002b0a <HAL_RCC_OscConfig+0x36>
 8002b08:	e07d      	b.n	8002c06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d007      	beq.n	8002b20 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d112      	bne.n	8002b3c <HAL_RCC_OscConfig+0x68>
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	025b      	lsls	r3, r3, #9
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d10d      	bne.n	8002b3c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	4bba      	ldr	r3, [pc, #744]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	029b      	lsls	r3, r3, #10
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d100      	bne.n	8002b2e <HAL_RCC_OscConfig+0x5a>
 8002b2c:	e06a      	b.n	8002c04 <HAL_RCC_OscConfig+0x130>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d166      	bne.n	8002c04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f000 fb42 	bl	80031c0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	025b      	lsls	r3, r3, #9
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_OscConfig+0x84>
 8002b48:	4bb0      	ldr	r3, [pc, #704]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4baf      	ldr	r3, [pc, #700]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002b4e:	2180      	movs	r1, #128	; 0x80
 8002b50:	0249      	lsls	r1, r1, #9
 8002b52:	430a      	orrs	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e027      	b.n	8002ba8 <HAL_RCC_OscConfig+0xd4>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	23a0      	movs	r3, #160	; 0xa0
 8002b5e:	02db      	lsls	r3, r3, #11
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10e      	bne.n	8002b82 <HAL_RCC_OscConfig+0xae>
 8002b64:	4ba9      	ldr	r3, [pc, #676]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4ba8      	ldr	r3, [pc, #672]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002b6a:	2180      	movs	r1, #128	; 0x80
 8002b6c:	02c9      	lsls	r1, r1, #11
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	4ba6      	ldr	r3, [pc, #664]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	4ba5      	ldr	r3, [pc, #660]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	0249      	lsls	r1, r1, #9
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e012      	b.n	8002ba8 <HAL_RCC_OscConfig+0xd4>
 8002b82:	4ba2      	ldr	r3, [pc, #648]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4ba1      	ldr	r3, [pc, #644]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002b88:	49a1      	ldr	r1, [pc, #644]	; (8002e10 <HAL_RCC_OscConfig+0x33c>)
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	4b9f      	ldr	r3, [pc, #636]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	025b      	lsls	r3, r3, #9
 8002b96:	4013      	ands	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4b9b      	ldr	r3, [pc, #620]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b9a      	ldr	r3, [pc, #616]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002ba2:	499c      	ldr	r1, [pc, #624]	; (8002e14 <HAL_RCC_OscConfig+0x340>)
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d014      	beq.n	8002bda <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fcbe 	bl	8001530 <HAL_GetTick>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bba:	f7fe fcb9 	bl	8001530 <HAL_GetTick>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b64      	cmp	r3, #100	; 0x64
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e2f9      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bcc:	4b8f      	ldr	r3, [pc, #572]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	029b      	lsls	r3, r3, #10
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0xe6>
 8002bd8:	e015      	b.n	8002c06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7fe fca9 	bl	8001530 <HAL_GetTick>
 8002bde:	0003      	movs	r3, r0
 8002be0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be4:	f7fe fca4 	bl	8001530 <HAL_GetTick>
 8002be8:	0002      	movs	r2, r0
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	; 0x64
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e2e4      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bf6:	4b85      	ldr	r3, [pc, #532]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	029b      	lsls	r3, r3, #10
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x110>
 8002c02:	e000      	b.n	8002c06 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d100      	bne.n	8002c12 <HAL_RCC_OscConfig+0x13e>
 8002c10:	e099      	b.n	8002d46 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002c20:	4b7a      	ldr	r3, [pc, #488]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b79      	ldr	r3, [pc, #484]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002c26:	2120      	movs	r1, #32
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	2220      	movs	r2, #32
 8002c30:	4393      	bics	r3, r2
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d005      	beq.n	8002c46 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	2b0c      	cmp	r3, #12
 8002c3e:	d13e      	bne.n	8002cbe <HAL_RCC_OscConfig+0x1ea>
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d13b      	bne.n	8002cbe <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002c46:	4b71      	ldr	r3, [pc, #452]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_RCC_OscConfig+0x186>
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e2b2      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5a:	4b6c      	ldr	r3, [pc, #432]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4a6e      	ldr	r2, [pc, #440]	; (8002e18 <HAL_RCC_OscConfig+0x344>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	0019      	movs	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	021a      	lsls	r2, r3, #8
 8002c6a:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c70:	4b66      	ldr	r3, [pc, #408]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2209      	movs	r2, #9
 8002c76:	4393      	bics	r3, r2
 8002c78:	0019      	movs	r1, r3
 8002c7a:	4b64      	ldr	r3, [pc, #400]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c82:	f000 fbeb 	bl	800345c <HAL_RCC_GetSysClockFreq>
 8002c86:	0001      	movs	r1, r0
 8002c88:	4b60      	ldr	r3, [pc, #384]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	220f      	movs	r2, #15
 8002c90:	4013      	ands	r3, r2
 8002c92:	4a62      	ldr	r2, [pc, #392]	; (8002e1c <HAL_RCC_OscConfig+0x348>)
 8002c94:	5cd3      	ldrb	r3, [r2, r3]
 8002c96:	000a      	movs	r2, r1
 8002c98:	40da      	lsrs	r2, r3
 8002c9a:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <HAL_RCC_OscConfig+0x34c>)
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002c9e:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <HAL_RCC_OscConfig+0x350>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2513      	movs	r5, #19
 8002ca4:	197c      	adds	r4, r7, r5
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f7fe fbfc 	bl	80014a4 <HAL_InitTick>
 8002cac:	0003      	movs	r3, r0
 8002cae:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002cb0:	197b      	adds	r3, r7, r5
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d046      	beq.n	8002d46 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002cb8:	197b      	adds	r3, r7, r5
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	e280      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d027      	beq.n	8002d14 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002cc4:	4b51      	ldr	r3, [pc, #324]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2209      	movs	r2, #9
 8002cca:	4393      	bics	r3, r2
 8002ccc:	0019      	movs	r1, r3
 8002cce:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fc2b 	bl	8001530 <HAL_GetTick>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce0:	f7fe fc26 	bl	8001530 <HAL_GetTick>
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e266      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf2:	4b46      	ldr	r3, [pc, #280]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d0f1      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfc:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a45      	ldr	r2, [pc, #276]	; (8002e18 <HAL_RCC_OscConfig+0x344>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	0019      	movs	r1, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	021a      	lsls	r2, r3, #8
 8002d0c:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	e018      	b.n	8002d46 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d14:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7fe fc06 	bl	8001530 <HAL_GetTick>
 8002d24:	0003      	movs	r3, r0
 8002d26:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fc01 	bl	8001530 <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e241      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d3c:	4b33      	ldr	r3, [pc, #204]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2204      	movs	r2, #4
 8002d42:	4013      	ands	r3, r2
 8002d44:	d1f1      	bne.n	8002d2a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d100      	bne.n	8002d52 <HAL_RCC_OscConfig+0x27e>
 8002d50:	e0a1      	b.n	8002e96 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d140      	bne.n	8002dda <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d58:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4013      	ands	r3, r2
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_OscConfig+0x29c>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e227      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d70:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4a2c      	ldr	r2, [pc, #176]	; (8002e28 <HAL_RCC_OscConfig+0x354>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1a      	ldr	r2, [r3, #32]
 8002d7e:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002d80:	430a      	orrs	r2, r1
 8002d82:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d84:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	0a19      	lsrs	r1, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	061a      	lsls	r2, r3, #24
 8002d92:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002d94:	430a      	orrs	r2, r1
 8002d96:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	0b5b      	lsrs	r3, r3, #13
 8002d9e:	3301      	adds	r3, #1
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	0212      	lsls	r2, r2, #8
 8002da4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002da6:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	210f      	movs	r1, #15
 8002dae:	400b      	ands	r3, r1
 8002db0:	491a      	ldr	r1, [pc, #104]	; (8002e1c <HAL_RCC_OscConfig+0x348>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <HAL_RCC_OscConfig+0x34c>)
 8002db8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_RCC_OscConfig+0x350>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2513      	movs	r5, #19
 8002dc0:	197c      	adds	r4, r7, r5
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7fe fb6e 	bl	80014a4 <HAL_InitTick>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002dcc:	197b      	adds	r3, r7, r5
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d060      	beq.n	8002e96 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002dd4:	197b      	adds	r3, r7, r5
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	e1f2      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d03f      	beq.n	8002e62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_OscConfig+0x338>)
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	0049      	lsls	r1, r1, #1
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe fb9e 	bl	8001530 <HAL_GetTick>
 8002df4:	0003      	movs	r3, r0
 8002df6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002df8:	e018      	b.n	8002e2c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dfa:	f7fe fb99 	bl	8001530 <HAL_GetTick>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d911      	bls.n	8002e2c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e1d9      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	fffeffff 	.word	0xfffeffff
 8002e14:	fffbffff 	.word	0xfffbffff
 8002e18:	ffffe0ff 	.word	0xffffe0ff
 8002e1c:	080051e0 	.word	0x080051e0
 8002e20:	20000000 	.word	0x20000000
 8002e24:	20000004 	.word	0x20000004
 8002e28:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e2c:	4bc9      	ldr	r3, [pc, #804]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4013      	ands	r3, r2
 8002e36:	d0e0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e38:	4bc6      	ldr	r3, [pc, #792]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4ac6      	ldr	r2, [pc, #792]	; (8003158 <HAL_RCC_OscConfig+0x684>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	0019      	movs	r1, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1a      	ldr	r2, [r3, #32]
 8002e46:	4bc3      	ldr	r3, [pc, #780]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4c:	4bc1      	ldr	r3, [pc, #772]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	0a19      	lsrs	r1, r3, #8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	061a      	lsls	r2, r3, #24
 8002e5a:	4bbe      	ldr	r3, [pc, #760]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	e019      	b.n	8002e96 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e62:	4bbc      	ldr	r3, [pc, #752]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4bbb      	ldr	r3, [pc, #748]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002e68:	49bc      	ldr	r1, [pc, #752]	; (800315c <HAL_RCC_OscConfig+0x688>)
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fb5f 	bl	8001530 <HAL_GetTick>
 8002e72:	0003      	movs	r3, r0
 8002e74:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e78:	f7fe fb5a 	bl	8001530 <HAL_GetTick>
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e19a      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e8a:	4bb2      	ldr	r3, [pc, #712]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4013      	ands	r3, r2
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2208      	movs	r2, #8
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d036      	beq.n	8002f0e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d019      	beq.n	8002edc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea8:	4baa      	ldr	r3, [pc, #680]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002eaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eac:	4ba9      	ldr	r3, [pc, #676]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb4:	f7fe fb3c 	bl	8001530 <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fb37 	bl	8001530 <HAL_GetTick>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e177      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ed0:	4ba0      	ldr	r3, [pc, #640]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d0f1      	beq.n	8002ebe <HAL_RCC_OscConfig+0x3ea>
 8002eda:	e018      	b.n	8002f0e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002edc:	4b9d      	ldr	r3, [pc, #628]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002ede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ee0:	4b9c      	ldr	r3, [pc, #624]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee8:	f7fe fb22 	bl	8001530 <HAL_GetTick>
 8002eec:	0003      	movs	r3, r0
 8002eee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef2:	f7fe fb1d 	bl	8001530 <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e15d      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f04:	4b93      	ldr	r3, [pc, #588]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f08:	2202      	movs	r2, #2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d1f1      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2204      	movs	r2, #4
 8002f14:	4013      	ands	r3, r2
 8002f16:	d100      	bne.n	8002f1a <HAL_RCC_OscConfig+0x446>
 8002f18:	e0ae      	b.n	8003078 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1a:	2023      	movs	r0, #35	; 0x23
 8002f1c:	183b      	adds	r3, r7, r0
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f22:	4b8c      	ldr	r3, [pc, #560]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	055b      	lsls	r3, r3, #21
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	4b89      	ldr	r3, [pc, #548]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f32:	4b88      	ldr	r3, [pc, #544]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002f34:	2180      	movs	r1, #128	; 0x80
 8002f36:	0549      	lsls	r1, r1, #21
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002f3c:	183b      	adds	r3, r7, r0
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f42:	4b87      	ldr	r3, [pc, #540]	; (8003160 <HAL_RCC_OscConfig+0x68c>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d11a      	bne.n	8002f84 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4e:	4b84      	ldr	r3, [pc, #528]	; (8003160 <HAL_RCC_OscConfig+0x68c>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4b83      	ldr	r3, [pc, #524]	; (8003160 <HAL_RCC_OscConfig+0x68c>)
 8002f54:	2180      	movs	r1, #128	; 0x80
 8002f56:	0049      	lsls	r1, r1, #1
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5c:	f7fe fae8 	bl	8001530 <HAL_GetTick>
 8002f60:	0003      	movs	r3, r0
 8002f62:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7fe fae3 	bl	8001530 <HAL_GetTick>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b64      	cmp	r3, #100	; 0x64
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e123      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	4b79      	ldr	r3, [pc, #484]	; (8003160 <HAL_RCC_OscConfig+0x68c>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4013      	ands	r3, r2
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x4cc>
 8002f90:	4b70      	ldr	r3, [pc, #448]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f94:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	0049      	lsls	r1, r1, #1
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	651a      	str	r2, [r3, #80]	; 0x50
 8002f9e:	e031      	b.n	8003004 <HAL_RCC_OscConfig+0x530>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x4ee>
 8002fa8:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002faa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fac:	4b69      	ldr	r3, [pc, #420]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002fae:	496b      	ldr	r1, [pc, #428]	; (800315c <HAL_RCC_OscConfig+0x688>)
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	651a      	str	r2, [r3, #80]	; 0x50
 8002fb4:	4b67      	ldr	r3, [pc, #412]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002fb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fb8:	4b66      	ldr	r3, [pc, #408]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002fba:	496a      	ldr	r1, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x690>)
 8002fbc:	400a      	ands	r2, r1
 8002fbe:	651a      	str	r2, [r3, #80]	; 0x50
 8002fc0:	e020      	b.n	8003004 <HAL_RCC_OscConfig+0x530>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	23a0      	movs	r3, #160	; 0xa0
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d10e      	bne.n	8002fec <HAL_RCC_OscConfig+0x518>
 8002fce:	4b61      	ldr	r3, [pc, #388]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002fd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fd2:	4b60      	ldr	r3, [pc, #384]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	00c9      	lsls	r1, r1, #3
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	651a      	str	r2, [r3, #80]	; 0x50
 8002fdc:	4b5d      	ldr	r3, [pc, #372]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002fde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fe0:	4b5c      	ldr	r3, [pc, #368]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	0049      	lsls	r1, r1, #1
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	651a      	str	r2, [r3, #80]	; 0x50
 8002fea:	e00b      	b.n	8003004 <HAL_RCC_OscConfig+0x530>
 8002fec:	4b59      	ldr	r3, [pc, #356]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002fee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ff0:	4b58      	ldr	r3, [pc, #352]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002ff2:	495a      	ldr	r1, [pc, #360]	; (800315c <HAL_RCC_OscConfig+0x688>)
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	651a      	str	r2, [r3, #80]	; 0x50
 8002ff8:	4b56      	ldr	r3, [pc, #344]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ffc:	4b55      	ldr	r3, [pc, #340]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8002ffe:	4959      	ldr	r1, [pc, #356]	; (8003164 <HAL_RCC_OscConfig+0x690>)
 8003000:	400a      	ands	r2, r1
 8003002:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d015      	beq.n	8003038 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300c:	f7fe fa90 	bl	8001530 <HAL_GetTick>
 8003010:	0003      	movs	r3, r0
 8003012:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003014:	e009      	b.n	800302a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe fa8b 	bl	8001530 <HAL_GetTick>
 800301a:	0002      	movs	r2, r0
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	4a51      	ldr	r2, [pc, #324]	; (8003168 <HAL_RCC_OscConfig+0x694>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0ca      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800302a:	4b4a      	ldr	r3, [pc, #296]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 800302c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800302e:	2380      	movs	r3, #128	; 0x80
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4013      	ands	r3, r2
 8003034:	d0ef      	beq.n	8003016 <HAL_RCC_OscConfig+0x542>
 8003036:	e014      	b.n	8003062 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7fe fa7a 	bl	8001530 <HAL_GetTick>
 800303c:	0003      	movs	r3, r0
 800303e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003040:	e009      	b.n	8003056 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003042:	f7fe fa75 	bl	8001530 <HAL_GetTick>
 8003046:	0002      	movs	r2, r0
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	4a46      	ldr	r2, [pc, #280]	; (8003168 <HAL_RCC_OscConfig+0x694>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e0b4      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003056:	4b3f      	ldr	r3, [pc, #252]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8003058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4013      	ands	r3, r2
 8003060:	d1ef      	bne.n	8003042 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003062:	2323      	movs	r3, #35	; 0x23
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306c:	4b39      	ldr	r3, [pc, #228]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 800306e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003070:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8003072:	493e      	ldr	r1, [pc, #248]	; (800316c <HAL_RCC_OscConfig+0x698>)
 8003074:	400a      	ands	r2, r1
 8003076:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	d100      	bne.n	8003082 <HAL_RCC_OscConfig+0x5ae>
 8003080:	e09d      	b.n	80031be <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d100      	bne.n	800308a <HAL_RCC_OscConfig+0x5b6>
 8003088:	e076      	b.n	8003178 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	2b02      	cmp	r3, #2
 8003090:	d145      	bne.n	800311e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003092:	4b30      	ldr	r3, [pc, #192]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8003098:	4935      	ldr	r1, [pc, #212]	; (8003170 <HAL_RCC_OscConfig+0x69c>)
 800309a:	400a      	ands	r2, r1
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309e:	f7fe fa47 	bl	8001530 <HAL_GetTick>
 80030a2:	0003      	movs	r3, r0
 80030a4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe fa42 	bl	8001530 <HAL_GetTick>
 80030ac:	0002      	movs	r2, r0
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e082      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030ba:	4b26      	ldr	r3, [pc, #152]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	049b      	lsls	r3, r3, #18
 80030c2:	4013      	ands	r3, r2
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c6:	4b23      	ldr	r3, [pc, #140]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	4a2a      	ldr	r2, [pc, #168]	; (8003174 <HAL_RCC_OscConfig+0x6a0>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	0019      	movs	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	431a      	orrs	r2, r3
 80030e0:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 80030e2:	430a      	orrs	r2, r1
 80030e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 80030ec:	2180      	movs	r1, #128	; 0x80
 80030ee:	0449      	lsls	r1, r1, #17
 80030f0:	430a      	orrs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fe fa1c 	bl	8001530 <HAL_GetTick>
 80030f8:	0003      	movs	r3, r0
 80030fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fe:	f7fe fa17 	bl	8001530 <HAL_GetTick>
 8003102:	0002      	movs	r2, r0
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e057      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	049b      	lsls	r3, r3, #18
 8003118:	4013      	ands	r3, r2
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x62a>
 800311c:	e04f      	b.n	80031be <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8003124:	4912      	ldr	r1, [pc, #72]	; (8003170 <HAL_RCC_OscConfig+0x69c>)
 8003126:	400a      	ands	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7fe fa01 	bl	8001530 <HAL_GetTick>
 800312e:	0003      	movs	r3, r0
 8003130:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe f9fc 	bl	8001530 <HAL_GetTick>
 8003138:	0002      	movs	r2, r0
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e03c      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003146:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_RCC_OscConfig+0x680>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	049b      	lsls	r3, r3, #18
 800314e:	4013      	ands	r3, r2
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x660>
 8003152:	e034      	b.n	80031be <HAL_RCC_OscConfig+0x6ea>
 8003154:	40021000 	.word	0x40021000
 8003158:	ffff1fff 	.word	0xffff1fff
 800315c:	fffffeff 	.word	0xfffffeff
 8003160:	40007000 	.word	0x40007000
 8003164:	fffffbff 	.word	0xfffffbff
 8003168:	00001388 	.word	0x00001388
 800316c:	efffffff 	.word	0xefffffff
 8003170:	feffffff 	.word	0xfeffffff
 8003174:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e01d      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003184:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <HAL_RCC_OscConfig+0x6f4>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	025b      	lsls	r3, r3, #9
 8003190:	401a      	ands	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	429a      	cmp	r2, r3
 8003198:	d10f      	bne.n	80031ba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	23f0      	movs	r3, #240	; 0xf0
 800319e:	039b      	lsls	r3, r3, #14
 80031a0:	401a      	ands	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	23c0      	movs	r3, #192	; 0xc0
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	401a      	ands	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	0018      	movs	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b00a      	add	sp, #40	; 0x28
 80031c6:	bdb0      	pop	{r4, r5, r7, pc}
 80031c8:	40021000 	.word	0x40021000

080031cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b5b0      	push	{r4, r5, r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e128      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b96      	ldr	r3, [pc, #600]	; (800343c <HAL_RCC_ClockConfig+0x270>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2201      	movs	r2, #1
 80031e6:	4013      	ands	r3, r2
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d91e      	bls.n	800322c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b93      	ldr	r3, [pc, #588]	; (800343c <HAL_RCC_ClockConfig+0x270>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	4393      	bics	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	4b90      	ldr	r3, [pc, #576]	; (800343c <HAL_RCC_ClockConfig+0x270>)
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003200:	f7fe f996 	bl	8001530 <HAL_GetTick>
 8003204:	0003      	movs	r3, r0
 8003206:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003208:	e009      	b.n	800321e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320a:	f7fe f991 	bl	8001530 <HAL_GetTick>
 800320e:	0002      	movs	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	4a8a      	ldr	r2, [pc, #552]	; (8003440 <HAL_RCC_ClockConfig+0x274>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e109      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b87      	ldr	r3, [pc, #540]	; (800343c <HAL_RCC_ClockConfig+0x270>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2201      	movs	r2, #1
 8003224:	4013      	ands	r3, r2
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d1ee      	bne.n	800320a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2202      	movs	r2, #2
 8003232:	4013      	ands	r3, r2
 8003234:	d009      	beq.n	800324a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003236:	4b83      	ldr	r3, [pc, #524]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	22f0      	movs	r2, #240	; 0xf0
 800323c:	4393      	bics	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	4b7f      	ldr	r3, [pc, #508]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003246:	430a      	orrs	r2, r1
 8003248:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2201      	movs	r2, #1
 8003250:	4013      	ands	r3, r2
 8003252:	d100      	bne.n	8003256 <HAL_RCC_ClockConfig+0x8a>
 8003254:	e089      	b.n	800336a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d107      	bne.n	800326e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800325e:	4b79      	ldr	r3, [pc, #484]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	029b      	lsls	r3, r3, #10
 8003266:	4013      	ands	r3, r2
 8003268:	d120      	bne.n	80032ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0e1      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b03      	cmp	r3, #3
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003276:	4b73      	ldr	r3, [pc, #460]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	049b      	lsls	r3, r3, #18
 800327e:	4013      	ands	r3, r2
 8003280:	d114      	bne.n	80032ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e0d5      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d106      	bne.n	800329c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800328e:	4b6d      	ldr	r3, [pc, #436]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2204      	movs	r2, #4
 8003294:	4013      	ands	r3, r2
 8003296:	d109      	bne.n	80032ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0ca      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800329c:	4b69      	ldr	r3, [pc, #420]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4013      	ands	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0c2      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ac:	4b65      	ldr	r3, [pc, #404]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2203      	movs	r2, #3
 80032b2:	4393      	bics	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	4b62      	ldr	r3, [pc, #392]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 80032bc:	430a      	orrs	r2, r1
 80032be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c0:	f7fe f936 	bl	8001530 <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d111      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d0:	e009      	b.n	80032e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d2:	f7fe f92d 	bl	8001530 <HAL_GetTick>
 80032d6:	0002      	movs	r2, r0
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	4a58      	ldr	r2, [pc, #352]	; (8003440 <HAL_RCC_ClockConfig+0x274>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0a5      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e6:	4b57      	ldr	r3, [pc, #348]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	220c      	movs	r2, #12
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d1ef      	bne.n	80032d2 <HAL_RCC_ClockConfig+0x106>
 80032f2:	e03a      	b.n	800336a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d111      	bne.n	8003320 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032fc:	e009      	b.n	8003312 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fe:	f7fe f917 	bl	8001530 <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	4a4d      	ldr	r2, [pc, #308]	; (8003440 <HAL_RCC_ClockConfig+0x274>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e08f      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003312:	4b4c      	ldr	r3, [pc, #304]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	220c      	movs	r2, #12
 8003318:	4013      	ands	r3, r2
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d1ef      	bne.n	80032fe <HAL_RCC_ClockConfig+0x132>
 800331e:	e024      	b.n	800336a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d11b      	bne.n	8003360 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003328:	e009      	b.n	800333e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800332a:	f7fe f901 	bl	8001530 <HAL_GetTick>
 800332e:	0002      	movs	r2, r0
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	4a42      	ldr	r2, [pc, #264]	; (8003440 <HAL_RCC_ClockConfig+0x274>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e079      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	220c      	movs	r2, #12
 8003344:	4013      	ands	r3, r2
 8003346:	2b04      	cmp	r3, #4
 8003348:	d1ef      	bne.n	800332a <HAL_RCC_ClockConfig+0x15e>
 800334a:	e00e      	b.n	800336a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fe f8f0 	bl	8001530 <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	4a3a      	ldr	r2, [pc, #232]	; (8003440 <HAL_RCC_ClockConfig+0x274>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e068      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003360:	4b38      	ldr	r3, [pc, #224]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	220c      	movs	r2, #12
 8003366:	4013      	ands	r3, r2
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336a:	4b34      	ldr	r3, [pc, #208]	; (800343c <HAL_RCC_ClockConfig+0x270>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2201      	movs	r2, #1
 8003370:	4013      	ands	r3, r2
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d21e      	bcs.n	80033b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003378:	4b30      	ldr	r3, [pc, #192]	; (800343c <HAL_RCC_ClockConfig+0x270>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2201      	movs	r2, #1
 800337e:	4393      	bics	r3, r2
 8003380:	0019      	movs	r1, r3
 8003382:	4b2e      	ldr	r3, [pc, #184]	; (800343c <HAL_RCC_ClockConfig+0x270>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800338a:	f7fe f8d1 	bl	8001530 <HAL_GetTick>
 800338e:	0003      	movs	r3, r0
 8003390:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	e009      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fe f8cc 	bl	8001530 <HAL_GetTick>
 8003398:	0002      	movs	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	4a28      	ldr	r2, [pc, #160]	; (8003440 <HAL_RCC_ClockConfig+0x274>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e044      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a8:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCC_ClockConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2201      	movs	r2, #1
 80033ae:	4013      	ands	r3, r2
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d1ee      	bne.n	8003394 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2204      	movs	r2, #4
 80033bc:	4013      	ands	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a20      	ldr	r2, [pc, #128]	; (8003448 <HAL_RCC_ClockConfig+0x27c>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 80033d0:	430a      	orrs	r2, r1
 80033d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2208      	movs	r2, #8
 80033da:	4013      	ands	r3, r2
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033de:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4a1a      	ldr	r2, [pc, #104]	; (800344c <HAL_RCC_ClockConfig+0x280>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	0019      	movs	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	00da      	lsls	r2, r3, #3
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 80033f0:	430a      	orrs	r2, r1
 80033f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033f4:	f000 f832 	bl	800345c <HAL_RCC_GetSysClockFreq>
 80033f8:	0001      	movs	r1, r0
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_RCC_ClockConfig+0x278>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	220f      	movs	r2, #15
 8003402:	4013      	ands	r3, r2
 8003404:	4a12      	ldr	r2, [pc, #72]	; (8003450 <HAL_RCC_ClockConfig+0x284>)
 8003406:	5cd3      	ldrb	r3, [r2, r3]
 8003408:	000a      	movs	r2, r1
 800340a:	40da      	lsrs	r2, r3
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 800340e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003410:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_RCC_ClockConfig+0x28c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	250b      	movs	r5, #11
 8003416:	197c      	adds	r4, r7, r5
 8003418:	0018      	movs	r0, r3
 800341a:	f7fe f843 	bl	80014a4 <HAL_InitTick>
 800341e:	0003      	movs	r3, r0
 8003420:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003422:	197b      	adds	r3, r7, r5
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800342a:	197b      	adds	r3, r7, r5
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	e000      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b004      	add	sp, #16
 8003438:	bdb0      	pop	{r4, r5, r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	40022000 	.word	0x40022000
 8003440:	00001388 	.word	0x00001388
 8003444:	40021000 	.word	0x40021000
 8003448:	fffff8ff 	.word	0xfffff8ff
 800344c:	ffffc7ff 	.word	0xffffc7ff
 8003450:	080051e0 	.word	0x080051e0
 8003454:	20000000 	.word	0x20000000
 8003458:	20000004 	.word	0x20000004

0800345c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800345c:	b5b0      	push	{r4, r5, r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003462:	4b4c      	ldr	r3, [pc, #304]	; (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800346a:	230c      	movs	r3, #12
 800346c:	4013      	ands	r3, r2
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d014      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x40>
 8003472:	d900      	bls.n	8003476 <HAL_RCC_GetSysClockFreq+0x1a>
 8003474:	e07b      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x112>
 8003476:	2b04      	cmp	r3, #4
 8003478:	d002      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x24>
 800347a:	2b08      	cmp	r3, #8
 800347c:	d00b      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x3a>
 800347e:	e076      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003480:	4b44      	ldr	r3, [pc, #272]	; (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2210      	movs	r2, #16
 8003486:	4013      	ands	r3, r2
 8003488:	d002      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800348a:	4b43      	ldr	r3, [pc, #268]	; (8003598 <HAL_RCC_GetSysClockFreq+0x13c>)
 800348c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800348e:	e07c      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003490:	4b42      	ldr	r3, [pc, #264]	; (800359c <HAL_RCC_GetSysClockFreq+0x140>)
 8003492:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003494:	e079      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003496:	4b42      	ldr	r3, [pc, #264]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8003498:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800349a:	e076      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	0c9a      	lsrs	r2, r3, #18
 80034a0:	230f      	movs	r3, #15
 80034a2:	401a      	ands	r2, r3
 80034a4:	4b3f      	ldr	r3, [pc, #252]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x148>)
 80034a6:	5c9b      	ldrb	r3, [r3, r2]
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	0d9a      	lsrs	r2, r3, #22
 80034ae:	2303      	movs	r3, #3
 80034b0:	4013      	ands	r3, r2
 80034b2:	3301      	adds	r3, #1
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b6:	4b37      	ldr	r3, [pc, #220]	; (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	025b      	lsls	r3, r3, #9
 80034be:	4013      	ands	r3, r2
 80034c0:	d01a      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	4a35      	ldr	r2, [pc, #212]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x144>)
 80034cc:	2300      	movs	r3, #0
 80034ce:	69b8      	ldr	r0, [r7, #24]
 80034d0:	69f9      	ldr	r1, [r7, #28]
 80034d2:	f7fc ff09 	bl	80002e8 <__aeabi_lmul>
 80034d6:	0002      	movs	r2, r0
 80034d8:	000b      	movs	r3, r1
 80034da:	0010      	movs	r0, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f7fc fedd 	bl	80002a8 <__aeabi_uldivmod>
 80034ee:	0002      	movs	r2, r0
 80034f0:	000b      	movs	r3, r1
 80034f2:	0013      	movs	r3, r2
 80034f4:	637b      	str	r3, [r7, #52]	; 0x34
 80034f6:	e037      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034f8:	4b26      	ldr	r3, [pc, #152]	; (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2210      	movs	r2, #16
 80034fe:	4013      	ands	r3, r2
 8003500:	d01a      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	4a23      	ldr	r2, [pc, #140]	; (8003598 <HAL_RCC_GetSysClockFreq+0x13c>)
 800350c:	2300      	movs	r3, #0
 800350e:	68b8      	ldr	r0, [r7, #8]
 8003510:	68f9      	ldr	r1, [r7, #12]
 8003512:	f7fc fee9 	bl	80002e8 <__aeabi_lmul>
 8003516:	0002      	movs	r2, r0
 8003518:	000b      	movs	r3, r1
 800351a:	0010      	movs	r0, r2
 800351c:	0019      	movs	r1, r3
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f7fc febd 	bl	80002a8 <__aeabi_uldivmod>
 800352e:	0002      	movs	r2, r0
 8003530:	000b      	movs	r3, r1
 8003532:	0013      	movs	r3, r2
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
 8003536:	e017      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	0018      	movs	r0, r3
 800353c:	2300      	movs	r3, #0
 800353e:	0019      	movs	r1, r3
 8003540:	4a16      	ldr	r2, [pc, #88]	; (800359c <HAL_RCC_GetSysClockFreq+0x140>)
 8003542:	2300      	movs	r3, #0
 8003544:	f7fc fed0 	bl	80002e8 <__aeabi_lmul>
 8003548:	0002      	movs	r2, r0
 800354a:	000b      	movs	r3, r1
 800354c:	0010      	movs	r0, r2
 800354e:	0019      	movs	r1, r3
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	001c      	movs	r4, r3
 8003554:	2300      	movs	r3, #0
 8003556:	001d      	movs	r5, r3
 8003558:	0022      	movs	r2, r4
 800355a:	002b      	movs	r3, r5
 800355c:	f7fc fea4 	bl	80002a8 <__aeabi_uldivmod>
 8003560:	0002      	movs	r2, r0
 8003562:	000b      	movs	r3, r1
 8003564:	0013      	movs	r3, r2
 8003566:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800356c:	e00d      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	0b5b      	lsrs	r3, r3, #13
 8003574:	2207      	movs	r2, #7
 8003576:	4013      	ands	r3, r2
 8003578:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	3301      	adds	r3, #1
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	0212      	lsls	r2, r2, #8
 8003582:	409a      	lsls	r2, r3
 8003584:	0013      	movs	r3, r2
 8003586:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003588:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b00e      	add	sp, #56	; 0x38
 8003592:	bdb0      	pop	{r4, r5, r7, pc}
 8003594:	40021000 	.word	0x40021000
 8003598:	003d0900 	.word	0x003d0900
 800359c:	00f42400 	.word	0x00f42400
 80035a0:	007a1200 	.word	0x007a1200
 80035a4:	080051f8 	.word	0x080051f8

080035a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ac:	4b02      	ldr	r3, [pc, #8]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	20000000 	.word	0x20000000

080035bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035c0:	f7ff fff2 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035c4:	0001      	movs	r1, r0
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	2207      	movs	r2, #7
 80035ce:	4013      	ands	r3, r2
 80035d0:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035d2:	5cd3      	ldrb	r3, [r2, r3]
 80035d4:	40d9      	lsrs	r1, r3
 80035d6:	000b      	movs	r3, r1
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	40021000 	.word	0x40021000
 80035e4:	080051f0 	.word	0x080051f0

080035e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035ec:	f7ff ffdc 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035f0:	0001      	movs	r1, r0
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_RCC_GetPCLK2Freq+0x24>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	0adb      	lsrs	r3, r3, #11
 80035f8:	2207      	movs	r2, #7
 80035fa:	4013      	ands	r3, r2
 80035fc:	4a04      	ldr	r2, [pc, #16]	; (8003610 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035fe:	5cd3      	ldrb	r3, [r2, r3]
 8003600:	40d9      	lsrs	r1, r3
 8003602:	000b      	movs	r3, r1
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	40021000 	.word	0x40021000
 8003610:	080051f0 	.word	0x080051f0

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800361c:	2017      	movs	r0, #23
 800361e:	183b      	adds	r3, r7, r0
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2220      	movs	r2, #32
 800362a:	4013      	ands	r3, r2
 800362c:	d100      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800362e:	e0c2      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003630:	4b81      	ldr	r3, [pc, #516]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	055b      	lsls	r3, r3, #21
 8003638:	4013      	ands	r3, r2
 800363a:	d109      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363c:	4b7e      	ldr	r3, [pc, #504]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800363e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003640:	4b7d      	ldr	r3, [pc, #500]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003642:	2180      	movs	r1, #128	; 0x80
 8003644:	0549      	lsls	r1, r1, #21
 8003646:	430a      	orrs	r2, r1
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800364a:	183b      	adds	r3, r7, r0
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	4b7a      	ldr	r3, [pc, #488]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4013      	ands	r3, r2
 800365a:	d11a      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365c:	4b77      	ldr	r3, [pc, #476]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003662:	2180      	movs	r1, #128	; 0x80
 8003664:	0049      	lsls	r1, r1, #1
 8003666:	430a      	orrs	r2, r1
 8003668:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366a:	f7fd ff61 	bl	8001530 <HAL_GetTick>
 800366e:	0003      	movs	r3, r0
 8003670:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	e008      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003674:	f7fd ff5c 	bl	8001530 <HAL_GetTick>
 8003678:	0002      	movs	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0d4      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b6d      	ldr	r3, [pc, #436]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4013      	ands	r3, r2
 8003690:	d0f0      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003692:	4b69      	ldr	r3, [pc, #420]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	23c0      	movs	r3, #192	; 0xc0
 8003698:	039b      	lsls	r3, r3, #14
 800369a:	4013      	ands	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	23c0      	movs	r3, #192	; 0xc0
 80036a4:	039b      	lsls	r3, r3, #14
 80036a6:	4013      	ands	r3, r2
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d013      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	23c0      	movs	r3, #192	; 0xc0
 80036b4:	029b      	lsls	r3, r3, #10
 80036b6:	401a      	ands	r2, r3
 80036b8:	23c0      	movs	r3, #192	; 0xc0
 80036ba:	029b      	lsls	r3, r3, #10
 80036bc:	429a      	cmp	r2, r3
 80036be:	d10a      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80036c0:	4b5d      	ldr	r3, [pc, #372]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	029b      	lsls	r3, r3, #10
 80036c8:	401a      	ands	r2, r3
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	029b      	lsls	r3, r3, #10
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d101      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0ac      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80036d6:	4b58      	ldr	r3, [pc, #352]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80036d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036da:	23c0      	movs	r3, #192	; 0xc0
 80036dc:	029b      	lsls	r3, r3, #10
 80036de:	4013      	ands	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d03b      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	23c0      	movs	r3, #192	; 0xc0
 80036ee:	029b      	lsls	r3, r3, #10
 80036f0:	4013      	ands	r3, r2
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d033      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2220      	movs	r2, #32
 80036fe:	4013      	ands	r3, r2
 8003700:	d02e      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003702:	4b4d      	ldr	r3, [pc, #308]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003706:	4a4e      	ldr	r2, [pc, #312]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003708:	4013      	ands	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800370c:	4b4a      	ldr	r3, [pc, #296]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800370e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003710:	4b49      	ldr	r3, [pc, #292]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003712:	2180      	movs	r1, #128	; 0x80
 8003714:	0309      	lsls	r1, r1, #12
 8003716:	430a      	orrs	r2, r1
 8003718:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800371c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800371e:	4b46      	ldr	r3, [pc, #280]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003720:	4948      	ldr	r1, [pc, #288]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003722:	400a      	ands	r2, r1
 8003724:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003726:	4b44      	ldr	r3, [pc, #272]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4013      	ands	r3, r2
 8003734:	d014      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fd fefb 	bl	8001530 <HAL_GetTick>
 800373a:	0003      	movs	r3, r0
 800373c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800373e:	e009      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003740:	f7fd fef6 	bl	8001530 <HAL_GetTick>
 8003744:	0002      	movs	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	4a3f      	ldr	r2, [pc, #252]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e06d      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003754:	4b38      	ldr	r3, [pc, #224]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003756:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4013      	ands	r3, r2
 800375e:	d0ef      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	23c0      	movs	r3, #192	; 0xc0
 8003766:	029b      	lsls	r3, r3, #10
 8003768:	401a      	ands	r2, r3
 800376a:	23c0      	movs	r3, #192	; 0xc0
 800376c:	029b      	lsls	r3, r3, #10
 800376e:	429a      	cmp	r2, r3
 8003770:	d10c      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003772:	4b31      	ldr	r3, [pc, #196]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a35      	ldr	r2, [pc, #212]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003778:	4013      	ands	r3, r2
 800377a:	0019      	movs	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	23c0      	movs	r3, #192	; 0xc0
 8003782:	039b      	lsls	r3, r3, #14
 8003784:	401a      	ands	r2, r3
 8003786:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003788:	430a      	orrs	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800378e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	23c0      	movs	r3, #192	; 0xc0
 8003796:	029b      	lsls	r3, r3, #10
 8003798:	401a      	ands	r2, r3
 800379a:	4b27      	ldr	r3, [pc, #156]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800379c:	430a      	orrs	r2, r1
 800379e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037a0:	2317      	movs	r3, #23
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d105      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037aa:	4b23      	ldr	r3, [pc, #140]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ae:	4b22      	ldr	r3, [pc, #136]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037b0:	4927      	ldr	r1, [pc, #156]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80037b2:	400a      	ands	r2, r1
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2202      	movs	r2, #2
 80037bc:	4013      	ands	r3, r2
 80037be:	d009      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037c0:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	220c      	movs	r2, #12
 80037c6:	4393      	bics	r3, r2
 80037c8:	0019      	movs	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037d0:	430a      	orrs	r2, r1
 80037d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2204      	movs	r2, #4
 80037da:	4013      	ands	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037de:	4b16      	ldr	r3, [pc, #88]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e2:	4a1c      	ldr	r2, [pc, #112]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	0019      	movs	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037ee:	430a      	orrs	r2, r1
 80037f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2208      	movs	r2, #8
 80037f8:	4013      	ands	r3, r2
 80037fa:	d009      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80037fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003800:	4a15      	ldr	r2, [pc, #84]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003802:	4013      	ands	r3, r2
 8003804:	0019      	movs	r1, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800380c:	430a      	orrs	r2, r1
 800380e:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2280      	movs	r2, #128	; 0x80
 8003816:	4013      	ands	r3, r2
 8003818:	d009      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800381c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381e:	4a0f      	ldr	r2, [pc, #60]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003820:	4013      	ands	r3, r2
 8003822:	0019      	movs	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800382a:	430a      	orrs	r2, r1
 800382c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	b006      	add	sp, #24
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	40007000 	.word	0x40007000
 8003840:	fffcffff 	.word	0xfffcffff
 8003844:	fff7ffff 	.word	0xfff7ffff
 8003848:	00001388 	.word	0x00001388
 800384c:	ffcfffff 	.word	0xffcfffff
 8003850:	efffffff 	.word	0xefffffff
 8003854:	fffff3ff 	.word	0xfffff3ff
 8003858:	ffffcfff 	.word	0xffffcfff
 800385c:	fff3ffff 	.word	0xfff3ffff

08003860 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e08e      	b.n	8003990 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2221      	movs	r2, #33	; 0x21
 8003876:	5c9b      	ldrb	r3, [r3, r2]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d107      	bne.n	800388e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	2100      	movs	r1, #0
 8003884:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0018      	movs	r0, r3
 800388a:	f7fd fd0f 	bl	80012ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2221      	movs	r2, #33	; 0x21
 8003892:	2102      	movs	r1, #2
 8003894:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	22ca      	movs	r2, #202	; 0xca
 800389c:	625a      	str	r2, [r3, #36]	; 0x24
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2253      	movs	r2, #83	; 0x53
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 faba 	bl	8003e22 <RTC_EnterInitMode>
 80038ae:	1e03      	subs	r3, r0, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	22ff      	movs	r2, #255	; 0xff
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2221      	movs	r2, #33	; 0x21
 80038be:	2104      	movs	r1, #4
 80038c0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e064      	b.n	8003990 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4931      	ldr	r1, [pc, #196]	; (8003998 <HAL_RTC_Init+0x138>)
 80038d2:	400a      	ands	r2, r1
 80038d4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6899      	ldr	r1, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68d2      	ldr	r2, [r2, #12]
 80038fc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6919      	ldr	r1, [r3, #16]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	041a      	lsls	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	438a      	bics	r2, r1
 8003920:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2103      	movs	r1, #3
 800392e:	438a      	bics	r2, r1
 8003930:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2220      	movs	r2, #32
 8003952:	4013      	ands	r3, r2
 8003954:	d113      	bne.n	800397e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	0018      	movs	r0, r3
 800395a:	f000 fa3b 	bl	8003dd4 <HAL_RTC_WaitForSynchro>
 800395e:	1e03      	subs	r3, r0, #0
 8003960:	d00d      	beq.n	800397e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	22ff      	movs	r2, #255	; 0xff
 8003968:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2221      	movs	r2, #33	; 0x21
 800396e:	2104      	movs	r1, #4
 8003970:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	2100      	movs	r1, #0
 8003978:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e008      	b.n	8003990 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	22ff      	movs	r2, #255	; 0xff
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2221      	movs	r2, #33	; 0x21
 800398a:	2101      	movs	r1, #1
 800398c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800398e:	2300      	movs	r3, #0
  }
}
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}
 8003998:	ff8fffbf 	.word	0xff8fffbf

0800399c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	5c9b      	ldrb	r3, [r3, r2]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_RTC_SetTime+0x1a>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e0ad      	b.n	8003b12 <HAL_RTC_SetTime+0x176>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	2101      	movs	r1, #1
 80039bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2221      	movs	r2, #33	; 0x21
 80039c2:	2102      	movs	r1, #2
 80039c4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d125      	bne.n	8003a18 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2240      	movs	r2, #64	; 0x40
 80039d4:	4013      	ands	r3, r2
 80039d6:	d102      	bne.n	80039de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	0018      	movs	r0, r3
 80039e4:	f000 fa47 	bl	8003e76 <RTC_ByteToBcd2>
 80039e8:	0003      	movs	r3, r0
 80039ea:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 fa40 	bl	8003e76 <RTC_ByteToBcd2>
 80039f6:	0003      	movs	r3, r0
 80039f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80039fa:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	789b      	ldrb	r3, [r3, #2]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f000 fa38 	bl	8003e76 <RTC_ByteToBcd2>
 8003a06:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003a08:	0022      	movs	r2, r4
 8003a0a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	78db      	ldrb	r3, [r3, #3]
 8003a10:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e017      	b.n	8003a48 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2240      	movs	r2, #64	; 0x40
 8003a20:	4013      	ands	r3, r2
 8003a22:	d102      	bne.n	8003a2a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2200      	movs	r2, #0
 8003a28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	785b      	ldrb	r3, [r3, #1]
 8003a34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003a36:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003a3c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	78db      	ldrb	r3, [r3, #3]
 8003a42:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	22ca      	movs	r2, #202	; 0xca
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2253      	movs	r2, #83	; 0x53
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 f9e1 	bl	8003e22 <RTC_EnterInitMode>
 8003a60:	1e03      	subs	r3, r0, #0
 8003a62:	d00d      	beq.n	8003a80 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	22ff      	movs	r2, #255	; 0xff
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2221      	movs	r2, #33	; 0x21
 8003a70:	2104      	movs	r1, #4
 8003a72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	2100      	movs	r1, #0
 8003a7a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e048      	b.n	8003b12 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4925      	ldr	r1, [pc, #148]	; (8003b1c <HAL_RTC_SetTime+0x180>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4922      	ldr	r1, [pc, #136]	; (8003b20 <HAL_RTC_SetTime+0x184>)
 8003a98:	400a      	ands	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6899      	ldr	r1, [r3, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2180      	movs	r1, #128	; 0x80
 8003ac0:	438a      	bics	r2, r1
 8003ac2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2220      	movs	r2, #32
 8003acc:	4013      	ands	r3, r2
 8003ace:	d113      	bne.n	8003af8 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 f97e 	bl	8003dd4 <HAL_RTC_WaitForSynchro>
 8003ad8:	1e03      	subs	r3, r0, #0
 8003ada:	d00d      	beq.n	8003af8 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	22ff      	movs	r2, #255	; 0xff
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2221      	movs	r2, #33	; 0x21
 8003ae8:	2104      	movs	r1, #4
 8003aea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	2100      	movs	r1, #0
 8003af2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e00c      	b.n	8003b12 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	22ff      	movs	r2, #255	; 0xff
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2221      	movs	r2, #33	; 0x21
 8003b04:	2101      	movs	r1, #1
 8003b06:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b10:	2300      	movs	r3, #0
  }
}
 8003b12:	0018      	movs	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b007      	add	sp, #28
 8003b18:	bd90      	pop	{r4, r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	007f7f7f 	.word	0x007f7f7f
 8003b20:	fffbffff 	.word	0xfffbffff

08003b24 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	045b      	lsls	r3, r3, #17
 8003b42:	0c5a      	lsrs	r2, r3, #17
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a22      	ldr	r2, [pc, #136]	; (8003bd8 <HAL_RTC_GetTime+0xb4>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	0c1b      	lsrs	r3, r3, #16
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	223f      	movs	r2, #63	; 0x3f
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	0a1b      	lsrs	r3, r3, #8
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	227f      	movs	r2, #127	; 0x7f
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	227f      	movs	r2, #127	; 0x7f
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2240      	movs	r2, #64	; 0x40
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d11a      	bne.n	8003bce <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f000 f992 	bl	8003ec6 <RTC_Bcd2ToByte>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	001a      	movs	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	785b      	ldrb	r3, [r3, #1]
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f000 f989 	bl	8003ec6 <RTC_Bcd2ToByte>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	789b      	ldrb	r3, [r3, #2]
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f000 f980 	bl	8003ec6 <RTC_Bcd2ToByte>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	001a      	movs	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b006      	add	sp, #24
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	007f7f7f 	.word	0x007f7f7f

08003bdc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	5c9b      	ldrb	r3, [r3, r2]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RTC_SetDate+0x1a>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e099      	b.n	8003d2a <HAL_RTC_SetDate+0x14e>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2221      	movs	r2, #33	; 0x21
 8003c02:	2102      	movs	r1, #2
 8003c04:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10e      	bne.n	8003c2a <HAL_RTC_SetDate+0x4e>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	001a      	movs	r2, r3
 8003c12:	2310      	movs	r3, #16
 8003c14:	4013      	ands	r3, r2
 8003c16:	d008      	beq.n	8003c2a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	785b      	ldrb	r3, [r3, #1]
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	4393      	bics	r3, r2
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	330a      	adds	r3, #10
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d11c      	bne.n	8003c6a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	78db      	ldrb	r3, [r3, #3]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 f91e 	bl	8003e76 <RTC_ByteToBcd2>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	0018      	movs	r0, r3
 8003c44:	f000 f917 	bl	8003e76 <RTC_ByteToBcd2>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c4c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	789b      	ldrb	r3, [r3, #2]
 8003c52:	0018      	movs	r0, r3
 8003c54:	f000 f90f 	bl	8003e76 <RTC_ByteToBcd2>
 8003c58:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003c5a:	0022      	movs	r2, r4
 8003c5c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	e00e      	b.n	8003c88 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	78db      	ldrb	r3, [r3, #3]
 8003c6e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003c76:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003c7c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	22ca      	movs	r2, #202	; 0xca
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2253      	movs	r2, #83	; 0x53
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f000 f8c1 	bl	8003e22 <RTC_EnterInitMode>
 8003ca0:	1e03      	subs	r3, r0, #0
 8003ca2:	d00d      	beq.n	8003cc0 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	22ff      	movs	r2, #255	; 0xff
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2221      	movs	r2, #33	; 0x21
 8003cb0:	2104      	movs	r1, #4
 8003cb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e034      	b.n	8003d2a <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	491b      	ldr	r1, [pc, #108]	; (8003d34 <HAL_RTC_SetDate+0x158>)
 8003cc8:	400a      	ands	r2, r1
 8003cca:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2180      	movs	r1, #128	; 0x80
 8003cd8:	438a      	bics	r2, r1
 8003cda:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d113      	bne.n	8003d10 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 f872 	bl	8003dd4 <HAL_RTC_WaitForSynchro>
 8003cf0:	1e03      	subs	r3, r0, #0
 8003cf2:	d00d      	beq.n	8003d10 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	22ff      	movs	r2, #255	; 0xff
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2221      	movs	r2, #33	; 0x21
 8003d00:	2104      	movs	r1, #4
 8003d02:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	2100      	movs	r1, #0
 8003d0a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e00c      	b.n	8003d2a <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	22ff      	movs	r2, #255	; 0xff
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2221      	movs	r2, #33	; 0x21
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	2100      	movs	r1, #0
 8003d26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d28:	2300      	movs	r3, #0
  }
}
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b007      	add	sp, #28
 8003d30:	bd90      	pop	{r4, r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	00ffff3f 	.word	0x00ffff3f

08003d38 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	4a21      	ldr	r2, [pc, #132]	; (8003dd0 <HAL_RTC_GetDate+0x98>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	0c1b      	lsrs	r3, r3, #16
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	221f      	movs	r2, #31
 8003d62:	4013      	ands	r3, r2
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	223f      	movs	r2, #63	; 0x3f
 8003d70:	4013      	ands	r3, r2
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	0b5b      	lsrs	r3, r3, #13
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2207      	movs	r2, #7
 8003d80:	4013      	ands	r3, r2
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d11a      	bne.n	8003dc4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	78db      	ldrb	r3, [r3, #3]
 8003d92:	0018      	movs	r0, r3
 8003d94:	f000 f897 	bl	8003ec6 <RTC_Bcd2ToByte>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	001a      	movs	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	785b      	ldrb	r3, [r3, #1]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 f88e 	bl	8003ec6 <RTC_Bcd2ToByte>
 8003daa:	0003      	movs	r3, r0
 8003dac:	001a      	movs	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	789b      	ldrb	r3, [r3, #2]
 8003db6:	0018      	movs	r0, r3
 8003db8:	f000 f885 	bl	8003ec6 <RTC_Bcd2ToByte>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	001a      	movs	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b006      	add	sp, #24
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	00ffff3f 	.word	0x00ffff3f

08003dd4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	21a0      	movs	r1, #160	; 0xa0
 8003de8:	438a      	bics	r2, r1
 8003dea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003dec:	f7fd fba0 	bl	8001530 <HAL_GetTick>
 8003df0:	0003      	movs	r3, r0
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003df4:	e00a      	b.n	8003e0c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003df6:	f7fd fb9b 	bl	8001530 <HAL_GetTick>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	1ad2      	subs	r2, r2, r3
 8003e00:	23fa      	movs	r3, #250	; 0xfa
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d901      	bls.n	8003e0c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e006      	b.n	8003e1a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	4013      	ands	r3, r2
 8003e16:	d0ee      	beq.n	8003df6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b004      	add	sp, #16
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2240      	movs	r2, #64	; 0x40
 8003e32:	4013      	ands	r3, r2
 8003e34:	d11a      	bne.n	8003e6c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4252      	negs	r2, r2
 8003e3e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003e40:	f7fd fb76 	bl	8001530 <HAL_GetTick>
 8003e44:	0003      	movs	r3, r0
 8003e46:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e48:	e00a      	b.n	8003e60 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003e4a:	f7fd fb71 	bl	8001530 <HAL_GetTick>
 8003e4e:	0002      	movs	r2, r0
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1ad2      	subs	r2, r2, r3
 8003e54:	23fa      	movs	r3, #250	; 0xfa
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d901      	bls.n	8003e60 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e006      	b.n	8003e6e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d0ee      	beq.n	8003e4a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	1dfb      	adds	r3, r7, #7
 8003e80:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003e86:	230b      	movs	r3, #11
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	1dfa      	adds	r2, r7, #7
 8003e8c:	7812      	ldrb	r2, [r2, #0]
 8003e8e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8003e90:	e008      	b.n	8003ea4 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3301      	adds	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003e98:	220b      	movs	r2, #11
 8003e9a:	18bb      	adds	r3, r7, r2
 8003e9c:	18ba      	adds	r2, r7, r2
 8003e9e:	7812      	ldrb	r2, [r2, #0]
 8003ea0:	3a0a      	subs	r2, #10
 8003ea2:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8003ea4:	210b      	movs	r1, #11
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b09      	cmp	r3, #9
 8003eac:	d8f1      	bhi.n	8003e92 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	187b      	adds	r3, r7, r1
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	b2db      	uxtb	r3, r3
}
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b004      	add	sp, #16
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	0002      	movs	r2, r0
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003ed2:	1dfb      	adds	r3, r7, #7
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	001a      	movs	r2, r3
 8003edc:	0013      	movs	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	189b      	adds	r3, r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	1dfb      	adds	r3, r7, #7
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	210f      	movs	r1, #15
 8003ef0:	400b      	ands	r3, r1
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	18d3      	adds	r3, r2, r3
 8003ef6:	b2db      	uxtb	r3, r3
}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b004      	add	sp, #16
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e044      	b.n	8003f9c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d107      	bne.n	8003f2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2274      	movs	r2, #116	; 0x74
 8003f1e:	2100      	movs	r1, #0
 8003f20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7fd f9d9 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2224      	movs	r2, #36	; 0x24
 8003f2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	438a      	bics	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 f8d8 	bl	80040f8 <UART_SetConfig>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e024      	b.n	8003f9c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f000 fb2d 	bl	80045bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	490d      	ldr	r1, [pc, #52]	; (8003fa4 <HAL_UART_Init+0xa4>)
 8003f6e:	400a      	ands	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	212a      	movs	r1, #42	; 0x2a
 8003f7e:	438a      	bics	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f000 fbc5 	bl	8004724 <UART_CheckIdleState>
 8003f9a:	0003      	movs	r3, r0
}
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b002      	add	sp, #8
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	ffffb7ff 	.word	0xffffb7ff

08003fa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	1dbb      	adds	r3, r7, #6
 8003fb6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d000      	beq.n	8003fc2 <HAL_UART_Transmit+0x1a>
 8003fc0:	e095      	b.n	80040ee <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_UART_Transmit+0x28>
 8003fc8:	1dbb      	adds	r3, r7, #6
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e08d      	b.n	80040f0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	015b      	lsls	r3, r3, #5
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d109      	bne.n	8003ff4 <HAL_UART_Transmit+0x4c>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2201      	movs	r2, #1
 8003fec:	4013      	ands	r3, r2
 8003fee:	d001      	beq.n	8003ff4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e07d      	b.n	80040f0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2274      	movs	r2, #116	; 0x74
 8003ff8:	5c9b      	ldrb	r3, [r3, r2]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_UART_Transmit+0x5a>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e076      	b.n	80040f0 <HAL_UART_Transmit+0x148>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2274      	movs	r2, #116	; 0x74
 8004006:	2101      	movs	r1, #1
 8004008:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2280      	movs	r2, #128	; 0x80
 800400e:	2100      	movs	r1, #0
 8004010:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2221      	movs	r2, #33	; 0x21
 8004016:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004018:	f7fd fa8a 	bl	8001530 <HAL_GetTick>
 800401c:	0003      	movs	r3, r0
 800401e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1dba      	adds	r2, r7, #6
 8004024:	2150      	movs	r1, #80	; 0x50
 8004026:	8812      	ldrh	r2, [r2, #0]
 8004028:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1dba      	adds	r2, r7, #6
 800402e:	2152      	movs	r1, #82	; 0x52
 8004030:	8812      	ldrh	r2, [r2, #0]
 8004032:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	015b      	lsls	r3, r3, #5
 800403c:	429a      	cmp	r2, r3
 800403e:	d108      	bne.n	8004052 <HAL_UART_Transmit+0xaa>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e003      	b.n	800405a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2274      	movs	r2, #116	; 0x74
 800405e:	2100      	movs	r1, #0
 8004060:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004062:	e02c      	b.n	80040be <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	0013      	movs	r3, r2
 800406e:	2200      	movs	r2, #0
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	f000 fb9f 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004076:	1e03      	subs	r3, r0, #0
 8004078:	d001      	beq.n	800407e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e038      	b.n	80040f0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10b      	bne.n	800409c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	001a      	movs	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	05d2      	lsls	r2, r2, #23
 8004090:	0dd2      	lsrs	r2, r2, #23
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	3302      	adds	r3, #2
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	e007      	b.n	80040ac <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	781a      	ldrb	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3301      	adds	r3, #1
 80040aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2252      	movs	r2, #82	; 0x52
 80040b0:	5a9b      	ldrh	r3, [r3, r2]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b299      	uxth	r1, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2252      	movs	r2, #82	; 0x52
 80040bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2252      	movs	r2, #82	; 0x52
 80040c2:	5a9b      	ldrh	r3, [r3, r2]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1cc      	bne.n	8004064 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	0013      	movs	r3, r2
 80040d4:	2200      	movs	r2, #0
 80040d6:	2140      	movs	r1, #64	; 0x40
 80040d8:	f000 fb6c 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 80040dc:	1e03      	subs	r3, r0, #0
 80040de:	d001      	beq.n	80040e4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e005      	b.n	80040f0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	e000      	b.n	80040f0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80040ee:	2302      	movs	r3, #2
  }
}
 80040f0:	0018      	movs	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b008      	add	sp, #32
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f8:	b5b0      	push	{r4, r5, r7, lr}
 80040fa:	b08e      	sub	sp, #56	; 0x38
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004100:	231a      	movs	r3, #26
 8004102:	2218      	movs	r2, #24
 8004104:	4694      	mov	ip, r2
 8004106:	44bc      	add	ip, r7
 8004108:	4463      	add	r3, ip
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	431a      	orrs	r2, r3
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	431a      	orrs	r2, r3
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	4313      	orrs	r3, r2
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4abc      	ldr	r2, [pc, #752]	; (8004420 <UART_SetConfig+0x328>)
 800412e:	4013      	ands	r3, r2
 8004130:	0019      	movs	r1, r3
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4ab8      	ldr	r2, [pc, #736]	; (8004424 <UART_SetConfig+0x32c>)
 8004144:	4013      	ands	r3, r2
 8004146:	0019      	movs	r1, r3
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4ab2      	ldr	r2, [pc, #712]	; (8004428 <UART_SetConfig+0x330>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800416a:	4313      	orrs	r3, r2
 800416c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4aad      	ldr	r2, [pc, #692]	; (800442c <UART_SetConfig+0x334>)
 8004176:	4013      	ands	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4aa9      	ldr	r2, [pc, #676]	; (8004430 <UART_SetConfig+0x338>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d136      	bne.n	80041fc <UART_SetConfig+0x104>
 800418e:	4ba9      	ldr	r3, [pc, #676]	; (8004434 <UART_SetConfig+0x33c>)
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	220c      	movs	r2, #12
 8004194:	4013      	ands	r3, r2
 8004196:	2b0c      	cmp	r3, #12
 8004198:	d020      	beq.n	80041dc <UART_SetConfig+0xe4>
 800419a:	d827      	bhi.n	80041ec <UART_SetConfig+0xf4>
 800419c:	2b08      	cmp	r3, #8
 800419e:	d00d      	beq.n	80041bc <UART_SetConfig+0xc4>
 80041a0:	d824      	bhi.n	80041ec <UART_SetConfig+0xf4>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <UART_SetConfig+0xb4>
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d010      	beq.n	80041cc <UART_SetConfig+0xd4>
 80041aa:	e01f      	b.n	80041ec <UART_SetConfig+0xf4>
 80041ac:	231b      	movs	r3, #27
 80041ae:	2218      	movs	r2, #24
 80041b0:	4694      	mov	ip, r2
 80041b2:	44bc      	add	ip, r7
 80041b4:	4463      	add	r3, ip
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	e06f      	b.n	800429c <UART_SetConfig+0x1a4>
 80041bc:	231b      	movs	r3, #27
 80041be:	2218      	movs	r2, #24
 80041c0:	4694      	mov	ip, r2
 80041c2:	44bc      	add	ip, r7
 80041c4:	4463      	add	r3, ip
 80041c6:	2202      	movs	r2, #2
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	e067      	b.n	800429c <UART_SetConfig+0x1a4>
 80041cc:	231b      	movs	r3, #27
 80041ce:	2218      	movs	r2, #24
 80041d0:	4694      	mov	ip, r2
 80041d2:	44bc      	add	ip, r7
 80041d4:	4463      	add	r3, ip
 80041d6:	2204      	movs	r2, #4
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	e05f      	b.n	800429c <UART_SetConfig+0x1a4>
 80041dc:	231b      	movs	r3, #27
 80041de:	2218      	movs	r2, #24
 80041e0:	4694      	mov	ip, r2
 80041e2:	44bc      	add	ip, r7
 80041e4:	4463      	add	r3, ip
 80041e6:	2208      	movs	r2, #8
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	e057      	b.n	800429c <UART_SetConfig+0x1a4>
 80041ec:	231b      	movs	r3, #27
 80041ee:	2218      	movs	r2, #24
 80041f0:	4694      	mov	ip, r2
 80041f2:	44bc      	add	ip, r7
 80041f4:	4463      	add	r3, ip
 80041f6:	2210      	movs	r2, #16
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	e04f      	b.n	800429c <UART_SetConfig+0x1a4>
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a89      	ldr	r2, [pc, #548]	; (8004428 <UART_SetConfig+0x330>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d143      	bne.n	800428e <UART_SetConfig+0x196>
 8004206:	4b8b      	ldr	r3, [pc, #556]	; (8004434 <UART_SetConfig+0x33c>)
 8004208:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800420a:	23c0      	movs	r3, #192	; 0xc0
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	4013      	ands	r3, r2
 8004210:	22c0      	movs	r2, #192	; 0xc0
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	4293      	cmp	r3, r2
 8004216:	d02a      	beq.n	800426e <UART_SetConfig+0x176>
 8004218:	22c0      	movs	r2, #192	; 0xc0
 800421a:	0112      	lsls	r2, r2, #4
 800421c:	4293      	cmp	r3, r2
 800421e:	d82e      	bhi.n	800427e <UART_SetConfig+0x186>
 8004220:	2280      	movs	r2, #128	; 0x80
 8004222:	0112      	lsls	r2, r2, #4
 8004224:	4293      	cmp	r3, r2
 8004226:	d012      	beq.n	800424e <UART_SetConfig+0x156>
 8004228:	2280      	movs	r2, #128	; 0x80
 800422a:	0112      	lsls	r2, r2, #4
 800422c:	4293      	cmp	r3, r2
 800422e:	d826      	bhi.n	800427e <UART_SetConfig+0x186>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <UART_SetConfig+0x146>
 8004234:	2280      	movs	r2, #128	; 0x80
 8004236:	00d2      	lsls	r2, r2, #3
 8004238:	4293      	cmp	r3, r2
 800423a:	d010      	beq.n	800425e <UART_SetConfig+0x166>
 800423c:	e01f      	b.n	800427e <UART_SetConfig+0x186>
 800423e:	231b      	movs	r3, #27
 8004240:	2218      	movs	r2, #24
 8004242:	4694      	mov	ip, r2
 8004244:	44bc      	add	ip, r7
 8004246:	4463      	add	r3, ip
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	e026      	b.n	800429c <UART_SetConfig+0x1a4>
 800424e:	231b      	movs	r3, #27
 8004250:	2218      	movs	r2, #24
 8004252:	4694      	mov	ip, r2
 8004254:	44bc      	add	ip, r7
 8004256:	4463      	add	r3, ip
 8004258:	2202      	movs	r2, #2
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	e01e      	b.n	800429c <UART_SetConfig+0x1a4>
 800425e:	231b      	movs	r3, #27
 8004260:	2218      	movs	r2, #24
 8004262:	4694      	mov	ip, r2
 8004264:	44bc      	add	ip, r7
 8004266:	4463      	add	r3, ip
 8004268:	2204      	movs	r2, #4
 800426a:	701a      	strb	r2, [r3, #0]
 800426c:	e016      	b.n	800429c <UART_SetConfig+0x1a4>
 800426e:	231b      	movs	r3, #27
 8004270:	2218      	movs	r2, #24
 8004272:	4694      	mov	ip, r2
 8004274:	44bc      	add	ip, r7
 8004276:	4463      	add	r3, ip
 8004278:	2208      	movs	r2, #8
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	e00e      	b.n	800429c <UART_SetConfig+0x1a4>
 800427e:	231b      	movs	r3, #27
 8004280:	2218      	movs	r2, #24
 8004282:	4694      	mov	ip, r2
 8004284:	44bc      	add	ip, r7
 8004286:	4463      	add	r3, ip
 8004288:	2210      	movs	r2, #16
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e006      	b.n	800429c <UART_SetConfig+0x1a4>
 800428e:	231b      	movs	r3, #27
 8004290:	2218      	movs	r2, #24
 8004292:	4694      	mov	ip, r2
 8004294:	44bc      	add	ip, r7
 8004296:	4463      	add	r3, ip
 8004298:	2210      	movs	r2, #16
 800429a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a61      	ldr	r2, [pc, #388]	; (8004428 <UART_SetConfig+0x330>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d000      	beq.n	80042a8 <UART_SetConfig+0x1b0>
 80042a6:	e088      	b.n	80043ba <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042a8:	231b      	movs	r3, #27
 80042aa:	2218      	movs	r2, #24
 80042ac:	4694      	mov	ip, r2
 80042ae:	44bc      	add	ip, r7
 80042b0:	4463      	add	r3, ip
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d01d      	beq.n	80042f4 <UART_SetConfig+0x1fc>
 80042b8:	dc20      	bgt.n	80042fc <UART_SetConfig+0x204>
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d015      	beq.n	80042ea <UART_SetConfig+0x1f2>
 80042be:	dc1d      	bgt.n	80042fc <UART_SetConfig+0x204>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <UART_SetConfig+0x1d2>
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d005      	beq.n	80042d4 <UART_SetConfig+0x1dc>
 80042c8:	e018      	b.n	80042fc <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ca:	f7ff f977 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 80042ce:	0003      	movs	r3, r0
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042d2:	e01d      	b.n	8004310 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042d4:	4b57      	ldr	r3, [pc, #348]	; (8004434 <UART_SetConfig+0x33c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2210      	movs	r2, #16
 80042da:	4013      	ands	r3, r2
 80042dc:	d002      	beq.n	80042e4 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80042de:	4b56      	ldr	r3, [pc, #344]	; (8004438 <UART_SetConfig+0x340>)
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042e2:	e015      	b.n	8004310 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 80042e4:	4b55      	ldr	r3, [pc, #340]	; (800443c <UART_SetConfig+0x344>)
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042e8:	e012      	b.n	8004310 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ea:	f7ff f8b7 	bl	800345c <HAL_RCC_GetSysClockFreq>
 80042ee:	0003      	movs	r3, r0
 80042f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042f2:	e00d      	b.n	8004310 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042fa:	e009      	b.n	8004310 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004300:	231a      	movs	r3, #26
 8004302:	2218      	movs	r2, #24
 8004304:	4694      	mov	ip, r2
 8004306:	44bc      	add	ip, r7
 8004308:	4463      	add	r3, ip
 800430a:	2201      	movs	r2, #1
 800430c:	701a      	strb	r2, [r3, #0]
        break;
 800430e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d100      	bne.n	8004318 <UART_SetConfig+0x220>
 8004316:	e139      	b.n	800458c <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	0013      	movs	r3, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	189b      	adds	r3, r3, r2
 8004322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004324:	429a      	cmp	r2, r3
 8004326:	d305      	bcc.n	8004334 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800432e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004330:	429a      	cmp	r2, r3
 8004332:	d907      	bls.n	8004344 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8004334:	231a      	movs	r3, #26
 8004336:	2218      	movs	r2, #24
 8004338:	4694      	mov	ip, r2
 800433a:	44bc      	add	ip, r7
 800433c:	4463      	add	r3, ip
 800433e:	2201      	movs	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	e123      	b.n	800458c <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	6939      	ldr	r1, [r7, #16]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	000b      	movs	r3, r1
 8004352:	0e1b      	lsrs	r3, r3, #24
 8004354:	0010      	movs	r0, r2
 8004356:	0205      	lsls	r5, r0, #8
 8004358:	431d      	orrs	r5, r3
 800435a:	000b      	movs	r3, r1
 800435c:	021c      	lsls	r4, r3, #8
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68b8      	ldr	r0, [r7, #8]
 800436c:	68f9      	ldr	r1, [r7, #12]
 800436e:	1900      	adds	r0, r0, r4
 8004370:	4169      	adcs	r1, r5
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	2300      	movs	r3, #0
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f7fb ff92 	bl	80002a8 <__aeabi_uldivmod>
 8004384:	0002      	movs	r2, r0
 8004386:	000b      	movs	r3, r1
 8004388:	0013      	movs	r3, r2
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800438c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800438e:	23c0      	movs	r3, #192	; 0xc0
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	429a      	cmp	r2, r3
 8004394:	d309      	bcc.n	80043aa <UART_SetConfig+0x2b2>
 8004396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	035b      	lsls	r3, r3, #13
 800439c:	429a      	cmp	r2, r3
 800439e:	d204      	bcs.n	80043aa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	e0f0      	b.n	800458c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80043aa:	231a      	movs	r3, #26
 80043ac:	2218      	movs	r2, #24
 80043ae:	4694      	mov	ip, r2
 80043b0:	44bc      	add	ip, r7
 80043b2:	4463      	add	r3, ip
 80043b4:	2201      	movs	r2, #1
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	e0e8      	b.n	800458c <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	69da      	ldr	r2, [r3, #28]
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d000      	beq.n	80043c8 <UART_SetConfig+0x2d0>
 80043c6:	e087      	b.n	80044d8 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 80043c8:	231b      	movs	r3, #27
 80043ca:	2218      	movs	r2, #24
 80043cc:	4694      	mov	ip, r2
 80043ce:	44bc      	add	ip, r7
 80043d0:	4463      	add	r3, ip
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d835      	bhi.n	8004444 <UART_SetConfig+0x34c>
 80043d8:	009a      	lsls	r2, r3, #2
 80043da:	4b19      	ldr	r3, [pc, #100]	; (8004440 <UART_SetConfig+0x348>)
 80043dc:	18d3      	adds	r3, r2, r3
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e2:	f7ff f8eb 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 80043e6:	0003      	movs	r3, r0
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043ea:	e035      	b.n	8004458 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043ec:	f7ff f8fc 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 80043f0:	0003      	movs	r3, r0
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043f4:	e030      	b.n	8004458 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043f6:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <UART_SetConfig+0x33c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2210      	movs	r2, #16
 80043fc:	4013      	ands	r3, r2
 80043fe:	d002      	beq.n	8004406 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004400:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <UART_SetConfig+0x340>)
 8004402:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004404:	e028      	b.n	8004458 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8004406:	4b0d      	ldr	r3, [pc, #52]	; (800443c <UART_SetConfig+0x344>)
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800440a:	e025      	b.n	8004458 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800440c:	f7ff f826 	bl	800345c <HAL_RCC_GetSysClockFreq>
 8004410:	0003      	movs	r3, r0
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004414:	e020      	b.n	8004458 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004416:	2380      	movs	r3, #128	; 0x80
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800441c:	e01c      	b.n	8004458 <UART_SetConfig+0x360>
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	efff69f3 	.word	0xefff69f3
 8004424:	ffffcfff 	.word	0xffffcfff
 8004428:	40004800 	.word	0x40004800
 800442c:	fffff4ff 	.word	0xfffff4ff
 8004430:	40004400 	.word	0x40004400
 8004434:	40021000 	.word	0x40021000
 8004438:	003d0900 	.word	0x003d0900
 800443c:	00f42400 	.word	0x00f42400
 8004440:	08005204 	.word	0x08005204
      default:
        pclk = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004448:	231a      	movs	r3, #26
 800444a:	2218      	movs	r2, #24
 800444c:	4694      	mov	ip, r2
 800444e:	44bc      	add	ip, r7
 8004450:	4463      	add	r3, ip
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]
        break;
 8004456:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d100      	bne.n	8004460 <UART_SetConfig+0x368>
 800445e:	e095      	b.n	800458c <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004462:	005a      	lsls	r2, r3, #1
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	18d2      	adds	r2, r2, r3
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	0019      	movs	r1, r3
 8004472:	0010      	movs	r0, r2
 8004474:	f7fb fe52 	bl	800011c <__udivsi3>
 8004478:	0003      	movs	r3, r0
 800447a:	b29b      	uxth	r3, r3
 800447c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004480:	2b0f      	cmp	r3, #15
 8004482:	d921      	bls.n	80044c8 <UART_SetConfig+0x3d0>
 8004484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004486:	2380      	movs	r3, #128	; 0x80
 8004488:	025b      	lsls	r3, r3, #9
 800448a:	429a      	cmp	r2, r3
 800448c:	d21c      	bcs.n	80044c8 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	b29a      	uxth	r2, r3
 8004492:	200e      	movs	r0, #14
 8004494:	2418      	movs	r4, #24
 8004496:	193b      	adds	r3, r7, r4
 8004498:	181b      	adds	r3, r3, r0
 800449a:	210f      	movs	r1, #15
 800449c:	438a      	bics	r2, r1
 800449e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2207      	movs	r2, #7
 80044a8:	4013      	ands	r3, r2
 80044aa:	b299      	uxth	r1, r3
 80044ac:	193b      	adds	r3, r7, r4
 80044ae:	181b      	adds	r3, r3, r0
 80044b0:	193a      	adds	r2, r7, r4
 80044b2:	1812      	adds	r2, r2, r0
 80044b4:	8812      	ldrh	r2, [r2, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	193a      	adds	r2, r7, r4
 80044c0:	1812      	adds	r2, r2, r0
 80044c2:	8812      	ldrh	r2, [r2, #0]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	e061      	b.n	800458c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80044c8:	231a      	movs	r3, #26
 80044ca:	2218      	movs	r2, #24
 80044cc:	4694      	mov	ip, r2
 80044ce:	44bc      	add	ip, r7
 80044d0:	4463      	add	r3, ip
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	e059      	b.n	800458c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044d8:	231b      	movs	r3, #27
 80044da:	2218      	movs	r2, #24
 80044dc:	4694      	mov	ip, r2
 80044de:	44bc      	add	ip, r7
 80044e0:	4463      	add	r3, ip
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d822      	bhi.n	800452e <UART_SetConfig+0x436>
 80044e8:	009a      	lsls	r2, r3, #2
 80044ea:	4b30      	ldr	r3, [pc, #192]	; (80045ac <UART_SetConfig+0x4b4>)
 80044ec:	18d3      	adds	r3, r2, r3
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f2:	f7ff f863 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 80044f6:	0003      	movs	r3, r0
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044fa:	e022      	b.n	8004542 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044fc:	f7ff f874 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 8004500:	0003      	movs	r3, r0
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004504:	e01d      	b.n	8004542 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <UART_SetConfig+0x4b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2210      	movs	r2, #16
 800450c:	4013      	ands	r3, r2
 800450e:	d002      	beq.n	8004516 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004510:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <UART_SetConfig+0x4bc>)
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004514:	e015      	b.n	8004542 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8004516:	4b28      	ldr	r3, [pc, #160]	; (80045b8 <UART_SetConfig+0x4c0>)
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800451a:	e012      	b.n	8004542 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451c:	f7fe ff9e 	bl	800345c <HAL_RCC_GetSysClockFreq>
 8004520:	0003      	movs	r3, r0
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004524:	e00d      	b.n	8004542 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800452c:	e009      	b.n	8004542 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004532:	231a      	movs	r3, #26
 8004534:	2218      	movs	r2, #24
 8004536:	4694      	mov	ip, r2
 8004538:	44bc      	add	ip, r7
 800453a:	4463      	add	r3, ip
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
        break;
 8004540:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d021      	beq.n	800458c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	085a      	lsrs	r2, r3, #1
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	18d2      	adds	r2, r2, r3
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	0019      	movs	r1, r3
 8004558:	0010      	movs	r0, r2
 800455a:	f7fb fddf 	bl	800011c <__udivsi3>
 800455e:	0003      	movs	r3, r0
 8004560:	b29b      	uxth	r3, r3
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	2b0f      	cmp	r3, #15
 8004568:	d909      	bls.n	800457e <UART_SetConfig+0x486>
 800456a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	025b      	lsls	r3, r3, #9
 8004570:	429a      	cmp	r2, r3
 8004572:	d204      	bcs.n	800457e <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800457a:	60da      	str	r2, [r3, #12]
 800457c:	e006      	b.n	800458c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800457e:	231a      	movs	r3, #26
 8004580:	2218      	movs	r2, #24
 8004582:	4694      	mov	ip, r2
 8004584:	44bc      	add	ip, r7
 8004586:	4463      	add	r3, ip
 8004588:	2201      	movs	r2, #1
 800458a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2200      	movs	r2, #0
 8004590:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	2200      	movs	r2, #0
 8004596:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004598:	231a      	movs	r3, #26
 800459a:	2218      	movs	r2, #24
 800459c:	4694      	mov	ip, r2
 800459e:	44bc      	add	ip, r7
 80045a0:	4463      	add	r3, ip
 80045a2:	781b      	ldrb	r3, [r3, #0]
}
 80045a4:	0018      	movs	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b00e      	add	sp, #56	; 0x38
 80045aa:	bdb0      	pop	{r4, r5, r7, pc}
 80045ac:	08005228 	.word	0x08005228
 80045b0:	40021000 	.word	0x40021000
 80045b4:	003d0900 	.word	0x003d0900
 80045b8:	00f42400 	.word	0x00f42400

080045bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	2201      	movs	r2, #1
 80045ca:	4013      	ands	r3, r2
 80045cc:	d00b      	beq.n	80045e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4a4a      	ldr	r2, [pc, #296]	; (8004700 <UART_AdvFeatureConfig+0x144>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	0019      	movs	r1, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2202      	movs	r2, #2
 80045ec:	4013      	ands	r3, r2
 80045ee:	d00b      	beq.n	8004608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4a43      	ldr	r2, [pc, #268]	; (8004704 <UART_AdvFeatureConfig+0x148>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	0019      	movs	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	2204      	movs	r2, #4
 800460e:	4013      	ands	r3, r2
 8004610:	d00b      	beq.n	800462a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4a3b      	ldr	r2, [pc, #236]	; (8004708 <UART_AdvFeatureConfig+0x14c>)
 800461a:	4013      	ands	r3, r2
 800461c:	0019      	movs	r1, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2208      	movs	r2, #8
 8004630:	4013      	ands	r3, r2
 8004632:	d00b      	beq.n	800464c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	4a34      	ldr	r2, [pc, #208]	; (800470c <UART_AdvFeatureConfig+0x150>)
 800463c:	4013      	ands	r3, r2
 800463e:	0019      	movs	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	2210      	movs	r2, #16
 8004652:	4013      	ands	r3, r2
 8004654:	d00b      	beq.n	800466e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a2c      	ldr	r2, [pc, #176]	; (8004710 <UART_AdvFeatureConfig+0x154>)
 800465e:	4013      	ands	r3, r2
 8004660:	0019      	movs	r1, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	2220      	movs	r2, #32
 8004674:	4013      	ands	r3, r2
 8004676:	d00b      	beq.n	8004690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	4a25      	ldr	r2, [pc, #148]	; (8004714 <UART_AdvFeatureConfig+0x158>)
 8004680:	4013      	ands	r3, r2
 8004682:	0019      	movs	r1, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	2240      	movs	r2, #64	; 0x40
 8004696:	4013      	ands	r3, r2
 8004698:	d01d      	beq.n	80046d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <UART_AdvFeatureConfig+0x15c>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	0019      	movs	r1, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	035b      	lsls	r3, r3, #13
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d10b      	bne.n	80046d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4a15      	ldr	r2, [pc, #84]	; (800471c <UART_AdvFeatureConfig+0x160>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	2280      	movs	r2, #128	; 0x80
 80046dc:	4013      	ands	r3, r2
 80046de:	d00b      	beq.n	80046f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4a0e      	ldr	r2, [pc, #56]	; (8004720 <UART_AdvFeatureConfig+0x164>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	0019      	movs	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	605a      	str	r2, [r3, #4]
  }
}
 80046f8:	46c0      	nop			; (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	fffdffff 	.word	0xfffdffff
 8004704:	fffeffff 	.word	0xfffeffff
 8004708:	fffbffff 	.word	0xfffbffff
 800470c:	ffff7fff 	.word	0xffff7fff
 8004710:	ffffefff 	.word	0xffffefff
 8004714:	ffffdfff 	.word	0xffffdfff
 8004718:	ffefffff 	.word	0xffefffff
 800471c:	ff9fffff 	.word	0xff9fffff
 8004720:	fff7ffff 	.word	0xfff7ffff

08004724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af02      	add	r7, sp, #8
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2280      	movs	r2, #128	; 0x80
 8004730:	2100      	movs	r1, #0
 8004732:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004734:	f7fc fefc 	bl	8001530 <HAL_GetTick>
 8004738:	0003      	movs	r3, r0
 800473a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2208      	movs	r2, #8
 8004744:	4013      	ands	r3, r2
 8004746:	2b08      	cmp	r3, #8
 8004748:	d10c      	bne.n	8004764 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2280      	movs	r2, #128	; 0x80
 800474e:	0391      	lsls	r1, r2, #14
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <UART_CheckIdleState+0x8c>)
 8004754:	9200      	str	r2, [sp, #0]
 8004756:	2200      	movs	r2, #0
 8004758:	f000 f82c 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475c:	1e03      	subs	r3, r0, #0
 800475e:	d001      	beq.n	8004764 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e021      	b.n	80047a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2204      	movs	r2, #4
 800476c:	4013      	ands	r3, r2
 800476e:	2b04      	cmp	r3, #4
 8004770:	d10c      	bne.n	800478c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2280      	movs	r2, #128	; 0x80
 8004776:	03d1      	lsls	r1, r2, #15
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	4a0d      	ldr	r2, [pc, #52]	; (80047b0 <UART_CheckIdleState+0x8c>)
 800477c:	9200      	str	r2, [sp, #0]
 800477e:	2200      	movs	r2, #0
 8004780:	f000 f818 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004784:	1e03      	subs	r3, r0, #0
 8004786:	d001      	beq.n	800478c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e00d      	b.n	80047a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2274      	movs	r2, #116	; 0x74
 80047a2:	2100      	movs	r1, #0
 80047a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	0018      	movs	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b004      	add	sp, #16
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	01ffffff 	.word	0x01ffffff

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	1dfb      	adds	r3, r7, #7
 80047c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e05e      	b.n	8004884 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	3301      	adds	r3, #1
 80047ca:	d05b      	beq.n	8004884 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047cc:	f7fc feb0 	bl	8001530 <HAL_GetTick>
 80047d0:	0002      	movs	r2, r0
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d302      	bcc.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d11b      	bne.n	800481a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	492f      	ldr	r1, [pc, #188]	; (80048ac <UART_WaitOnFlagUntilTimeout+0xf8>)
 80047ee:	400a      	ands	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	438a      	bics	r2, r1
 8004800:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2274      	movs	r2, #116	; 0x74
 8004812:	2100      	movs	r1, #0
 8004814:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e044      	b.n	80048a4 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2204      	movs	r2, #4
 8004822:	4013      	ands	r3, r2
 8004824:	d02e      	beq.n	8004884 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	401a      	ands	r2, r3
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	429a      	cmp	r2, r3
 8004838:	d124      	bne.n	8004884 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2280      	movs	r2, #128	; 0x80
 8004840:	0112      	lsls	r2, r2, #4
 8004842:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4917      	ldr	r1, [pc, #92]	; (80048ac <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004850:	400a      	ands	r2, r1
 8004852:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2101      	movs	r1, #1
 8004860:	438a      	bics	r2, r1
 8004862:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2280      	movs	r2, #128	; 0x80
 8004874:	2120      	movs	r1, #32
 8004876:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2274      	movs	r2, #116	; 0x74
 800487c:	2100      	movs	r1, #0
 800487e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e00f      	b.n	80048a4 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	425a      	negs	r2, r3
 8004894:	4153      	adcs	r3, r2
 8004896:	b2db      	uxtb	r3, r3
 8004898:	001a      	movs	r2, r3
 800489a:	1dfb      	adds	r3, r7, #7
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d091      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b004      	add	sp, #16
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	fffffe5f 	.word	0xfffffe5f

080048b0 <__errno>:
 80048b0:	4b01      	ldr	r3, [pc, #4]	; (80048b8 <__errno+0x8>)
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	4770      	bx	lr
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	2000000c 	.word	0x2000000c

080048bc <__libc_init_array>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	2600      	movs	r6, #0
 80048c0:	4d0c      	ldr	r5, [pc, #48]	; (80048f4 <__libc_init_array+0x38>)
 80048c2:	4c0d      	ldr	r4, [pc, #52]	; (80048f8 <__libc_init_array+0x3c>)
 80048c4:	1b64      	subs	r4, r4, r5
 80048c6:	10a4      	asrs	r4, r4, #2
 80048c8:	42a6      	cmp	r6, r4
 80048ca:	d109      	bne.n	80048e0 <__libc_init_array+0x24>
 80048cc:	2600      	movs	r6, #0
 80048ce:	f000 fc47 	bl	8005160 <_init>
 80048d2:	4d0a      	ldr	r5, [pc, #40]	; (80048fc <__libc_init_array+0x40>)
 80048d4:	4c0a      	ldr	r4, [pc, #40]	; (8004900 <__libc_init_array+0x44>)
 80048d6:	1b64      	subs	r4, r4, r5
 80048d8:	10a4      	asrs	r4, r4, #2
 80048da:	42a6      	cmp	r6, r4
 80048dc:	d105      	bne.n	80048ea <__libc_init_array+0x2e>
 80048de:	bd70      	pop	{r4, r5, r6, pc}
 80048e0:	00b3      	lsls	r3, r6, #2
 80048e2:	58eb      	ldr	r3, [r5, r3]
 80048e4:	4798      	blx	r3
 80048e6:	3601      	adds	r6, #1
 80048e8:	e7ee      	b.n	80048c8 <__libc_init_array+0xc>
 80048ea:	00b3      	lsls	r3, r6, #2
 80048ec:	58eb      	ldr	r3, [r5, r3]
 80048ee:	4798      	blx	r3
 80048f0:	3601      	adds	r6, #1
 80048f2:	e7f2      	b.n	80048da <__libc_init_array+0x1e>
 80048f4:	08005288 	.word	0x08005288
 80048f8:	08005288 	.word	0x08005288
 80048fc:	08005288 	.word	0x08005288
 8004900:	0800528c 	.word	0x0800528c

08004904 <memset>:
 8004904:	0003      	movs	r3, r0
 8004906:	1882      	adds	r2, r0, r2
 8004908:	4293      	cmp	r3, r2
 800490a:	d100      	bne.n	800490e <memset+0xa>
 800490c:	4770      	bx	lr
 800490e:	7019      	strb	r1, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	e7f9      	b.n	8004908 <memset+0x4>

08004914 <siprintf>:
 8004914:	b40e      	push	{r1, r2, r3}
 8004916:	b500      	push	{lr}
 8004918:	490b      	ldr	r1, [pc, #44]	; (8004948 <siprintf+0x34>)
 800491a:	b09c      	sub	sp, #112	; 0x70
 800491c:	ab1d      	add	r3, sp, #116	; 0x74
 800491e:	9002      	str	r0, [sp, #8]
 8004920:	9006      	str	r0, [sp, #24]
 8004922:	9107      	str	r1, [sp, #28]
 8004924:	9104      	str	r1, [sp, #16]
 8004926:	4809      	ldr	r0, [pc, #36]	; (800494c <siprintf+0x38>)
 8004928:	4909      	ldr	r1, [pc, #36]	; (8004950 <siprintf+0x3c>)
 800492a:	cb04      	ldmia	r3!, {r2}
 800492c:	9105      	str	r1, [sp, #20]
 800492e:	6800      	ldr	r0, [r0, #0]
 8004930:	a902      	add	r1, sp, #8
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	f000 f870 	bl	8004a18 <_svfiprintf_r>
 8004938:	2300      	movs	r3, #0
 800493a:	9a02      	ldr	r2, [sp, #8]
 800493c:	7013      	strb	r3, [r2, #0]
 800493e:	b01c      	add	sp, #112	; 0x70
 8004940:	bc08      	pop	{r3}
 8004942:	b003      	add	sp, #12
 8004944:	4718      	bx	r3
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	7fffffff 	.word	0x7fffffff
 800494c:	2000000c 	.word	0x2000000c
 8004950:	ffff0208 	.word	0xffff0208

08004954 <__ssputs_r>:
 8004954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004956:	688e      	ldr	r6, [r1, #8]
 8004958:	b085      	sub	sp, #20
 800495a:	0007      	movs	r7, r0
 800495c:	000c      	movs	r4, r1
 800495e:	9203      	str	r2, [sp, #12]
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	429e      	cmp	r6, r3
 8004964:	d83c      	bhi.n	80049e0 <__ssputs_r+0x8c>
 8004966:	2390      	movs	r3, #144	; 0x90
 8004968:	898a      	ldrh	r2, [r1, #12]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	421a      	tst	r2, r3
 800496e:	d034      	beq.n	80049da <__ssputs_r+0x86>
 8004970:	2503      	movs	r5, #3
 8004972:	6909      	ldr	r1, [r1, #16]
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	1a5b      	subs	r3, r3, r1
 8004978:	9302      	str	r3, [sp, #8]
 800497a:	6963      	ldr	r3, [r4, #20]
 800497c:	9802      	ldr	r0, [sp, #8]
 800497e:	435d      	muls	r5, r3
 8004980:	0feb      	lsrs	r3, r5, #31
 8004982:	195d      	adds	r5, r3, r5
 8004984:	9b01      	ldr	r3, [sp, #4]
 8004986:	106d      	asrs	r5, r5, #1
 8004988:	3301      	adds	r3, #1
 800498a:	181b      	adds	r3, r3, r0
 800498c:	42ab      	cmp	r3, r5
 800498e:	d900      	bls.n	8004992 <__ssputs_r+0x3e>
 8004990:	001d      	movs	r5, r3
 8004992:	0553      	lsls	r3, r2, #21
 8004994:	d532      	bpl.n	80049fc <__ssputs_r+0xa8>
 8004996:	0029      	movs	r1, r5
 8004998:	0038      	movs	r0, r7
 800499a:	f000 fb31 	bl	8005000 <_malloc_r>
 800499e:	1e06      	subs	r6, r0, #0
 80049a0:	d109      	bne.n	80049b6 <__ssputs_r+0x62>
 80049a2:	230c      	movs	r3, #12
 80049a4:	603b      	str	r3, [r7, #0]
 80049a6:	2340      	movs	r3, #64	; 0x40
 80049a8:	2001      	movs	r0, #1
 80049aa:	89a2      	ldrh	r2, [r4, #12]
 80049ac:	4240      	negs	r0, r0
 80049ae:	4313      	orrs	r3, r2
 80049b0:	81a3      	strh	r3, [r4, #12]
 80049b2:	b005      	add	sp, #20
 80049b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b6:	9a02      	ldr	r2, [sp, #8]
 80049b8:	6921      	ldr	r1, [r4, #16]
 80049ba:	f000 faba 	bl	8004f32 <memcpy>
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <__ssputs_r+0xc0>)
 80049c2:	401a      	ands	r2, r3
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	4313      	orrs	r3, r2
 80049c8:	81a3      	strh	r3, [r4, #12]
 80049ca:	9b02      	ldr	r3, [sp, #8]
 80049cc:	6126      	str	r6, [r4, #16]
 80049ce:	18f6      	adds	r6, r6, r3
 80049d0:	6026      	str	r6, [r4, #0]
 80049d2:	6165      	str	r5, [r4, #20]
 80049d4:	9e01      	ldr	r6, [sp, #4]
 80049d6:	1aed      	subs	r5, r5, r3
 80049d8:	60a5      	str	r5, [r4, #8]
 80049da:	9b01      	ldr	r3, [sp, #4]
 80049dc:	429e      	cmp	r6, r3
 80049de:	d900      	bls.n	80049e2 <__ssputs_r+0x8e>
 80049e0:	9e01      	ldr	r6, [sp, #4]
 80049e2:	0032      	movs	r2, r6
 80049e4:	9903      	ldr	r1, [sp, #12]
 80049e6:	6820      	ldr	r0, [r4, #0]
 80049e8:	f000 faac 	bl	8004f44 <memmove>
 80049ec:	68a3      	ldr	r3, [r4, #8]
 80049ee:	2000      	movs	r0, #0
 80049f0:	1b9b      	subs	r3, r3, r6
 80049f2:	60a3      	str	r3, [r4, #8]
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	199e      	adds	r6, r3, r6
 80049f8:	6026      	str	r6, [r4, #0]
 80049fa:	e7da      	b.n	80049b2 <__ssputs_r+0x5e>
 80049fc:	002a      	movs	r2, r5
 80049fe:	0038      	movs	r0, r7
 8004a00:	f000 fb5c 	bl	80050bc <_realloc_r>
 8004a04:	1e06      	subs	r6, r0, #0
 8004a06:	d1e0      	bne.n	80049ca <__ssputs_r+0x76>
 8004a08:	0038      	movs	r0, r7
 8004a0a:	6921      	ldr	r1, [r4, #16]
 8004a0c:	f000 faae 	bl	8004f6c <_free_r>
 8004a10:	e7c7      	b.n	80049a2 <__ssputs_r+0x4e>
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	fffffb7f 	.word	0xfffffb7f

08004a18 <_svfiprintf_r>:
 8004a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1a:	b0a1      	sub	sp, #132	; 0x84
 8004a1c:	9003      	str	r0, [sp, #12]
 8004a1e:	001d      	movs	r5, r3
 8004a20:	898b      	ldrh	r3, [r1, #12]
 8004a22:	000f      	movs	r7, r1
 8004a24:	0016      	movs	r6, r2
 8004a26:	061b      	lsls	r3, r3, #24
 8004a28:	d511      	bpl.n	8004a4e <_svfiprintf_r+0x36>
 8004a2a:	690b      	ldr	r3, [r1, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10e      	bne.n	8004a4e <_svfiprintf_r+0x36>
 8004a30:	2140      	movs	r1, #64	; 0x40
 8004a32:	f000 fae5 	bl	8005000 <_malloc_r>
 8004a36:	6038      	str	r0, [r7, #0]
 8004a38:	6138      	str	r0, [r7, #16]
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d105      	bne.n	8004a4a <_svfiprintf_r+0x32>
 8004a3e:	230c      	movs	r3, #12
 8004a40:	9a03      	ldr	r2, [sp, #12]
 8004a42:	3801      	subs	r0, #1
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	b021      	add	sp, #132	; 0x84
 8004a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a4a:	2340      	movs	r3, #64	; 0x40
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	ac08      	add	r4, sp, #32
 8004a52:	6163      	str	r3, [r4, #20]
 8004a54:	3320      	adds	r3, #32
 8004a56:	7663      	strb	r3, [r4, #25]
 8004a58:	3310      	adds	r3, #16
 8004a5a:	76a3      	strb	r3, [r4, #26]
 8004a5c:	9507      	str	r5, [sp, #28]
 8004a5e:	0035      	movs	r5, r6
 8004a60:	782b      	ldrb	r3, [r5, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <_svfiprintf_r+0x52>
 8004a66:	2b25      	cmp	r3, #37	; 0x25
 8004a68:	d147      	bne.n	8004afa <_svfiprintf_r+0xe2>
 8004a6a:	1bab      	subs	r3, r5, r6
 8004a6c:	9305      	str	r3, [sp, #20]
 8004a6e:	42b5      	cmp	r5, r6
 8004a70:	d00c      	beq.n	8004a8c <_svfiprintf_r+0x74>
 8004a72:	0032      	movs	r2, r6
 8004a74:	0039      	movs	r1, r7
 8004a76:	9803      	ldr	r0, [sp, #12]
 8004a78:	f7ff ff6c 	bl	8004954 <__ssputs_r>
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d100      	bne.n	8004a82 <_svfiprintf_r+0x6a>
 8004a80:	e0ae      	b.n	8004be0 <_svfiprintf_r+0x1c8>
 8004a82:	6962      	ldr	r2, [r4, #20]
 8004a84:	9b05      	ldr	r3, [sp, #20]
 8004a86:	4694      	mov	ip, r2
 8004a88:	4463      	add	r3, ip
 8004a8a:	6163      	str	r3, [r4, #20]
 8004a8c:	782b      	ldrb	r3, [r5, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d100      	bne.n	8004a94 <_svfiprintf_r+0x7c>
 8004a92:	e0a5      	b.n	8004be0 <_svfiprintf_r+0x1c8>
 8004a94:	2201      	movs	r2, #1
 8004a96:	2300      	movs	r3, #0
 8004a98:	4252      	negs	r2, r2
 8004a9a:	6062      	str	r2, [r4, #4]
 8004a9c:	a904      	add	r1, sp, #16
 8004a9e:	3254      	adds	r2, #84	; 0x54
 8004aa0:	1852      	adds	r2, r2, r1
 8004aa2:	1c6e      	adds	r6, r5, #1
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	60e3      	str	r3, [r4, #12]
 8004aa8:	60a3      	str	r3, [r4, #8]
 8004aaa:	7013      	strb	r3, [r2, #0]
 8004aac:	65a3      	str	r3, [r4, #88]	; 0x58
 8004aae:	2205      	movs	r2, #5
 8004ab0:	7831      	ldrb	r1, [r6, #0]
 8004ab2:	4854      	ldr	r0, [pc, #336]	; (8004c04 <_svfiprintf_r+0x1ec>)
 8004ab4:	f000 fa32 	bl	8004f1c <memchr>
 8004ab8:	1c75      	adds	r5, r6, #1
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d11f      	bne.n	8004afe <_svfiprintf_r+0xe6>
 8004abe:	6822      	ldr	r2, [r4, #0]
 8004ac0:	06d3      	lsls	r3, r2, #27
 8004ac2:	d504      	bpl.n	8004ace <_svfiprintf_r+0xb6>
 8004ac4:	2353      	movs	r3, #83	; 0x53
 8004ac6:	a904      	add	r1, sp, #16
 8004ac8:	185b      	adds	r3, r3, r1
 8004aca:	2120      	movs	r1, #32
 8004acc:	7019      	strb	r1, [r3, #0]
 8004ace:	0713      	lsls	r3, r2, #28
 8004ad0:	d504      	bpl.n	8004adc <_svfiprintf_r+0xc4>
 8004ad2:	2353      	movs	r3, #83	; 0x53
 8004ad4:	a904      	add	r1, sp, #16
 8004ad6:	185b      	adds	r3, r3, r1
 8004ad8:	212b      	movs	r1, #43	; 0x2b
 8004ada:	7019      	strb	r1, [r3, #0]
 8004adc:	7833      	ldrb	r3, [r6, #0]
 8004ade:	2b2a      	cmp	r3, #42	; 0x2a
 8004ae0:	d016      	beq.n	8004b10 <_svfiprintf_r+0xf8>
 8004ae2:	0035      	movs	r5, r6
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	200a      	movs	r0, #10
 8004ae8:	68e3      	ldr	r3, [r4, #12]
 8004aea:	782a      	ldrb	r2, [r5, #0]
 8004aec:	1c6e      	adds	r6, r5, #1
 8004aee:	3a30      	subs	r2, #48	; 0x30
 8004af0:	2a09      	cmp	r2, #9
 8004af2:	d94e      	bls.n	8004b92 <_svfiprintf_r+0x17a>
 8004af4:	2900      	cmp	r1, #0
 8004af6:	d111      	bne.n	8004b1c <_svfiprintf_r+0x104>
 8004af8:	e017      	b.n	8004b2a <_svfiprintf_r+0x112>
 8004afa:	3501      	adds	r5, #1
 8004afc:	e7b0      	b.n	8004a60 <_svfiprintf_r+0x48>
 8004afe:	4b41      	ldr	r3, [pc, #260]	; (8004c04 <_svfiprintf_r+0x1ec>)
 8004b00:	6822      	ldr	r2, [r4, #0]
 8004b02:	1ac0      	subs	r0, r0, r3
 8004b04:	2301      	movs	r3, #1
 8004b06:	4083      	lsls	r3, r0
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	002e      	movs	r6, r5
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	e7ce      	b.n	8004aae <_svfiprintf_r+0x96>
 8004b10:	9b07      	ldr	r3, [sp, #28]
 8004b12:	1d19      	adds	r1, r3, #4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	9107      	str	r1, [sp, #28]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	db01      	blt.n	8004b20 <_svfiprintf_r+0x108>
 8004b1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b1e:	e004      	b.n	8004b2a <_svfiprintf_r+0x112>
 8004b20:	425b      	negs	r3, r3
 8004b22:	60e3      	str	r3, [r4, #12]
 8004b24:	2302      	movs	r3, #2
 8004b26:	4313      	orrs	r3, r2
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	782b      	ldrb	r3, [r5, #0]
 8004b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b2e:	d10a      	bne.n	8004b46 <_svfiprintf_r+0x12e>
 8004b30:	786b      	ldrb	r3, [r5, #1]
 8004b32:	2b2a      	cmp	r3, #42	; 0x2a
 8004b34:	d135      	bne.n	8004ba2 <_svfiprintf_r+0x18a>
 8004b36:	9b07      	ldr	r3, [sp, #28]
 8004b38:	3502      	adds	r5, #2
 8004b3a:	1d1a      	adds	r2, r3, #4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	9207      	str	r2, [sp, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	db2b      	blt.n	8004b9c <_svfiprintf_r+0x184>
 8004b44:	9309      	str	r3, [sp, #36]	; 0x24
 8004b46:	4e30      	ldr	r6, [pc, #192]	; (8004c08 <_svfiprintf_r+0x1f0>)
 8004b48:	2203      	movs	r2, #3
 8004b4a:	0030      	movs	r0, r6
 8004b4c:	7829      	ldrb	r1, [r5, #0]
 8004b4e:	f000 f9e5 	bl	8004f1c <memchr>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d006      	beq.n	8004b64 <_svfiprintf_r+0x14c>
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	1b80      	subs	r0, r0, r6
 8004b5a:	4083      	lsls	r3, r0
 8004b5c:	6822      	ldr	r2, [r4, #0]
 8004b5e:	3501      	adds	r5, #1
 8004b60:	4313      	orrs	r3, r2
 8004b62:	6023      	str	r3, [r4, #0]
 8004b64:	7829      	ldrb	r1, [r5, #0]
 8004b66:	2206      	movs	r2, #6
 8004b68:	4828      	ldr	r0, [pc, #160]	; (8004c0c <_svfiprintf_r+0x1f4>)
 8004b6a:	1c6e      	adds	r6, r5, #1
 8004b6c:	7621      	strb	r1, [r4, #24]
 8004b6e:	f000 f9d5 	bl	8004f1c <memchr>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d03c      	beq.n	8004bf0 <_svfiprintf_r+0x1d8>
 8004b76:	4b26      	ldr	r3, [pc, #152]	; (8004c10 <_svfiprintf_r+0x1f8>)
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d125      	bne.n	8004bc8 <_svfiprintf_r+0x1b0>
 8004b7c:	2207      	movs	r2, #7
 8004b7e:	9b07      	ldr	r3, [sp, #28]
 8004b80:	3307      	adds	r3, #7
 8004b82:	4393      	bics	r3, r2
 8004b84:	3308      	adds	r3, #8
 8004b86:	9307      	str	r3, [sp, #28]
 8004b88:	6963      	ldr	r3, [r4, #20]
 8004b8a:	9a04      	ldr	r2, [sp, #16]
 8004b8c:	189b      	adds	r3, r3, r2
 8004b8e:	6163      	str	r3, [r4, #20]
 8004b90:	e765      	b.n	8004a5e <_svfiprintf_r+0x46>
 8004b92:	4343      	muls	r3, r0
 8004b94:	0035      	movs	r5, r6
 8004b96:	2101      	movs	r1, #1
 8004b98:	189b      	adds	r3, r3, r2
 8004b9a:	e7a6      	b.n	8004aea <_svfiprintf_r+0xd2>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	425b      	negs	r3, r3
 8004ba0:	e7d0      	b.n	8004b44 <_svfiprintf_r+0x12c>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	200a      	movs	r0, #10
 8004ba6:	001a      	movs	r2, r3
 8004ba8:	3501      	adds	r5, #1
 8004baa:	6063      	str	r3, [r4, #4]
 8004bac:	7829      	ldrb	r1, [r5, #0]
 8004bae:	1c6e      	adds	r6, r5, #1
 8004bb0:	3930      	subs	r1, #48	; 0x30
 8004bb2:	2909      	cmp	r1, #9
 8004bb4:	d903      	bls.n	8004bbe <_svfiprintf_r+0x1a6>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0c5      	beq.n	8004b46 <_svfiprintf_r+0x12e>
 8004bba:	9209      	str	r2, [sp, #36]	; 0x24
 8004bbc:	e7c3      	b.n	8004b46 <_svfiprintf_r+0x12e>
 8004bbe:	4342      	muls	r2, r0
 8004bc0:	0035      	movs	r5, r6
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	1852      	adds	r2, r2, r1
 8004bc6:	e7f1      	b.n	8004bac <_svfiprintf_r+0x194>
 8004bc8:	ab07      	add	r3, sp, #28
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	003a      	movs	r2, r7
 8004bce:	0021      	movs	r1, r4
 8004bd0:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <_svfiprintf_r+0x1fc>)
 8004bd2:	9803      	ldr	r0, [sp, #12]
 8004bd4:	e000      	b.n	8004bd8 <_svfiprintf_r+0x1c0>
 8004bd6:	bf00      	nop
 8004bd8:	9004      	str	r0, [sp, #16]
 8004bda:	9b04      	ldr	r3, [sp, #16]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	d1d3      	bne.n	8004b88 <_svfiprintf_r+0x170>
 8004be0:	89bb      	ldrh	r3, [r7, #12]
 8004be2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004be4:	065b      	lsls	r3, r3, #25
 8004be6:	d400      	bmi.n	8004bea <_svfiprintf_r+0x1d2>
 8004be8:	e72d      	b.n	8004a46 <_svfiprintf_r+0x2e>
 8004bea:	2001      	movs	r0, #1
 8004bec:	4240      	negs	r0, r0
 8004bee:	e72a      	b.n	8004a46 <_svfiprintf_r+0x2e>
 8004bf0:	ab07      	add	r3, sp, #28
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	003a      	movs	r2, r7
 8004bf6:	0021      	movs	r1, r4
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <_svfiprintf_r+0x1fc>)
 8004bfa:	9803      	ldr	r0, [sp, #12]
 8004bfc:	f000 f87c 	bl	8004cf8 <_printf_i>
 8004c00:	e7ea      	b.n	8004bd8 <_svfiprintf_r+0x1c0>
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	0800524c 	.word	0x0800524c
 8004c08:	08005252 	.word	0x08005252
 8004c0c:	08005256 	.word	0x08005256
 8004c10:	00000000 	.word	0x00000000
 8004c14:	08004955 	.word	0x08004955

08004c18 <_printf_common>:
 8004c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c1a:	0015      	movs	r5, r2
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	688a      	ldr	r2, [r1, #8]
 8004c20:	690b      	ldr	r3, [r1, #16]
 8004c22:	000c      	movs	r4, r1
 8004c24:	9000      	str	r0, [sp, #0]
 8004c26:	4293      	cmp	r3, r2
 8004c28:	da00      	bge.n	8004c2c <_printf_common+0x14>
 8004c2a:	0013      	movs	r3, r2
 8004c2c:	0022      	movs	r2, r4
 8004c2e:	602b      	str	r3, [r5, #0]
 8004c30:	3243      	adds	r2, #67	; 0x43
 8004c32:	7812      	ldrb	r2, [r2, #0]
 8004c34:	2a00      	cmp	r2, #0
 8004c36:	d001      	beq.n	8004c3c <_printf_common+0x24>
 8004c38:	3301      	adds	r3, #1
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	069b      	lsls	r3, r3, #26
 8004c40:	d502      	bpl.n	8004c48 <_printf_common+0x30>
 8004c42:	682b      	ldr	r3, [r5, #0]
 8004c44:	3302      	adds	r3, #2
 8004c46:	602b      	str	r3, [r5, #0]
 8004c48:	6822      	ldr	r2, [r4, #0]
 8004c4a:	2306      	movs	r3, #6
 8004c4c:	0017      	movs	r7, r2
 8004c4e:	401f      	ands	r7, r3
 8004c50:	421a      	tst	r2, r3
 8004c52:	d027      	beq.n	8004ca4 <_printf_common+0x8c>
 8004c54:	0023      	movs	r3, r4
 8004c56:	3343      	adds	r3, #67	; 0x43
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	1e5a      	subs	r2, r3, #1
 8004c5c:	4193      	sbcs	r3, r2
 8004c5e:	6822      	ldr	r2, [r4, #0]
 8004c60:	0692      	lsls	r2, r2, #26
 8004c62:	d430      	bmi.n	8004cc6 <_printf_common+0xae>
 8004c64:	0022      	movs	r2, r4
 8004c66:	9901      	ldr	r1, [sp, #4]
 8004c68:	9800      	ldr	r0, [sp, #0]
 8004c6a:	9e08      	ldr	r6, [sp, #32]
 8004c6c:	3243      	adds	r2, #67	; 0x43
 8004c6e:	47b0      	blx	r6
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d025      	beq.n	8004cc0 <_printf_common+0xa8>
 8004c74:	2306      	movs	r3, #6
 8004c76:	6820      	ldr	r0, [r4, #0]
 8004c78:	682a      	ldr	r2, [r5, #0]
 8004c7a:	68e1      	ldr	r1, [r4, #12]
 8004c7c:	2500      	movs	r5, #0
 8004c7e:	4003      	ands	r3, r0
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d103      	bne.n	8004c8c <_printf_common+0x74>
 8004c84:	1a8d      	subs	r5, r1, r2
 8004c86:	43eb      	mvns	r3, r5
 8004c88:	17db      	asrs	r3, r3, #31
 8004c8a:	401d      	ands	r5, r3
 8004c8c:	68a3      	ldr	r3, [r4, #8]
 8004c8e:	6922      	ldr	r2, [r4, #16]
 8004c90:	4293      	cmp	r3, r2
 8004c92:	dd01      	ble.n	8004c98 <_printf_common+0x80>
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	18ed      	adds	r5, r5, r3
 8004c98:	2700      	movs	r7, #0
 8004c9a:	42bd      	cmp	r5, r7
 8004c9c:	d120      	bne.n	8004ce0 <_printf_common+0xc8>
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e010      	b.n	8004cc4 <_printf_common+0xac>
 8004ca2:	3701      	adds	r7, #1
 8004ca4:	68e3      	ldr	r3, [r4, #12]
 8004ca6:	682a      	ldr	r2, [r5, #0]
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	42bb      	cmp	r3, r7
 8004cac:	ddd2      	ble.n	8004c54 <_printf_common+0x3c>
 8004cae:	0022      	movs	r2, r4
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	9901      	ldr	r1, [sp, #4]
 8004cb4:	9800      	ldr	r0, [sp, #0]
 8004cb6:	9e08      	ldr	r6, [sp, #32]
 8004cb8:	3219      	adds	r2, #25
 8004cba:	47b0      	blx	r6
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d1f0      	bne.n	8004ca2 <_printf_common+0x8a>
 8004cc0:	2001      	movs	r0, #1
 8004cc2:	4240      	negs	r0, r0
 8004cc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cc6:	2030      	movs	r0, #48	; 0x30
 8004cc8:	18e1      	adds	r1, r4, r3
 8004cca:	3143      	adds	r1, #67	; 0x43
 8004ccc:	7008      	strb	r0, [r1, #0]
 8004cce:	0021      	movs	r1, r4
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	3145      	adds	r1, #69	; 0x45
 8004cd4:	7809      	ldrb	r1, [r1, #0]
 8004cd6:	18a2      	adds	r2, r4, r2
 8004cd8:	3243      	adds	r2, #67	; 0x43
 8004cda:	3302      	adds	r3, #2
 8004cdc:	7011      	strb	r1, [r2, #0]
 8004cde:	e7c1      	b.n	8004c64 <_printf_common+0x4c>
 8004ce0:	0022      	movs	r2, r4
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	9901      	ldr	r1, [sp, #4]
 8004ce6:	9800      	ldr	r0, [sp, #0]
 8004ce8:	9e08      	ldr	r6, [sp, #32]
 8004cea:	321a      	adds	r2, #26
 8004cec:	47b0      	blx	r6
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d0e6      	beq.n	8004cc0 <_printf_common+0xa8>
 8004cf2:	3701      	adds	r7, #1
 8004cf4:	e7d1      	b.n	8004c9a <_printf_common+0x82>
	...

08004cf8 <_printf_i>:
 8004cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cfa:	b08b      	sub	sp, #44	; 0x2c
 8004cfc:	9206      	str	r2, [sp, #24]
 8004cfe:	000a      	movs	r2, r1
 8004d00:	3243      	adds	r2, #67	; 0x43
 8004d02:	9307      	str	r3, [sp, #28]
 8004d04:	9005      	str	r0, [sp, #20]
 8004d06:	9204      	str	r2, [sp, #16]
 8004d08:	7e0a      	ldrb	r2, [r1, #24]
 8004d0a:	000c      	movs	r4, r1
 8004d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d0e:	2a78      	cmp	r2, #120	; 0x78
 8004d10:	d806      	bhi.n	8004d20 <_printf_i+0x28>
 8004d12:	2a62      	cmp	r2, #98	; 0x62
 8004d14:	d808      	bhi.n	8004d28 <_printf_i+0x30>
 8004d16:	2a00      	cmp	r2, #0
 8004d18:	d100      	bne.n	8004d1c <_printf_i+0x24>
 8004d1a:	e0c0      	b.n	8004e9e <_printf_i+0x1a6>
 8004d1c:	2a58      	cmp	r2, #88	; 0x58
 8004d1e:	d052      	beq.n	8004dc6 <_printf_i+0xce>
 8004d20:	0026      	movs	r6, r4
 8004d22:	3642      	adds	r6, #66	; 0x42
 8004d24:	7032      	strb	r2, [r6, #0]
 8004d26:	e022      	b.n	8004d6e <_printf_i+0x76>
 8004d28:	0010      	movs	r0, r2
 8004d2a:	3863      	subs	r0, #99	; 0x63
 8004d2c:	2815      	cmp	r0, #21
 8004d2e:	d8f7      	bhi.n	8004d20 <_printf_i+0x28>
 8004d30:	f7fb f9ea 	bl	8000108 <__gnu_thumb1_case_shi>
 8004d34:	001f0016 	.word	0x001f0016
 8004d38:	fff6fff6 	.word	0xfff6fff6
 8004d3c:	fff6fff6 	.word	0xfff6fff6
 8004d40:	fff6001f 	.word	0xfff6001f
 8004d44:	fff6fff6 	.word	0xfff6fff6
 8004d48:	00a8fff6 	.word	0x00a8fff6
 8004d4c:	009a0036 	.word	0x009a0036
 8004d50:	fff6fff6 	.word	0xfff6fff6
 8004d54:	fff600b9 	.word	0xfff600b9
 8004d58:	fff60036 	.word	0xfff60036
 8004d5c:	009efff6 	.word	0x009efff6
 8004d60:	0026      	movs	r6, r4
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	3642      	adds	r6, #66	; 0x42
 8004d66:	1d11      	adds	r1, r2, #4
 8004d68:	6019      	str	r1, [r3, #0]
 8004d6a:	6813      	ldr	r3, [r2, #0]
 8004d6c:	7033      	strb	r3, [r6, #0]
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e0a7      	b.n	8004ec2 <_printf_i+0x1ca>
 8004d72:	6808      	ldr	r0, [r1, #0]
 8004d74:	6819      	ldr	r1, [r3, #0]
 8004d76:	1d0a      	adds	r2, r1, #4
 8004d78:	0605      	lsls	r5, r0, #24
 8004d7a:	d50b      	bpl.n	8004d94 <_printf_i+0x9c>
 8004d7c:	680d      	ldr	r5, [r1, #0]
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	da03      	bge.n	8004d8c <_printf_i+0x94>
 8004d84:	232d      	movs	r3, #45	; 0x2d
 8004d86:	9a04      	ldr	r2, [sp, #16]
 8004d88:	426d      	negs	r5, r5
 8004d8a:	7013      	strb	r3, [r2, #0]
 8004d8c:	4b61      	ldr	r3, [pc, #388]	; (8004f14 <_printf_i+0x21c>)
 8004d8e:	270a      	movs	r7, #10
 8004d90:	9303      	str	r3, [sp, #12]
 8004d92:	e032      	b.n	8004dfa <_printf_i+0x102>
 8004d94:	680d      	ldr	r5, [r1, #0]
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	0641      	lsls	r1, r0, #25
 8004d9a:	d5f1      	bpl.n	8004d80 <_printf_i+0x88>
 8004d9c:	b22d      	sxth	r5, r5
 8004d9e:	e7ef      	b.n	8004d80 <_printf_i+0x88>
 8004da0:	680d      	ldr	r5, [r1, #0]
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	1d08      	adds	r0, r1, #4
 8004da6:	6018      	str	r0, [r3, #0]
 8004da8:	062e      	lsls	r6, r5, #24
 8004daa:	d501      	bpl.n	8004db0 <_printf_i+0xb8>
 8004dac:	680d      	ldr	r5, [r1, #0]
 8004dae:	e003      	b.n	8004db8 <_printf_i+0xc0>
 8004db0:	066d      	lsls	r5, r5, #25
 8004db2:	d5fb      	bpl.n	8004dac <_printf_i+0xb4>
 8004db4:	680d      	ldr	r5, [r1, #0]
 8004db6:	b2ad      	uxth	r5, r5
 8004db8:	4b56      	ldr	r3, [pc, #344]	; (8004f14 <_printf_i+0x21c>)
 8004dba:	270a      	movs	r7, #10
 8004dbc:	9303      	str	r3, [sp, #12]
 8004dbe:	2a6f      	cmp	r2, #111	; 0x6f
 8004dc0:	d117      	bne.n	8004df2 <_printf_i+0xfa>
 8004dc2:	2708      	movs	r7, #8
 8004dc4:	e015      	b.n	8004df2 <_printf_i+0xfa>
 8004dc6:	3145      	adds	r1, #69	; 0x45
 8004dc8:	700a      	strb	r2, [r1, #0]
 8004dca:	4a52      	ldr	r2, [pc, #328]	; (8004f14 <_printf_i+0x21c>)
 8004dcc:	9203      	str	r2, [sp, #12]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	6821      	ldr	r1, [r4, #0]
 8004dd2:	ca20      	ldmia	r2!, {r5}
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	0608      	lsls	r0, r1, #24
 8004dd8:	d550      	bpl.n	8004e7c <_printf_i+0x184>
 8004dda:	07cb      	lsls	r3, r1, #31
 8004ddc:	d502      	bpl.n	8004de4 <_printf_i+0xec>
 8004dde:	2320      	movs	r3, #32
 8004de0:	4319      	orrs	r1, r3
 8004de2:	6021      	str	r1, [r4, #0]
 8004de4:	2710      	movs	r7, #16
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	d103      	bne.n	8004df2 <_printf_i+0xfa>
 8004dea:	2320      	movs	r3, #32
 8004dec:	6822      	ldr	r2, [r4, #0]
 8004dee:	439a      	bics	r2, r3
 8004df0:	6022      	str	r2, [r4, #0]
 8004df2:	0023      	movs	r3, r4
 8004df4:	2200      	movs	r2, #0
 8004df6:	3343      	adds	r3, #67	; 0x43
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	6863      	ldr	r3, [r4, #4]
 8004dfc:	60a3      	str	r3, [r4, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	db03      	blt.n	8004e0a <_printf_i+0x112>
 8004e02:	2204      	movs	r2, #4
 8004e04:	6821      	ldr	r1, [r4, #0]
 8004e06:	4391      	bics	r1, r2
 8004e08:	6021      	str	r1, [r4, #0]
 8004e0a:	2d00      	cmp	r5, #0
 8004e0c:	d102      	bne.n	8004e14 <_printf_i+0x11c>
 8004e0e:	9e04      	ldr	r6, [sp, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00c      	beq.n	8004e2e <_printf_i+0x136>
 8004e14:	9e04      	ldr	r6, [sp, #16]
 8004e16:	0028      	movs	r0, r5
 8004e18:	0039      	movs	r1, r7
 8004e1a:	f7fb fa05 	bl	8000228 <__aeabi_uidivmod>
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	3e01      	subs	r6, #1
 8004e22:	5c5b      	ldrb	r3, [r3, r1]
 8004e24:	7033      	strb	r3, [r6, #0]
 8004e26:	002b      	movs	r3, r5
 8004e28:	0005      	movs	r5, r0
 8004e2a:	429f      	cmp	r7, r3
 8004e2c:	d9f3      	bls.n	8004e16 <_printf_i+0x11e>
 8004e2e:	2f08      	cmp	r7, #8
 8004e30:	d109      	bne.n	8004e46 <_printf_i+0x14e>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	07db      	lsls	r3, r3, #31
 8004e36:	d506      	bpl.n	8004e46 <_printf_i+0x14e>
 8004e38:	6863      	ldr	r3, [r4, #4]
 8004e3a:	6922      	ldr	r2, [r4, #16]
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	dc02      	bgt.n	8004e46 <_printf_i+0x14e>
 8004e40:	2330      	movs	r3, #48	; 0x30
 8004e42:	3e01      	subs	r6, #1
 8004e44:	7033      	strb	r3, [r6, #0]
 8004e46:	9b04      	ldr	r3, [sp, #16]
 8004e48:	1b9b      	subs	r3, r3, r6
 8004e4a:	6123      	str	r3, [r4, #16]
 8004e4c:	9b07      	ldr	r3, [sp, #28]
 8004e4e:	0021      	movs	r1, r4
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	9805      	ldr	r0, [sp, #20]
 8004e54:	9b06      	ldr	r3, [sp, #24]
 8004e56:	aa09      	add	r2, sp, #36	; 0x24
 8004e58:	f7ff fede 	bl	8004c18 <_printf_common>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d135      	bne.n	8004ecc <_printf_i+0x1d4>
 8004e60:	2001      	movs	r0, #1
 8004e62:	4240      	negs	r0, r0
 8004e64:	b00b      	add	sp, #44	; 0x2c
 8004e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e68:	2220      	movs	r2, #32
 8004e6a:	6809      	ldr	r1, [r1, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	6022      	str	r2, [r4, #0]
 8004e70:	0022      	movs	r2, r4
 8004e72:	2178      	movs	r1, #120	; 0x78
 8004e74:	3245      	adds	r2, #69	; 0x45
 8004e76:	7011      	strb	r1, [r2, #0]
 8004e78:	4a27      	ldr	r2, [pc, #156]	; (8004f18 <_printf_i+0x220>)
 8004e7a:	e7a7      	b.n	8004dcc <_printf_i+0xd4>
 8004e7c:	0648      	lsls	r0, r1, #25
 8004e7e:	d5ac      	bpl.n	8004dda <_printf_i+0xe2>
 8004e80:	b2ad      	uxth	r5, r5
 8004e82:	e7aa      	b.n	8004dda <_printf_i+0xe2>
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	680d      	ldr	r5, [r1, #0]
 8004e88:	1d10      	adds	r0, r2, #4
 8004e8a:	6949      	ldr	r1, [r1, #20]
 8004e8c:	6018      	str	r0, [r3, #0]
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	062e      	lsls	r6, r5, #24
 8004e92:	d501      	bpl.n	8004e98 <_printf_i+0x1a0>
 8004e94:	6019      	str	r1, [r3, #0]
 8004e96:	e002      	b.n	8004e9e <_printf_i+0x1a6>
 8004e98:	066d      	lsls	r5, r5, #25
 8004e9a:	d5fb      	bpl.n	8004e94 <_printf_i+0x19c>
 8004e9c:	8019      	strh	r1, [r3, #0]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9e04      	ldr	r6, [sp, #16]
 8004ea2:	6123      	str	r3, [r4, #16]
 8004ea4:	e7d2      	b.n	8004e4c <_printf_i+0x154>
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	1d11      	adds	r1, r2, #4
 8004eaa:	6019      	str	r1, [r3, #0]
 8004eac:	6816      	ldr	r6, [r2, #0]
 8004eae:	2100      	movs	r1, #0
 8004eb0:	0030      	movs	r0, r6
 8004eb2:	6862      	ldr	r2, [r4, #4]
 8004eb4:	f000 f832 	bl	8004f1c <memchr>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d001      	beq.n	8004ec0 <_printf_i+0x1c8>
 8004ebc:	1b80      	subs	r0, r0, r6
 8004ebe:	6060      	str	r0, [r4, #4]
 8004ec0:	6863      	ldr	r3, [r4, #4]
 8004ec2:	6123      	str	r3, [r4, #16]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9a04      	ldr	r2, [sp, #16]
 8004ec8:	7013      	strb	r3, [r2, #0]
 8004eca:	e7bf      	b.n	8004e4c <_printf_i+0x154>
 8004ecc:	6923      	ldr	r3, [r4, #16]
 8004ece:	0032      	movs	r2, r6
 8004ed0:	9906      	ldr	r1, [sp, #24]
 8004ed2:	9805      	ldr	r0, [sp, #20]
 8004ed4:	9d07      	ldr	r5, [sp, #28]
 8004ed6:	47a8      	blx	r5
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d0c1      	beq.n	8004e60 <_printf_i+0x168>
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	079b      	lsls	r3, r3, #30
 8004ee0:	d415      	bmi.n	8004f0e <_printf_i+0x216>
 8004ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee4:	68e0      	ldr	r0, [r4, #12]
 8004ee6:	4298      	cmp	r0, r3
 8004ee8:	dabc      	bge.n	8004e64 <_printf_i+0x16c>
 8004eea:	0018      	movs	r0, r3
 8004eec:	e7ba      	b.n	8004e64 <_printf_i+0x16c>
 8004eee:	0022      	movs	r2, r4
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	9906      	ldr	r1, [sp, #24]
 8004ef4:	9805      	ldr	r0, [sp, #20]
 8004ef6:	9e07      	ldr	r6, [sp, #28]
 8004ef8:	3219      	adds	r2, #25
 8004efa:	47b0      	blx	r6
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d0af      	beq.n	8004e60 <_printf_i+0x168>
 8004f00:	3501      	adds	r5, #1
 8004f02:	68e3      	ldr	r3, [r4, #12]
 8004f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	42ab      	cmp	r3, r5
 8004f0a:	dcf0      	bgt.n	8004eee <_printf_i+0x1f6>
 8004f0c:	e7e9      	b.n	8004ee2 <_printf_i+0x1ea>
 8004f0e:	2500      	movs	r5, #0
 8004f10:	e7f7      	b.n	8004f02 <_printf_i+0x20a>
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	0800525d 	.word	0x0800525d
 8004f18:	0800526e 	.word	0x0800526e

08004f1c <memchr>:
 8004f1c:	b2c9      	uxtb	r1, r1
 8004f1e:	1882      	adds	r2, r0, r2
 8004f20:	4290      	cmp	r0, r2
 8004f22:	d101      	bne.n	8004f28 <memchr+0xc>
 8004f24:	2000      	movs	r0, #0
 8004f26:	4770      	bx	lr
 8004f28:	7803      	ldrb	r3, [r0, #0]
 8004f2a:	428b      	cmp	r3, r1
 8004f2c:	d0fb      	beq.n	8004f26 <memchr+0xa>
 8004f2e:	3001      	adds	r0, #1
 8004f30:	e7f6      	b.n	8004f20 <memchr+0x4>

08004f32 <memcpy>:
 8004f32:	2300      	movs	r3, #0
 8004f34:	b510      	push	{r4, lr}
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d100      	bne.n	8004f3c <memcpy+0xa>
 8004f3a:	bd10      	pop	{r4, pc}
 8004f3c:	5ccc      	ldrb	r4, [r1, r3]
 8004f3e:	54c4      	strb	r4, [r0, r3]
 8004f40:	3301      	adds	r3, #1
 8004f42:	e7f8      	b.n	8004f36 <memcpy+0x4>

08004f44 <memmove>:
 8004f44:	b510      	push	{r4, lr}
 8004f46:	4288      	cmp	r0, r1
 8004f48:	d902      	bls.n	8004f50 <memmove+0xc>
 8004f4a:	188b      	adds	r3, r1, r2
 8004f4c:	4298      	cmp	r0, r3
 8004f4e:	d303      	bcc.n	8004f58 <memmove+0x14>
 8004f50:	2300      	movs	r3, #0
 8004f52:	e007      	b.n	8004f64 <memmove+0x20>
 8004f54:	5c8b      	ldrb	r3, [r1, r2]
 8004f56:	5483      	strb	r3, [r0, r2]
 8004f58:	3a01      	subs	r2, #1
 8004f5a:	d2fb      	bcs.n	8004f54 <memmove+0x10>
 8004f5c:	bd10      	pop	{r4, pc}
 8004f5e:	5ccc      	ldrb	r4, [r1, r3]
 8004f60:	54c4      	strb	r4, [r0, r3]
 8004f62:	3301      	adds	r3, #1
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d1fa      	bne.n	8004f5e <memmove+0x1a>
 8004f68:	e7f8      	b.n	8004f5c <memmove+0x18>
	...

08004f6c <_free_r>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	0005      	movs	r5, r0
 8004f70:	2900      	cmp	r1, #0
 8004f72:	d010      	beq.n	8004f96 <_free_r+0x2a>
 8004f74:	1f0c      	subs	r4, r1, #4
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	da00      	bge.n	8004f7e <_free_r+0x12>
 8004f7c:	18e4      	adds	r4, r4, r3
 8004f7e:	0028      	movs	r0, r5
 8004f80:	f000 f8d4 	bl	800512c <__malloc_lock>
 8004f84:	4a1d      	ldr	r2, [pc, #116]	; (8004ffc <_free_r+0x90>)
 8004f86:	6813      	ldr	r3, [r2, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <_free_r+0x2c>
 8004f8c:	6063      	str	r3, [r4, #4]
 8004f8e:	6014      	str	r4, [r2, #0]
 8004f90:	0028      	movs	r0, r5
 8004f92:	f000 f8d3 	bl	800513c <__malloc_unlock>
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
 8004f98:	42a3      	cmp	r3, r4
 8004f9a:	d908      	bls.n	8004fae <_free_r+0x42>
 8004f9c:	6821      	ldr	r1, [r4, #0]
 8004f9e:	1860      	adds	r0, r4, r1
 8004fa0:	4283      	cmp	r3, r0
 8004fa2:	d1f3      	bne.n	8004f8c <_free_r+0x20>
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	1841      	adds	r1, r0, r1
 8004faa:	6021      	str	r1, [r4, #0]
 8004fac:	e7ee      	b.n	8004f8c <_free_r+0x20>
 8004fae:	001a      	movs	r2, r3
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <_free_r+0x4e>
 8004fb6:	42a3      	cmp	r3, r4
 8004fb8:	d9f9      	bls.n	8004fae <_free_r+0x42>
 8004fba:	6811      	ldr	r1, [r2, #0]
 8004fbc:	1850      	adds	r0, r2, r1
 8004fbe:	42a0      	cmp	r0, r4
 8004fc0:	d10b      	bne.n	8004fda <_free_r+0x6e>
 8004fc2:	6820      	ldr	r0, [r4, #0]
 8004fc4:	1809      	adds	r1, r1, r0
 8004fc6:	1850      	adds	r0, r2, r1
 8004fc8:	6011      	str	r1, [r2, #0]
 8004fca:	4283      	cmp	r3, r0
 8004fcc:	d1e0      	bne.n	8004f90 <_free_r+0x24>
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	1841      	adds	r1, r0, r1
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	6053      	str	r3, [r2, #4]
 8004fd8:	e7da      	b.n	8004f90 <_free_r+0x24>
 8004fda:	42a0      	cmp	r0, r4
 8004fdc:	d902      	bls.n	8004fe4 <_free_r+0x78>
 8004fde:	230c      	movs	r3, #12
 8004fe0:	602b      	str	r3, [r5, #0]
 8004fe2:	e7d5      	b.n	8004f90 <_free_r+0x24>
 8004fe4:	6821      	ldr	r1, [r4, #0]
 8004fe6:	1860      	adds	r0, r4, r1
 8004fe8:	4283      	cmp	r3, r0
 8004fea:	d103      	bne.n	8004ff4 <_free_r+0x88>
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	1841      	adds	r1, r0, r1
 8004ff2:	6021      	str	r1, [r4, #0]
 8004ff4:	6063      	str	r3, [r4, #4]
 8004ff6:	6054      	str	r4, [r2, #4]
 8004ff8:	e7ca      	b.n	8004f90 <_free_r+0x24>
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	20000090 	.word	0x20000090

08005000 <_malloc_r>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	2303      	movs	r3, #3
 8005004:	1ccd      	adds	r5, r1, #3
 8005006:	439d      	bics	r5, r3
 8005008:	3508      	adds	r5, #8
 800500a:	0006      	movs	r6, r0
 800500c:	2d0c      	cmp	r5, #12
 800500e:	d21f      	bcs.n	8005050 <_malloc_r+0x50>
 8005010:	250c      	movs	r5, #12
 8005012:	42a9      	cmp	r1, r5
 8005014:	d81e      	bhi.n	8005054 <_malloc_r+0x54>
 8005016:	0030      	movs	r0, r6
 8005018:	f000 f888 	bl	800512c <__malloc_lock>
 800501c:	4925      	ldr	r1, [pc, #148]	; (80050b4 <_malloc_r+0xb4>)
 800501e:	680a      	ldr	r2, [r1, #0]
 8005020:	0014      	movs	r4, r2
 8005022:	2c00      	cmp	r4, #0
 8005024:	d11a      	bne.n	800505c <_malloc_r+0x5c>
 8005026:	4f24      	ldr	r7, [pc, #144]	; (80050b8 <_malloc_r+0xb8>)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d104      	bne.n	8005038 <_malloc_r+0x38>
 800502e:	0021      	movs	r1, r4
 8005030:	0030      	movs	r0, r6
 8005032:	f000 f869 	bl	8005108 <_sbrk_r>
 8005036:	6038      	str	r0, [r7, #0]
 8005038:	0029      	movs	r1, r5
 800503a:	0030      	movs	r0, r6
 800503c:	f000 f864 	bl	8005108 <_sbrk_r>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d12b      	bne.n	800509c <_malloc_r+0x9c>
 8005044:	230c      	movs	r3, #12
 8005046:	0030      	movs	r0, r6
 8005048:	6033      	str	r3, [r6, #0]
 800504a:	f000 f877 	bl	800513c <__malloc_unlock>
 800504e:	e003      	b.n	8005058 <_malloc_r+0x58>
 8005050:	2d00      	cmp	r5, #0
 8005052:	dade      	bge.n	8005012 <_malloc_r+0x12>
 8005054:	230c      	movs	r3, #12
 8005056:	6033      	str	r3, [r6, #0]
 8005058:	2000      	movs	r0, #0
 800505a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	1b5b      	subs	r3, r3, r5
 8005060:	d419      	bmi.n	8005096 <_malloc_r+0x96>
 8005062:	2b0b      	cmp	r3, #11
 8005064:	d903      	bls.n	800506e <_malloc_r+0x6e>
 8005066:	6023      	str	r3, [r4, #0]
 8005068:	18e4      	adds	r4, r4, r3
 800506a:	6025      	str	r5, [r4, #0]
 800506c:	e003      	b.n	8005076 <_malloc_r+0x76>
 800506e:	6863      	ldr	r3, [r4, #4]
 8005070:	42a2      	cmp	r2, r4
 8005072:	d10e      	bne.n	8005092 <_malloc_r+0x92>
 8005074:	600b      	str	r3, [r1, #0]
 8005076:	0030      	movs	r0, r6
 8005078:	f000 f860 	bl	800513c <__malloc_unlock>
 800507c:	0020      	movs	r0, r4
 800507e:	2207      	movs	r2, #7
 8005080:	300b      	adds	r0, #11
 8005082:	1d23      	adds	r3, r4, #4
 8005084:	4390      	bics	r0, r2
 8005086:	1ac2      	subs	r2, r0, r3
 8005088:	4298      	cmp	r0, r3
 800508a:	d0e6      	beq.n	800505a <_malloc_r+0x5a>
 800508c:	1a1b      	subs	r3, r3, r0
 800508e:	50a3      	str	r3, [r4, r2]
 8005090:	e7e3      	b.n	800505a <_malloc_r+0x5a>
 8005092:	6053      	str	r3, [r2, #4]
 8005094:	e7ef      	b.n	8005076 <_malloc_r+0x76>
 8005096:	0022      	movs	r2, r4
 8005098:	6864      	ldr	r4, [r4, #4]
 800509a:	e7c2      	b.n	8005022 <_malloc_r+0x22>
 800509c:	2303      	movs	r3, #3
 800509e:	1cc4      	adds	r4, r0, #3
 80050a0:	439c      	bics	r4, r3
 80050a2:	42a0      	cmp	r0, r4
 80050a4:	d0e1      	beq.n	800506a <_malloc_r+0x6a>
 80050a6:	1a21      	subs	r1, r4, r0
 80050a8:	0030      	movs	r0, r6
 80050aa:	f000 f82d 	bl	8005108 <_sbrk_r>
 80050ae:	1c43      	adds	r3, r0, #1
 80050b0:	d1db      	bne.n	800506a <_malloc_r+0x6a>
 80050b2:	e7c7      	b.n	8005044 <_malloc_r+0x44>
 80050b4:	20000090 	.word	0x20000090
 80050b8:	20000094 	.word	0x20000094

080050bc <_realloc_r>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	0007      	movs	r7, r0
 80050c0:	000d      	movs	r5, r1
 80050c2:	0016      	movs	r6, r2
 80050c4:	2900      	cmp	r1, #0
 80050c6:	d105      	bne.n	80050d4 <_realloc_r+0x18>
 80050c8:	0011      	movs	r1, r2
 80050ca:	f7ff ff99 	bl	8005000 <_malloc_r>
 80050ce:	0004      	movs	r4, r0
 80050d0:	0020      	movs	r0, r4
 80050d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	d103      	bne.n	80050e0 <_realloc_r+0x24>
 80050d8:	f7ff ff48 	bl	8004f6c <_free_r>
 80050dc:	0034      	movs	r4, r6
 80050de:	e7f7      	b.n	80050d0 <_realloc_r+0x14>
 80050e0:	f000 f834 	bl	800514c <_malloc_usable_size_r>
 80050e4:	002c      	movs	r4, r5
 80050e6:	42b0      	cmp	r0, r6
 80050e8:	d2f2      	bcs.n	80050d0 <_realloc_r+0x14>
 80050ea:	0031      	movs	r1, r6
 80050ec:	0038      	movs	r0, r7
 80050ee:	f7ff ff87 	bl	8005000 <_malloc_r>
 80050f2:	1e04      	subs	r4, r0, #0
 80050f4:	d0ec      	beq.n	80050d0 <_realloc_r+0x14>
 80050f6:	0029      	movs	r1, r5
 80050f8:	0032      	movs	r2, r6
 80050fa:	f7ff ff1a 	bl	8004f32 <memcpy>
 80050fe:	0029      	movs	r1, r5
 8005100:	0038      	movs	r0, r7
 8005102:	f7ff ff33 	bl	8004f6c <_free_r>
 8005106:	e7e3      	b.n	80050d0 <_realloc_r+0x14>

08005108 <_sbrk_r>:
 8005108:	2300      	movs	r3, #0
 800510a:	b570      	push	{r4, r5, r6, lr}
 800510c:	4d06      	ldr	r5, [pc, #24]	; (8005128 <_sbrk_r+0x20>)
 800510e:	0004      	movs	r4, r0
 8005110:	0008      	movs	r0, r1
 8005112:	602b      	str	r3, [r5, #0]
 8005114:	f7fc f940 	bl	8001398 <_sbrk>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d103      	bne.n	8005124 <_sbrk_r+0x1c>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d000      	beq.n	8005124 <_sbrk_r+0x1c>
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	bd70      	pop	{r4, r5, r6, pc}
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	20000190 	.word	0x20000190

0800512c <__malloc_lock>:
 800512c:	b510      	push	{r4, lr}
 800512e:	4802      	ldr	r0, [pc, #8]	; (8005138 <__malloc_lock+0xc>)
 8005130:	f000 f814 	bl	800515c <__retarget_lock_acquire_recursive>
 8005134:	bd10      	pop	{r4, pc}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	20000198 	.word	0x20000198

0800513c <__malloc_unlock>:
 800513c:	b510      	push	{r4, lr}
 800513e:	4802      	ldr	r0, [pc, #8]	; (8005148 <__malloc_unlock+0xc>)
 8005140:	f000 f80d 	bl	800515e <__retarget_lock_release_recursive>
 8005144:	bd10      	pop	{r4, pc}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	20000198 	.word	0x20000198

0800514c <_malloc_usable_size_r>:
 800514c:	1f0b      	subs	r3, r1, #4
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	1f18      	subs	r0, r3, #4
 8005152:	2b00      	cmp	r3, #0
 8005154:	da01      	bge.n	800515a <_malloc_usable_size_r+0xe>
 8005156:	580b      	ldr	r3, [r1, r0]
 8005158:	18c0      	adds	r0, r0, r3
 800515a:	4770      	bx	lr

0800515c <__retarget_lock_acquire_recursive>:
 800515c:	4770      	bx	lr

0800515e <__retarget_lock_release_recursive>:
 800515e:	4770      	bx	lr

08005160 <_init>:
 8005160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005166:	bc08      	pop	{r3}
 8005168:	469e      	mov	lr, r3
 800516a:	4770      	bx	lr

0800516c <_fini>:
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005172:	bc08      	pop	{r3}
 8005174:	469e      	mov	lr, r3
 8005176:	4770      	bx	lr
